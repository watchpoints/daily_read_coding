drop table if exists t1;
drop table if exists t2;
create table t1(c1 bigint primary key,c2 bigint) partition by hash (c1) partitions 10;
create table t2(c1 bigint primary key,c2 bigint) partition by hash (c1) partitions 6;
insert into t1 values(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(0,1),(7,8),(8,9),(9,10);
insert into t2 values(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(0,1),(7,8),(8,9),(9,10);
commit;
explain basic
select /*+ USE_PX parallel(3) */* from
(select c1,count(*) over(partition by c1) c2 from
(select c1,count(c2) c2 from t1 group by c1)c) a join
(select c1,count(*) c2 from t2 group by c1)b on a.c1=b.c1 ;
Query Plan
=============================================
|ID|OPERATOR                       |NAME    |
---------------------------------------------
|0 |PX COORDINATOR                 |        |
|1 | EXCHANGE OUT DISTR            |:EX10001|
|2 |  MERGE JOIN                   |        |
|3 |   EXCHANGE IN MERGE SORT DISTR|        |
|4 |    EXCHANGE OUT DISTR (PKEY)  |:EX10000|
|5 |     PX BLOCK ITERATOR         |        |
|6 |      TABLE SCAN               |t1      |
|7 |   SORT                        |        |
|8 |    PX PARTITION ITERATOR      |        |
|9 |     TABLE SCAN                |t2      |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [1], [t2.c1], [1]), filter(nil)
  1 - output([t1.c1], [t2.c1], [1], [1]), filter(nil), dop=3
  2 - output([t1.c1], [t2.c1], [1], [1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), sort_keys([t1.c1, ASC]), Local Order
  4 - (#keys=1, [t1.c1]), output([t1.c1]), filter(nil), dop=3
  5 - output([t1.c1]), filter(nil)
  6 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p[0-9])
  7 - output([t2.c1]), filter(nil), sort_keys([t2.c1, ASC]), local merge sort
  8 - output([t2.c1]), filter(nil)
  9 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p[0-5])

select /*+ USE_PX parallel(3) */* from
(select c1,count(*) over(partition by c1) c2 from
(select c1,count(c2) c2 from t1 group by c1)c) a join
(select c1,count(*) c2 from t2 group by c1)b on a.c1=b.c1;
c1	c2	c1	c2
0	1	0	1
1	1	1	1
2	1	2	1
3	1	3	1
4	1	4	1
5	1	5	1
6	1	6	1
7	1	7	1
8	1	8	1
9	1	9	1
explain basic
select a.c2,count(*) from (select /*+ USE_PX parallel(3) PQ_DISTRIBUTE(b HASH HASH) */a.c1,a.c2,b.c1 c3,b.c2 c4 from t1 a join t2 b on a.c1=b.c1)a group by a.c2;
Query Plan
================================================
|ID|OPERATOR                          |NAME    |
------------------------------------------------
|0 |PX COORDINATOR                    |        |
|1 | EXCHANGE OUT DISTR               |:EX10003|
|2 |  HASH GROUP BY                   |        |
|3 |   EXCHANGE IN DISTR              |        |
|4 |    EXCHANGE OUT DISTR (HASH)     |:EX10002|
|5 |     MERGE JOIN                   |        |
|6 |      EXCHANGE IN MERGE SORT DISTR|        |
|7 |       EXCHANGE OUT DISTR (HASH)  |:EX10000|
|8 |        PX BLOCK ITERATOR         |        |
|9 |         TABLE SCAN               |a       |
|10|      EXCHANGE IN MERGE SORT DISTR|        |
|11|       EXCHANGE OUT DISTR (HASH)  |:EX10001|
|12|        PX BLOCK ITERATOR         |        |
|13|         TABLE SCAN               |b       |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([a.c2], [T_FUN_COUNT(*)]), filter(nil)
  1 - output([a.c2], [T_FUN_COUNT(*)]), filter(nil), dop=3
  2 - output([a.c2], [T_FUN_COUNT(*)]), filter(nil), 
      group([a.c2]), agg_func([T_FUN_COUNT(*)])
  3 - output([a.c2]), filter(nil)
  4 - (#keys=1, [a.c2]), output([a.c2]), filter(nil), dop=3
  5 - output([a.c2]), filter(nil), 
      equal_conds([a.c1 = b.c1]), other_conds(nil)
  6 - output([a.c1], [a.c2]), filter(nil), sort_keys([a.c1, ASC]), Local Order
  7 - (#keys=1, [a.c1]), output([a.c1], [a.c2]), filter(nil), dop=3
  8 - output([a.c1], [a.c2]), filter(nil)
  9 - output([a.c1], [a.c2]), filter(nil), 
      access([a.c1], [a.c2]), partitions(p[0-9])
  10 - output([b.c1]), filter(nil), sort_keys([b.c1, ASC]), Local Order
  11 - (#keys=1, [b.c1]), output([b.c1]), filter(nil), dop=3
  12 - output([b.c1]), filter(nil)
  13 - output([b.c1]), filter(nil), 
      access([b.c1]), partitions(p[0-5])

select a.c2,count(*) from (select /*+ USE_PX parallel(3) PQ_DISTRIBUTE(b HASH HASH) */a.c1,a.c2,b.c1 c3,b.c2 c4 from t1 a join t2 b on a.c1=b.c1)a group by a.c2;
c2	count(*)
1	1
10	1
2	1
3	1
4	1
5	1
6	1
7	1
8	1
9	1
