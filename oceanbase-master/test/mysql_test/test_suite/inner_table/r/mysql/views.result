connect  obsys,$OBMYSQL_MS0,admin,$OBMYSQL_PWD,test,$OBMYSQL_PORT;
connection obsys;
use information_schema;
select * from views order by table_name desc;
TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	VIEW_DEFINITION	CHECK_OPTION	IS_UPDATABLE	DEFINER	SECURITY_TYPE	CHARACTER_SET_CLIENT	COLLATION_CONNECTION
def	SYS	V$VERSION	     SELECT       VALUE AS BANNER,       0  AS CON_ID     FROM       SYS.TENANT_VIRTUAL_SESSION_VARIABLE     WHERE       VARIABLE_NAME = 'version_comment' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$TIMEZONE_NAMES	     SELECT       NA.NAME AS TZNAME,       TR.ABBREVIATION AS TZABBREV,       NA.TENANT_ID AS CON_ID     FROM SYS.ALL_VIRTUAL_TENANT_TIME_ZONE_NAME_REAL_AGENT NA         JOIN SYS.ALL_VIRTUAL_TENANT_TIME_ZONE_TRANSITION_TYPE_REAL_AGENT TR         ON NA.TIME_ZONE_ID = TR.TIME_ZONE_ID         AND NA.TENANT_ID = EFFECTIVE_TENANT_ID()         AND TR.TENANT_ID = EFFECTIVE_TENANT_ID()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$TENANT_PX_WORKER_STAT	   SELECT     SESSION_ID,     TENANT_ID,     SVR_IP,     SVR_PORT,     TRACE_ID,     QC_ID,     SQC_ID,     WORKER_ID,     DFO_ID,     START_TIME   FROM SYS.GV$TENANT_PX_WORKER_STAT   WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$TENANT_MEMSTORE_ALLOCATOR_INFO	     SELECT CON_ID, TABLE_ID, PARTITION_ID, MT_BASE_VERSION, RETIRE_CLOCK, MT_IS_FROZEN, MT_PROTECTION_CLOCK, MT_SNAPSHOT_VERSION     FROM SYS.GV$TENANT_MEMSTORE_ALLOCATOR_INFO     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SYSTEM_EVENT	     SELECT CON_ID, EVENT_ID, EVENT, WAIT_CLASS_ID, "WAIT_CLASS#", WAIT_CLASS, TOTAL_WAITS, TOTAL_TIMEOUTS, TIME_WAITED, AVERAGE_WAIT, TIME_WAITED_MICRO     FROM SYS.GV$SYSTEM_EVENT     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SYSSTAT	     SELECT CON_ID, "STATISTIC#", VALUE, STAT_ID, NAME, CLASS     FROM SYS.GV$SYSSTAT     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SSTABLE	 SELECT   M.TABLE_TYPE,   M.TABLE_ID,   T.TABLE_NAME,   T.TENANT_ID,   M.PARTITION_ID,   M.INDEX_ID,   M.BASE_VERSION,   M.MULTI_VERSION_START,   M.SNAPSHOT_VERSION,   M.START_LOG_ID,   M.END_LOG_ID,   M.MAX_LOG_ID,   M.VERSION,   M.LOGICAL_DATA_VERSION,   M."SIZE",   M.IS_ACTIVE,   M.REF,   M.WRITE_REF,   M.TRX_COUNT,   M.PENDING_LOG_PERSISTING_ROW_CNT,   M.UPPER_TRANS_VERSION,   M.CONTAIN_UNCOMMITTED_ROW FROM   SYS.ALL_VIRTUAL_TABLE_MGR_AGENT M JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T   ON M.TABLE_ID = T.TABLE_ID     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE   M.SVR_IP=HOST_IP() AND   M.SVR_PORT=RPC_PORT() AND   T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_WORKAREA_HISTOGRAM	   SELECT       LOW_OPTIMAL_SIZE,       HIGH_OPTIMAL_SIZE,       OPTIMAL_EXECUTIONS,       ONEPASS_EXECUTIONS,       MULTIPASSES_EXECUTIONS,       TOTAL_EXECUTIONS,       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_HISTOGRAM_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')   AND SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_WORKAREA_ACTIVE	   SELECT       CAST(NULL AS NUMBER) AS SQL_HASH_VALUE,       SQL_ID,       CAST(NULL AS DATE) AS SQL_EXEC_START,       SQL_EXEC_ID,       CAST(NULL AS RAW(8)) AS WORKAREA_ADDRESS,       OPERATION_TYPE,       OPERATION_ID,       POLICY,       SID,       CAST(NULL AS NUMBER) AS QCINST_ID,       CAST(NULL AS NUMBER) AS QCSID,       ACTIVE_TIME,       WORK_AREA_SIZE,       EXPECT_SIZE,       ACTUAL_MEM_USED,       MAX_MEM_USED,       NUMBER_PASSES,       TEMPSEG_SIZE,       CAST(NULL AS VARCHAR2(20)) AS TABLESPACE,       CAST(NULL AS NUMBER) AS "SEGRFNO#",       CAST(NULL AS NUMBER) AS "SEGBLK#",       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_ACTIVE_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')   AND SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_WORKAREA	   SELECT       CAST(NULL AS RAW(8)) AS ADDRESS,       CAST(NULL AS NUMBER) AS HASH_VALUE,       SQL_ID,       CAST(NULL AS NUMBER) AS CHILD_NUMBER,       CAST(NULL AS RAW(8)) AS WORKAREA_ADDRESS,       OPERATION_TYPE,       OPERATION_ID,       POLICY,       ESTIMATED_OPTIMAL_SIZE,       ESTIMATED_ONEPASS_SIZE,       LAST_MEMORY_USED,       LAST_EXECUTION,       LAST_DEGREE,       TOTAL_EXECUTIONS,       OPTIMAL_EXECUTIONS,       ONEPASS_EXECUTIONS,       multipasses_executions,       ACTIVE_TIME,       MAX_TEMPSEG_SIZE,       LAST_TEMPSEG_SIZE,       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_HISTORY_STAT_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')   AND SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_PLAN_MONITOR	     SELECT * from SYS.GV$SQL_PLAN_MONITOR  WHERE SVR_IP=HOST_IP() AND SVR_PORT=RPC_Port() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_MONITOR_STATNAME	     SELECT       NULL CON_ID,       ID,       GROUP_ID,       NAME,       DESCRIPTION,       0 TYPE,       0 FLAGS     FROM SYS.ALL_VIRTUAL_SQL_MONITOR_STATNAME 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SQL_AUDIT	SELECT * FROM SYS.GV$SQL_AUDIT WHERE SVR_IP=HOST_IP() AND SVR_PORT=RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SESSTAT	     SELECT SID, CON_ID, "STATISTIC#", VALUE     FROM SYS.GV$SESSTAT     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SESSION_WAIT_HISTORY	     SELECT SID,CON_ID,"SEQ#" AS "SEQ#","EVENT#" AS "EVENT#",EVENT,     P1TEXT,P1,P2TEXT,P2,P3TEXT,     P3,WAIT_TIME_MICRO,TIME_SINCE_LAST_WAIT_MICRO,WAIT_TIME     FROM SYS.GV$SESSION_WAIT_HISTORY     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SESSION_WAIT	     SELECT SID,CON_ID,EVENT,P1TEXT,P1,      P2TEXT,P2,P3TEXT,P3,WAIT_CLASS_ID,      "WAIT_CLASS#",WAIT_CLASS,STATE,WAIT_TIME_MICRO,TIME_REMAINING_MICRO,      TIME_SINCE_LAST_WAIT_MICRO      FROM SYS.GV$SESSION_WAIT      WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$SERVER_SCHEMA_INFO	 SELECT   TENANT_ID,   REFRESHED_SCHEMA_VERSION,   RECEIVED_SCHEMA_VERSION,   SCHEMA_COUNT,   SCHEMA_SIZE,   MIN_SSTABLE_SCHEMA_VERSION FROM   SYS.ALL_VIRTUAL_SERVER_SCHEMA_INFO_AGENT WHERE   SVR_IP=HOST_IP() AND   SVR_PORT=RPC_PORT() AND   TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$RSRC_PLAN	SELECT           CAST(NULL as NUMBER) AS ID,           B.plan NAME,           CAST('TRUE' AS VARCHAR2(5)) AS IS_TOP_PLAN,           CAST('ON' AS VARCHAR2(3)) AS CPU_MANAGED,           CAST(NULL AS VARCHAR2(3)) AS INSTANCE_CAGING,           CAST(NULL AS NUMBER) AS PARALLEL_SERVERS_ACTIVE,           CAST(NULL AS NUMBER) AS PARALLEL_SERVERS_TOTAL,           CAST(NULL AS VARCHAR2(32)) AS PARALLEL_EXECUTION_MANAGED         FROM SYS.tenant_virtual_global_variable A, SYS.DBA_RSRC_PLANS B         WHERE A.variable_name = 'resource_manager_plan' AND A.value = B.plan 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$RESTORE_POINT	SELECT           TENANT_ID,           SNAPSHOT_TS as SNAPSHOT,           GMT_CREATE as TIME,           EXTRA_INFO as NAME         FROM SYS.ALL_VIRTUAL_ACQUIRED_SNAPSHOT_AGENT         WHERE snapshot_type = 3 and (tenant_id = effective_tenant_id() or effective_tenant_id() = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PS_STAT	   SELECT svr_ip, svr_port, stmt_count,          hit_count, access_count, mem_hold       FROM SYS.GV$PS_STAT WHERE       SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PS_ITEM_INFO	   SELECT svr_ip, svr_port, stmt_id, db_id          ps_sql, param_count, stmt_item_ref_count,          stmt_info_ref_count, mem_hold, stmt_type, checksum, expired       FROM SYS.GV$PS_ITEM_INFO WHERE       SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PLAN_CACHE_STAT	       SELECT SQL_NUM,       MEM_USED,       MEM_HOLD,       ACCESS_COUNT,       HIT_COUNT,       HIT_RATE,       PLAN_NUM,       MEM_LIMIT,       HASH_BUCKET,       STMTKEY_NUM       FROM SYS.GV$PLAN_CACHE_STAT WHERE       SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PLAN_CACHE_REFERENCE_INFO	 SELECT * FROM GV$PLAN_CACHE_REFERENCE_INFO WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PLAN_CACHE_PLAN_STAT	       SELECT * FROM SYS.GV$PLAN_CACHE_PLAN_STAT WHERE SVR_IP=HOST_IP() AND SVR_PORT=RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$PLAN_CACHE_PLAN_EXPLAIN	       SELECT * FROM SYS.GV$PLAN_CACHE_PLAN_EXPLAIN WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$OPEN_CURSOR	     SELECT       SADDR,       SID,       USER_NAME,       ADDRESS,       HASH_VALUE,       SQL_ID,       SQL_TEXT,       LAST_SQL_ACTIVE_TIME,       SQL_EXEC_ID FROM GV$OPEN_CURSOR       WHERE svr_ip = host_ip() AND svr_port = rpc_port()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$OB_SQL_WORKAREA_MEMORY_INFO	   SELECT       MAX_WORKAREA_SIZE,       WORKAREA_HOLD_SIZE,       MAX_AUTO_WORKAREA_SIZE,       MEM_TARGET,       TOTAL_MEM_USED,       GLOBAL_MEM_BOUND,       DRIFT_SIZE,       WORKAREA_COUNT,       MANUAL_CALC_COUNT   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_MEMORY_INFO_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')   AND SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$NLS_PARAMETERS	     SELECT       CAST(UPPER(VARIABLE_NAME) AS VARCHAR(64)) AS PARAMETER,       CAST(VALUE AS VARCHAR(64)) AS VALUE,       0  AS CON_ID     FROM       SYS.TENANT_VIRTUAL_SESSION_VARIABLE     WHERE       VARIABLE_NAME LIKE 'nls_%' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$MEMSTORE_INFO	     SELECT CON_ID, PARTITION_ID,     VERSION,     BASE_VERSION,     MULTI_VERSION_START,     SNAPSHOT_VERSION,     IS_ACTIVE,     USED,     HASH_ITEMS,     BTREE_ITEMS     FROM SYS.GV$MEMSTORE_INFO     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$MEMSTORE	     SELECT CON_ID, ACTIVE, TOTAL, "FREEZE_TRIGGER", "MEM_LIMIT", FREEZE_CNT     FROM SYS.GV$MEMSTORE     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$MEMORY	     SELECT CON_ID, CONTEXT, COUNT, USED, ALLOC_COUNT, FREE_COUNT     FROM SYS.GV$MEMORY     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$LOCK	     SELECT       TABLE_ID,       ADDR,       KADDR,       SID,       TYPE,       LMODE,       REQUEST,       CTIME,       BLOCK,       CON_ID FROM GV$LOCK       WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$INSTANCE	       SELECT       CAST(ID AS NUMBER) INST_ID,       CAST(NULL AS NUMBER) INSTANCE_NUMBER,       CAST(NULL AS VARCHAR2(16)) INSTANCE_NAME,       CAST(CONCAT(SVR_IP, CONCAT(':', SVR_PORT)) AS VARCHAR2(64)) HOST_NAME,       CAST(SUBSTR(BUILD_VERSION, 1, 11) AS VARCHAR2(17)) VERSION,       CAST(NULL AS DATE) STARTUP_TIME,       CAST(NULL AS VARCHAR2(12)) STATUS,       CAST(NULL AS VARCHAR2(3)) PARALLEL,       CAST(NULL AS NUMBER) THREAD#,       CAST(NULL AS VARCHAR2(7)) ARCHIVER,       CAST(NULL AS VARCHAR2(15)) LOG_SWITCH_WAIT,       CAST(NULL AS VARCHAR2(10)) LOGINS,       CAST(NULL AS VARCHAR2(3)) SHUTDOWN_PENDING,       CAST(STATUS AS VARCHAR2(17)) DATABASE_STATUS,       CAST(NULL AS VARCHAR2(18)) INSTANCE_ROLE,       CAST(NULL AS VARCHAR2(9)) ACTIVE_STATE,       CAST(NULL AS VARCHAR2(2)) BLOCKED,       CAST(NULL AS NUMBER) CON_ID,       CAST(NULL AS VARCHAR2(11)) INSTANCE_MODE,       CAST(NULL AS VARCHAR2(7)) EDITION,       CAST(NULL AS VARCHAR2(80)) FAMILY,       CAST(NULL AS VARCHAR2(15)) DATABASE_TYPE       FROM       SYS.ALL_VIRTUAL_SERVER_AGENT WHERE       IS_SERVING_TENANT(SVR_IP, SVR_PORT, SYS_CONTEXT('USERENV', 'CON_ID')) = 1 AND       SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	V$GLOBAL_TRANSACTION	     SELECT       FORMATID,       GLOBALID,       BRANCHID,       BRANCHES,       REFCOUNT,       PREPARECOUNT,       STATE,       FLAGS,       COUPLING,       CON_ID     FROM GV$GLOBAL_TRANSACTION     WHERE SVR_IP = HOST_IP() AND SVR_PORT = RPC_PORT()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_VIEWS	   SELECT CAST(A.TABLE_NAME AS VARCHAR2(128)) VIEW_NAME,         CAST(LENGTH(A.VIEW_DEFINITION) AS NUMBER) TEXT_LENGTH,         TO_CLOB(VIEW_DEFINITION) TEXT,         CAST(NULL AS NUMBER) OID_TEXT_LENGTH,         CAST(NULL AS VARCHAR2(4000)) OID_TEXT,         CAST(NULL AS VARCHAR2(30)) VIEW_TYPE,         CAST(NULL AS VARCHAR2(30)) SUPERVIEW_NAME,         CAST(NULL AS VARCHAR2(1)) EDITIONING_VIEW,         CAST(NULL AS VARCHAR2(1)) READ_ONLY  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A,        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B   WHERE A.TABLE_TYPE = 4         AND A.DATABASE_ID = B.DATABASE_ID         AND B.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')        AND A.TENANT_ID = EFFECTIVE_TENANT_ID()        AND B.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TYPE_METHODS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(6)) AS METHOD_TYPE,   CAST(NULL AS NUMBER) AS PARAMETERS,   CAST(NULL AS NUMBER) AS RESULTS,   CAST(NULL AS VARCHAR2(3)) AS FINAL,   CAST(NULL AS VARCHAR2(3)) AS INSTANTIABLE,   CAST(NULL AS VARCHAR2(3)) AS OVERRIDING,   CAST(NULL AS VARCHAR2(3)) AS INHERITED FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TYPE_ATTRS	     SELECT /*+ USE_MERGE(T, A, D, T1, D1) */       T.TYPE_NAME AS TYPE_NAME,       A.NAME AS ATTR_NAME,       CAST(NULL AS VARCHAR2(7)) AS ATTR_TYPE_MOD,       CAST(         CASE A.PROPERTIES         WHEN 3 THEN NULL         ELSE D1.DATABASE_NAME END AS VARCHAR2(128)) AS ATTR_TYPE_OWNER,       CAST(         CASE A.PROPERTIES         WHEN 3           THEN DECODE (BITAND(A.TYPE_ATTR_ID,1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(A.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(A.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(A.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, '',             46, DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ATTR_TYPE_NAME,       A.LENGTH AS LENGTH,       A.NUMBER_PRECISION AS NUMBER_PRECISION,       A.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       A.ATTRIBUTE AS ATTR_NO,       CAST('NO' AS CHAR(2)) AS INHERITED,       CAST('C' AS CHAR(1)) AS CHAR_USED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_TYPE_ATTR_REAL_AGENT A         ON T.TYPE_ID = A.TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')         AND T.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.DATABASE_ID = USERENV('SCHEMAID')       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = A.TYPE_ATTR_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TYPES	     SELECT       T.TYPE_NAME AS TYPE_NAME,       T.TYPE_ID AS TYPE_OID,       CAST(         CASE T.TYPECODE         WHEN 1 THEN 'COLLECTION'         WHEN 2 THEN 'OBJECT' END AS VARCHAR2(10)) AS TYPECODE,       T.ATTRIBUTES AS ATTRIBUTES,       T.METHODS AS METHODS,       CAST('NO' AS CHAR(2)) AS PREDEFINED,       CAST('NO' AS CHAR(2)) AS INCOMPLETE,       CAST('YES' AS CHAR(3)) AS FINAL,       CAST('YES' AS CHAR(3)) AS INSTANTIABLE,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_OWNER,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_NAME,       T.LOCAL_ATTRS AS LOCAL_ATTRIBUTES,       T.LOCAL_METHODS AS LOCAL_METHODS,       T.TYPE_ID AS TYPEID     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON D.DATABASE_ID = T.DATABASE_ID            AND T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')            AND D.DATABASE_ID = USERENV('SCHEMAID')            AND T.TENANT_ID = EFFECTIVE_TENANT_ID()            AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TRIGGERS	 SELECT TRG.TRIGGER_NAME AS TRIGGER_NAME,        CAST(DECODE(BITAND(TRG.TIMING_POINTS, 30),                    4, 'BEFORE EACH ROW',                    8, 'AFTER EACH ROW')             AS VARCHAR2(16)) AS TRIGGER_TYPE,        CAST(DECODE(TRG.TRIGGER_EVENTS,                    2, 'INSERT',                    4, 'UPDATE',                    8, 'DELETE',                    2 + 4, 'INSERT OR UPDATE',                    2 + 8, 'INSERT OR DELETE',                    4 + 8, 'UPDATE OR DELETE',                    2 + 4 + 8, 'INSERT OR UPDATE OR DELETE')             AS VARCHAR2(246)) AS TRIGGERING_EVENT,        DB2.DATABASE_NAME AS TABLE_OWNER,        CAST(DECODE(TRG.BASE_OBJECT_TYPE,                    5, 'TABLE')             AS VARCHAR2(18)) AS BASE_OBJECT_TYPE,        TBL.TABLE_NAME AS TABLE_NAME,        CAST(NULL AS VARCHAR2(4000)) AS COLUMN_NAME,        CAST(CONCAT('REFERENCING', CONCAT(CONCAT(' NEW AS ', REF_NEW_NAME), CONCAT(' OLD AS ', REF_OLD_NAME)))             AS VARCHAR2(422)) AS REFERENCING_NAMES,        WHEN_CONDITION AS WHEN_CLAUSE,        CAST(decode(BITAND(TRG.trigger_flags, 1), 1, 'ENABLED', 'DISABLED') AS VARCHAR2(8)) AS STATUS,        TRIGGER_BODY AS DESCRIPTION,        CAST('PL/SQL' AS VARCHAR2(11)) AS ACTION_TYPE,        TRIGGER_BODY AS TRIGGER_BODY,        CAST('NO' AS VARCHAR2(7)) AS CROSSEDITION,        CAST('NO' AS VARCHAR2(3)) AS BEFORE_STATEMENT,        CAST('NO' AS VARCHAR2(3)) AS BEFORE_ROW,        CAST('NO' AS VARCHAR2(3)) AS AFTER_ROW,        CAST('NO' AS VARCHAR2(3)) AS AFTER_STATEMENT,        CAST('NO' AS VARCHAR2(3)) AS INSTEAD_OF_ROW,        CAST('YES' AS VARCHAR2(3)) AS FIRE_ONCE,        CAST('NO' AS VARCHAR2(3)) AS APPLY_SERVER_ONLY   FROM (SELECT * FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID())TRG        LEFT JOIN        SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TBL        ON TRG.BASE_OBJECT_ID = TBL.TABLE_ID         AND TBL.TENANT_ID = EFFECTIVE_TENANT_ID()        INNER JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB2        ON TBL.DATABASE_ID = DB2.DATABASE_ID         AND DB2.TENANT_ID = EFFECTIVE_TENANT_ID()  WHERE TRG.DATABASE_ID = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_SUBPARTITIONS	SELECT       CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(PART.PART_NAME AS VARCHAR2(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NAME AS VARCHAR2(128))  SUBPARTITION_NAME,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.SUB_PART_ID + 1 AS NUMBER) SUBPARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(3)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID       AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()       AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()) DB_TB      JOIN      (SELECT P_PART.PART_NAME,              P_PART.SUB_PART_NUM,              P_PART.TABLE_ID,              S_PART.SUB_PART_NAME,              S_PART.HIGH_BOUND_VAL,              S_PART.LIST_VAL,              S_PART.COMPRESS_FUNC_NAME,              S_PART.SUB_PART_ID,              S_PART.TABLESPACE_ID        FROM SYS.ALL_VIRTUAL_PART_REAL_AGENT P_PART,            SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT S_PART       WHERE P_PART.PART_ID = S_PART.PART_ID AND             P_PART.TABLE_ID = S_PART.TABLE_ID             AND P_PART.TENANT_ID = EFFECTIVE_TENANT_ID()             AND S_PART.TENANT_ID = EFFECTIVE_TENANT_ID()) PART      ON      DB_TB.TABLE_ID = PART.TABLE_ID AND      DB_TB.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID      AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_PRIVS	     SELECT C.USER_NAME AS GRANTEE,        E.DATABASE_NAME AS OWNER,        CAST (DECODE(A.OBJTYPE,11, SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')),                         D.TABLE_NAME) AS VARCHAR(128)) AS TABLE_NAME,        B.USER_NAME AS GRANTOR,        CAST (DECODE(A.PRIV_ID, 1, 'ALTER',                          2, 'AUDIT',                          3, 'COMMENT',                          4, 'DELETE',                          5, 'GRANT',                          6, 'INDEX',                          7, 'INSERT',                          8, 'LOCK',                          9, 'RENAME',                          10, 'SELECT',                          11, 'UPDATE',                          12, 'REFERENCES',                          13, 'EXECUTE',                          14, 'CREATE',                          15, 'FLASHBACK',                          16, 'READ',                          17, 'WRITE',                          'OTHERS') AS VARCHAR(40)) AS PRIVILEGE,        DECODE(A.PRIV_OPTION,0,'NO', 1,'YES','') AS GRANTABLE,        CAST('NO' AS VARCHAR(10)) AS  HIERARCHY       FROM SYS.ALL_VIRTUAL_TENANT_OBJAUTH_REAL_AGENT A ,               SYS.ALL_VIRTUAL_USER_REAL_AGENT B,               SYS.ALL_VIRTUAL_USER_REAL_AGENT C,               (SELECT TABLE_ID, TABLE_NAME, DATABASE_ID                  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT                  WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT PACKAGE_ID AS TABLE_ID, PACKAGE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT                   WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT ROUTINE_ID AS TABLE_ID, ROUTINE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT                WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT SEQUENCE_ID AS TABLE_ID, SEQUENCE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT                WHERE TENANT_ID = EFFECTIVE_TENANT_ID()               ) D,               SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E       WHERE A.GRANTOR_ID = B.USER_ID         AND A.GRANTEE_ID = C.USER_ID         AND A.COL_ID = 65535         AND A.OBJ_ID = D.TABLE_ID         AND D.DATABASE_ID=E.DATABASE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.DATABASE_NAME != '__recyclebin'         AND (SYS_CONTEXT('USERENV','CURRENT_USER') IN (C.USER_NAME, B.USER_NAME)              OR E.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_PARTITIONS	SELECT       CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE WHEN      PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) COMPOSITE,      CAST(PART.PART_NAME AS VARCHAR(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NUM AS NUMBER)  SUBPARTITION_COUNT,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.PART_ID + 1 AS NUMBER) PARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(30)) PARENT_TABLE_PARTITION,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(4)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID         AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()         AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()) DB_TB      JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART      ON   DB_TB.TABLE_ID = PART.TABLE_ID          AND PART.TENANT_ID = EFFECTIVE_TENANT_ID()          AND DB_TB.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID       AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_COMMENTS	     SELECT       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN TABLE_TYPE = 0 OR TABLE_TYPE = 2 OR TABLE_TYPE = 3 OR TABLE_TYPE = 5 OR TABLE_TYPE = 8 OR TABLE_TYPE = 9 THEN   'TABLE' WHEN TABLE_TYPE = 1 OR TABLE_TYPE = 4 OR TABLE_TYPE = 7 THEN 'VIEW' ELSE NULL END AS VARCHAR2(11)) AS TABLE_TYPE,       CAST(B."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B     ON A.DATABASE_ID = B.DATABASE_ID     AND A.TENANT_ID = EFFECTIVE_TENANT_ID()     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     AND A.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_COLUMNS	select   TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM   from SYS.USER_TAB_COLS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_COLS_V$	 SELECT   cast(t.table_name as VARCHAR2(128)) as  TABLE_NAME,   cast(c.column_name as VARCHAR2(128)) as  COLUMN_NAME,   cast(decode(c.data_type,         0, 'NULL',          1, 'NUMBER',         2, 'NUMBER',         3, 'NUMBER',         4, 'NUMBER',         5, 'NUMBER',          6, 'NUMBER',         7, 'NUMBER',         8, 'NUMBER',         9, 'NUMBER',         10, 'NUMBER',          11, 'BINARY_FLOAT',         12, 'BINARY_DOUBLE',          13, 'NUMBER',         14, 'NUMBER',          15, 'NUMBER',         16, 'NUMBER',          17, 'DATE',         18, 'TIMESTAMP',         19, 'DATE',         20, 'TIME',         21, 'YEAR',          22, 'VARCHAR2',         23, 'CHAR',         24, 'HEX_STRING',          25, 'EXT',         26, 'UNKNOWN',          27, 'TINYTEXT',         28, 'TEXT',         29, 'MEDIUMTEXT',         30, decode(c.collation_type, 63, 'BLOB', 'CLOB'),         31, 'BIT',         32, 'ENUM',         33, 'SET',         34, 'ENUM_INNER',         35, 'SET_INNER',         36, concat('TIMESTAMP(', concat(c.data_scale, ') WITH TIME ZONE')),         37, concat('TIMESTAMP(', concat(c.data_scale, ') WITH LOCAL TIME ZONE')),         38, concat('TIMESTAMP(', concat(c.data_scale, ')')),         39, 'RAW',         40, concat('INTERVAL YEAR(', concat(c.data_scale, ') TO MONTH')),         41, concat('INTERVAL DAY(', concat(trunc(c.data_scale/10), concat(') TO SECOND(', concat(mod(c.data_scale, 10), ')')))),         42, 'FLOAT',         43, 'NVARCHAR2',         44, 'NCHAR',         45, '',         'UNDEFINED') as VARCHAR2(128)) as  DATA_TYPE,   cast(NULL as VARCHAR2(3)) as  DATA_TYPE_MOD,   cast(NULL as VARCHAR2(128)) as  DATA_TYPE_OWNER,   cast(c.data_length as NUMBER) as  DATA_LENGTH,   cast(CASE WHEN c.data_type in (11,12,17,18,19,22,23,27,28,29,30,36,37,38,43,44)             THEN NULL             ELSE CASE WHEN c.data_precision < 0 THEN NULL ELSE c.data_precision END        END as NUMBER) as  DATA_PRECISION,   cast(CASE WHEN c.data_type in (11,12,17,19,22,23,27,28,29,30,42,43,44)             THEN NULL             ELSE CASE WHEN c.data_scale < -84 THEN NULL ELSE c.data_scale END        END as NUMBER) as  DATA_SCALE,   cast(decode(c.nullable, 1, 'Y', 'N') as VARCHAR2(1)) as  NULLABLE,   cast(decode(BITAND(c.column_flags, 64), 0, c.column_id, NULL) as NUMBER) as  COLUMN_ID,   cast(LENGTHB(c.cur_default_value_v2) as NUMBER) as  DEFAULT_LENGTH,   cast(c.cur_default_value_v2 as /* TODO: LONG() */ VARCHAR(128)) as  DATA_DEFAULT,   cast(NULL as NUMBER) as  NUM_DISTINCT,   cast(NULL as /* TODO: RAW */ varchar(128)) as  LOW_VALUE,   cast(NULL as /* TODO: RAW */ varchar(128)) as  HIGH_VALUE,   cast(NULL as NUMBER) as  DENSITY,   cast(NULL as NUMBER) as  NUM_NULLS,   cast(NULL as NUMBER) as  NUM_BUCKETS,   cast(NULL as DATE) as  LAST_ANALYZED,   cast(NULL as NUMBER) as  SAMPLE_SIZE,   cast(NULL as VARCHAR2(44)) as  CHARACTER_SET_NAME,   cast(NULL as NUMBER) as  CHAR_COL_DECL_LENGTH,   cast(NULL as VARCHAR2(3)) as  GLOBAL_STATS,   cast(NULL as VARCHAR2(3)) as  USER_STATS,   cast(NULL as VARCHAR2(80)) as  NOTES,   cast(NULL as NUMBER) as  AVG_COL_LEN,   cast(decode(c.data_type,          22, c.data_length,          23, c.data_length,          0) as NUMBER) as  CHAR_LENGTH,   cast(decode(c.data_type,          22, decode(c.data_precision, 1, 'C', 'B'),          23, decode(c.data_precision, 1, 'C', 'B'),          NULL) as VARCHAR2(1)) as  CHAR_USED,   cast(NULL as VARCHAR2(3)) as  V80_FMT_IMAGE,   cast(NULL as VARCHAR2(3)) as  DATA_UPGRADED,   cast(decode(BITAND(c.column_flags, 64), 0, 'NO', 'YES') as VARCHAR2(3)) as HIDDEN_COLUMN,   cast(decode(BITAND(c.column_flags, 1), 1, 'YES', 'NO') as VARCHAR2(3)) as  VIRTUAL_COLUMN,   cast(NULL as NUMBER) as  SEGMENT_COLUMN_ID,   cast(NULL as NUMBER) as  INTERNAL_COLUMN_ID,   cast(NULL as VARCHAR2(15)) as  HISTOGRAM,   cast(c.column_name as VARCHAR2(4000)) as  QUALIFIED_COL_NAME,   cast('YES' as VARCHAR2(3)) as  USER_GENERATED,   cast(NULL as VARCHAR2(3)) as  DEFAULT_ON_NULL,   cast(NULL as VARCHAR2(3)) as  IDENTITY_COLUMN,   cast(NULL as VARCHAR2(128)) as  EVALUATION_EDITION,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEFORE,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEGINNING,   cast(NULL as VARCHAR2(100)) as  COLLATION,   cast(NULL as NUMBER) as  COLLATED_COLUMN_ID FROM     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t   JOIN     sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c     ON c.tenant_id = t.tenant_id     AND c.table_id = t.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     AND C.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE   c.is_hidden = 0   AND t.table_type in (0,2,3,8,9)   AND t.database_id = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TAB_COLS	select   TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS,   USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HIDDEN_COLUMN, VIRTUAL_COLUMN,   SEGMENT_COLUMN_ID, INTERNAL_COLUMN_ID, HISTOGRAM, QUALIFIED_COL_NAME   from SYS.user_tab_cols_v$ 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TABLESPACES	SELECT       TABLESPACE_NAME,       CAST(NULL AS NUMBER) BLOCK_SIZE,       CAST(NULL AS NUMBER) INITIAL_EXTENT,       CAST(NULL AS NUMBER) NEXT_EXTENT,       CAST(NULL AS NUMBER) MIN_EXTENT,       CAST(NULL AS NUMBER) MAX_EXTENT,       CAST(NULL AS NUMBER) MAX_SIZE,       CAST(NULL AS NUMBER) PCT_INCREASE,       CAST(NULL AS NUMBER) MIN_EXTLEN,       CAST(NULL AS VARCHAR2(9)) STATUS,       CAST(NULL AS VARCHAR2(9)) CONTENTS,       CAST(NULL AS VARCHAR2(9)) LOGGING,       CAST(NULL AS VARCHAR2(3)) FORCE_LOGGING,       CAST(NULL AS VARCHAR2(10)) EXTENT_MANAGEMENT,       CAST(NULL AS VARCHAR2(9)) ALLOCATION_TYPE,       CAST(NULL AS VARCHAR2(6)) SEGMENT_SPACE_MANAGEMENT,       CAST(NULL AS VARCHAR2(8)) DEF_TAB_COMPRESSION,       CAST(NULL AS VARCHAR2(11)) RETENTION,       CAST(NULL AS VARCHAR2(3)) BIGFILE,       CAST(NULL AS VARCHAR2(7)) PREDICATE_EVALUATION,       CAST(NULL AS VARCHAR2(3)) ENCRYPTED,       CAST(NULL AS VARCHAR2(12)) COMPRESS_FOR       FROM       SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT       WHERE TENANT_ID = EFFECTIVE_TENANT_ID()       	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_TABLES	 SELECT   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(tp.tablespace_name AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(128)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(128)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST('NO' AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID()   JOIN     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db   ON     db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND t.database_id = USERENV('SCHEMAID')     AND t.table_type in (3, 8, 9, 11)     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()   LEFT JOIN     sys.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT tp   ON     tp.tablespace_id = t.tablespace_id     AND t.tenant_id = tp.tenant_id     AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()   WHERE t.session_id = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SYS_PRIVS	     SELECT B.USER_NAME AS USERNAME,            CAST (DECODE(A.PRIV_ID,                 1, 'CREATE SESSION',                 2, 'EXEMPT REDACT POLICY',                 3, 'SYSDBA',                 4, 'SYSOPER',                 5, 'SYSBACKUP',                 6, 'CREATE TABLE',                 7, 'CREATE ANY TABLE',                 8, 'ALTER ANY TABLE',                 9, 'BACKUP ANY TABLE',                 10, 'DROP ANY TABLE',                 11, 'LOCK ANY TABLE',                 12, 'COMMENT ANY TABLE',                 13, 'SELECT ANY TABLE',                 14, 'INSERT ANY TABLE',                 15, 'UPDATE ANY TABLE',                 16, 'DELETE ANY TABLE',                 17, 'FLASHBACK ANY TABLE',                 18, 'CREATE ROLE',                 19, 'DROP ANY ROLE',                 20, 'GRANT ANY ROLE',                 21, 'ALTER ANY ROLE',                 22, 'AUDIT ANY',                 23, 'GRANT ANY PRIVILEGE',                 24, 'GRANT ANY OBJECT PRIVILEGE',                 25, 'CREATE ANY INDEX',                 26, 'ALTER ANY INDEX',                 27, 'DROP ANY INDEX',                 28, 'CREATE ANY VIEW',                 29, 'DROP ANY VIEW',                 30, 'CREATE VIEW',                 31, 'SELECT ANY DICTIONARY',                 32, 'CREATE PROCEDURE',                 33, 'CREATE ANY PROCEDURE',                 34, 'ALTER ANY PROCEDURE',                 35, 'DROP ANY PROCEDURE',                 36, 'EXECUTE ANY PROCEDURE',                 37, 'CREATE SYNONYM',                 38, 'CREATE ANY SYNONYM',                 39, 'DROP ANY SYNONYM',                 40, 'CREATE PUBLIC SYNONYM',                 41, 'DROP PUBLIC SYNONYM',                 42, 'CREATE SEQUENCE',                 43, 'CREATE ANY SEQUENCE',                 44, 'ALTER ANY SEQUENCE',                 45, 'DROP ANY SEQUENCE',                 46, 'SELECT ANY SEQUENCE',                 47, 'CREATE TRIGGER',                 48, 'CREATE ANY TRIGGER',                 49, 'ALTER ANY TRIGGER',                 50, 'DROP ANY TRIGGER',                 51, 'CREATE PROFILE',                 52, 'ALTER PROFILE',                 53, 'DROP PROFILE',                 54, 'CREATE USER',                 55, 'BECOME USER',                 56, 'ALTER USER',                 57, 'DROP USER',                 58, 'CREATE TYPE',                 59, 'CREATE ANY TYPE',                 60, 'ALTER ANY TYPE',                 61, 'DROP ANY TYPE',                 62, 'EXECUTE ANY TYPE',                 63, 'UNDER ANY TYPE',                 64, 'PURGE DBA_RECYCLEBIN',                 65, 'CREATE ANY OUTLINE',                 66, 'ALTER ANY OUTLINE',                 67, 'DROP ANY OUTLINE',                 68, 'SYSKM',                 69, 'CREATE TABLESPACE',                 70, 'ALTER TABLESPACE',                 71, 'DROP TABLESPACE',                 72, 'SHOW PROCESS',                 73, 'ALTER SYSTEM',                 74, 'CREATE DATABASE LINK',                 75, 'CREATE PUBLIC DATABASE LINK',                 76, 'DROP DATABASE LINK',                 77, 'ALTER SESSION',                 78, 'ALTER DATABASE',                 'OTHER') AS VARCHAR(40)) AS PRIVILEGE,         CASE PRIV_OPTION           WHEN 0 THEN 'NO'           ELSE 'YES'           END AS ADMIN_OPTION     FROM SYS.ALL_VIRTUAL_TENANT_SYSAUTH_REAL_AGENT A,           SYS.ALL_VIRTUAL_USER_REAL_AGENT B     WHERE B.TYPE = 0 AND           A.GRANTEE_ID =B.USER_ID           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.USER_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SYNONYMS	     SELECT       A.SYNONYM_NAME AS SYNONYM_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN B.DATABASE_NAME            ELSE SUBSTR(A.OBJECT_NAME, 1, INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN A.OBJECT_NAME            ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '.') + 1, INSTR(A.OBJECT_NAME, '@') - INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0                 THEN NULL                 ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '@')+1)                 END                 AS VARCHAR2(128)) AS DB_LINK,       CAST (0 AS number) AS ORIGIN_CON_ID     FROM       (SELECT BB.DATABASE_NAME, AA.SYNONYM_NAME,       AA.OBJECT_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_AGENT BB       WHERE AA.DATABASE_ID = BB.DATABASE_ID             AND (AA.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(13, AA.SYNONYM_ID, AA.DATABASE_ID) = 1)) A,       (SELECT BB.DATABASE_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_AGENT BB       WHERE AA.OBJECT_DATABASE_ID = BB.DATABASE_ID            AND (AA.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(13, AA.SYNONYM_ID, AA.DATABASE_ID) = 1)) B     WHERE       A.SYNONYM_ID = B.SYNONYM_ID     AND       A.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SUBPART_KEY_COLUMNS	     SELECT  CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T     WHERE C.TENANT_ID = T.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND T.DATABASE_ID = USERENV('SCHEMAID')           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND T.DATABASE_ID = USERENV('SCHEMAID')     UNION     SELECT  CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND T.DATABASE_ID = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SUBPARTITION_TEMPLATES	SELECT       TB.TABLE_NAME AS USER_NAME,       SP.SUB_PART_NAME AS SUBPARTITION_NAME,       SP.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,       TP.TABLESPACE_NAME AS TABLESPACE_NAME,       CAST(CASE WHEN SP.HIGH_BOUND_VAL is NULL THEN SP.LIST_VAL ELSE SP.HIGH_BOUND_VAL END AS VARCHAR2(1024)) HIGH_BOUND       FROM (SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB join SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB             on DB.database_id = TB.database_id               AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()               AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()             join SYS.ALL_VIRTUAL_DEF_SUB_PART_REAL_AGENT SP on tb.table_id = sp.table_id               AND SP.TENANT_ID = EFFECTIVE_TENANT_ID())             left join SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP               ON TP.TABLESPACE_ID = SP.TABLESPACE_ID                 AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE DB.database_id = USERENV('SCHEMAID')       	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SOURCE	     SELECT       CAST(P.PACKAGE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE P.TYPE WHEN 1 THEN 'PACKAGE' WHEN 2 THEN 'PACKAGE BODY' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(P.SOURCE) AS TEXT,       P.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) P       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON P.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON P.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = P.TENANT_ID OR P.TENANT_ID = 1) AND D.IN_RECYCLEBIN = 0     UNION ALL     SELECT       CAST(R.ROUTINE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(R.ROUTINE_BODY) AS TEXT,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND R.PACKAGE_ID = -1       AND R.DATABASE_ID = USERENV('SCHEMAID')     UNION ALL     SELECT       CAST(T.TRIGGER_NAME AS VARCHAR2(30)) AS NAME,       CAST('TRIGGER' AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(T.TRIGGER_BODY) AS TEXT,       T.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) T       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON T.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON T.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = T.TENANT_ID OR T.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND T.DATABASE_ID = USERENV('SCHEMAID'); 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SEQUENCES	     SELECT        A.SEQUENCE_NAME AS SEQUENCE_NAME       ,A.MIN_VALUE AS MIN_VALUE       ,A.MAX_VALUE AS MAX_VALUE       ,A.INCREMENT_BY AS INCREMENT_BY       ,CASE A.CYCLE_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS CYCLE_FLAG       ,CASE A.ORDER_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS ORDER_FLAG       ,A.CACHE_SIZE AS CACHE_SIZE       ,CAST(COALESCE(B.NEXT_VALUE,A.START_WITH) AS NUMBER(38,0)) AS LAST_NUMBER     FROM        SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT A     LEFT JOIN       SYS.ALL_VIRTUAL_SEQUENCE_VALUE_REAL_AGENT B     ON B.SEQUENCE_ID = A.SEQUENCE_ID     WHERE       A.DATABASE_ID = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SEGMENTS	     SELECT       CAST(A.SEGMENT_NAME AS VARCHAR2(128)) AS SEGMENT_NAME       ,CAST(A.PARTITION_NAME AS VARCHAR2(128)) AS PARTITION_NAME       ,CAST(A.SEGMENT_TYPE AS VARCHAR2(18)) AS SEGMENT_TYPE       ,CAST(NULL AS VARCHAR2(10)) AS SEGMENT_SUBTYPE       ,CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME       ,A.DATA_SIZE AS BYTES       ,A.BLOCK_SIZE AS BLOCKS       ,CAST(NULL AS NUMBER) AS EXTENTS       ,CAST(NULL AS NUMBER) AS INITIAL_EXTENT       ,CAST(NULL AS NUMBER) AS NEXT_EXTENT       ,CAST(NULL AS NUMBER) AS MIN_EXTENTS       ,CAST(NULL AS NUMBER) AS MAX_EXTENTS       ,CAST(NULL AS NUMBER) AS MAX_SIZE       ,CAST(NULL AS VARCHAR(7)) AS RETENTION       ,CAST(NULL AS NUMBER) AS MINRETENTION       ,CAST(NULL AS NUMBER) AS PCT_INCREASE       ,CAST(NULL AS NUMBER) AS FREELISTS       ,CAST(NULL AS NUMBER) AS FREELIST_GROUPS       ,CAST('DEFAULT' AS VARCHAR2(7)) AS BUFFER_POOL       ,CAST('DEFAULT' AS VARCHAR2(7)) AS FLASH_CACHE       ,CAST('DEFAULT' AS VARCHAR2(7)) AS CELL_FLASH_CACHE       FROM (       SELECT       T.TABLE_ID       ,T.DATABASE_ID       ,T.TABLE_NAME SEGMENT_NAME       ,NULL PARTITION_NAME       ,CASE WHEN T.TABLE_TYPE IN (0,2,3,6,8,9,10) THEN 'TABLE'           WHEN T.TABLE_TYPE IN (1,4) THEN 'VIEW'           WHEN T.TABLE_TYPE IN (5) THEN 'INDEX'           WHEN T.TABLE_TYPE IN (7) THEN 'MATERIALIZED VIEW'           ELSE NULL END AS SEGMENT_TYPE       ,T.BLOCK_SIZE       ,MT.DATA_SIZE       FROM       SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT MT       ON T.TABLE_ID = MT.TABLE_ID WHERE T.PART_LEVEL=0 AND MT.ROLE = 1         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND MT.TENANT_ID = EFFECTIVE_TENANT_ID()       UNION ALL       SELECT           T.TABLE_ID           ,T.DATABASE_ID           ,T.TABLE_NAME SEGMENT_NAME           ,P.PART_NAME PARTITION_NAME           ,'TABLE PARTITION' AS SEGMENT_TYPE           ,T.BLOCK_SIZE           ,MT.DATA_SIZE           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID = P.TABLE_ID           JOIN SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT MT           ON T.TABLE_ID = MT.TABLE_ID AND P.PART_ID = MT.PARTITION_ID WHERE T.PART_LEVEL=1 AND MT.ROLE = 1           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND P.TENANT_ID = EFFECTIVE_TENANT_ID()           AND MT.TENANT_ID = EFFECTIVE_TENANT_ID()       UNION ALL       SELECT           T.TABLE_ID           ,T.DATABASE_ID           ,T.TABLE_NAME SEGMENT_NAME           ,SUBP.SUB_PART_NAME PARTITION_NAME           ,'TABLE SUBPARTITION' AS OBJECT_TYPE           ,T.BLOCK_SIZE           ,MT.DATA_SIZE           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID =P.TABLE_ID JOIN SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUBP           ON P.TABLE_ID=SUBP.TABLE_ID AND P.PART_ID =SUBP.PART_ID           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND P.TENANT_ID = EFFECTIVE_TENANT_ID()           AND SUBP.TENANT_ID = EFFECTIVE_TENANT_ID()           JOIN (SELECT A.PARTITION_ID,A.TABLE_ID,A.DATA_SIZE,A.PART_ID,PARTITION_ID - 1152921504606846976 - PART_ID *4294967296 - 268435456 AS SUB_PART_ID FROM           (SELECT A.PARTITION_ID,A.TABLE_ID,A.DATA_SIZE,FLOOR((PARTITION_ID - 1152921504606846976 - 268435456)/4294967296) AS PART_ID FROM SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT A                 WHERE A.PARTITION_ID != 0 AND A.ROLE = 1 AND A.TENANT_ID = EFFECTIVE_TENANT_ID())A) MT           ON SUBP.TABLE_ID = MT.TABLE_ID AND SUBP.PART_ID = MT.PART_ID AND SUBP.SUB_PART_ID=MT.SUB_PART_ID WHERE T.PART_LEVEL=2     )A WHERE DATABASE_ID=USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SCHEDULER_PROGRAM_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS PROGRAM_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(19)) AS METADATA_ATTRIBUTE,   CAST(NULL AS VARCHAR2(4000)) AS DEFAULT_VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_SCHEDULER_JOB_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS JOB_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(4000)) AS VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_ROLE_PRIVS	SELECT CAST(A.USER_NAME AS VARCHAR2(30)) GRANTEE,      CAST(B.USER_NAME AS VARCHAR2(30)) GRANTED_ROLE,      DECODE(R.ADMIN_OPTION, 0, 'NO', 1, 'YES', '') AS ADMIN_OPTION ,      DECODE(R.DISABLE_FLAG, 0, 'YES', 1, 'NO', '') AS DEFAULT_ROLE      FROM SYS.ALL_VIRTUAL_TENANT_ROLE_GRANTEE_MAP_AGENT R,      SYS.ALL_VIRTUAL_USER_REAL_AGENT A,      SYS.ALL_VIRTUAL_USER_REAL_AGENT B      WHERE R.GRANTEE_ID = A.USER_ID      AND R.ROLE_ID = B.USER_ID      AND B.TYPE = 1      AND A.TENANT_ID = EFFECTIVE_TENANT_ID()      AND B.TENANT_ID = EFFECTIVE_TENANT_ID()      AND A.USER_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_RECYCLEBIN	     SELECT OBJECT_NAME, ORIGINAL_NAME, OPERATION, TYPE, CAST(TABLESPACE_NAME AS VARCHAR2(30)) AS TS_NAME, CREATETIME, DROPTIME, DROPSCN, PARTITION_NAME, CAN_UNDROP, CAN_PURGE, RELATED, BASE_OBJECT, PURGE_OBJECT, SPACE     FROM       (SELECT         CAST(A.OBJECT_NAME AS VARCHAR2(128)) AS OBJECT_NAME,         CAST(A.ORIGINAL_NAME AS VARCHAR2(128)) AS ORIGINAL_NAME,         CAST(NULL AS VARCHAR2(9)) AS OPERATION,         CAST(CASE A.TYPE              WHEN 1 THEN 'TABLE'              WHEN 2 THEN 'NORMAL INDEX'              WHEN 3 THEN 'VIEW'              WHEN 4 THEN 'DATABASE'              WHEN 5 THEN 'AUX_VP'              WHEN 6 THEN 'TRIGGER'              ELSE NULL END AS VARCHAR2(25)) AS TYPE,         CAST(NULL AS VARCHAR2(30)) AS TS_NAME,         CAST(C.GMT_CREATE AS VARCHAR(30)) AS CREATETIME,         CAST(C.GMT_MODIFIED AS VARCHAR(30)) AS DROPTIME,         CAST(NULL AS NUMBER) AS DROPSCN,         CAST(NULL AS VARCHAR2(128)) AS PARTITION_NAME,         CAST('YES' AS VARCHAR2(3)) AS CAN_UNDROP,         CAST('YES' AS VARCHAR2(3)) AS CAN_PURGE,         CAST(NULL AS NUMBER) AS RELATED,         CAST(NULL AS NUMBER) AS BASE_OBJECT,         CAST(NULL AS NUMBER) AS PURGE_OBJECT,         CAST(NULL AS NUMBER) AS SPACE,         C.TABLE_ID AS TABLE_ID,         C.TABLESPACE_ID AS TABLESPACE_ID         FROM SYS.ALL_VIRTUAL_RECYCLEBIN_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT C WHERE A.TABLE_ID = C.TABLE_ID AND A.DATABASE_ID = USERENV('SCHEMAID') AND A.TENANT_ID = EFFECTIVE_TENANT_ID() AND C.TENANT_ID = EFFECTIVE_TENANT_ID()) LEFT_TABLE       LEFT JOIN         (SELECT TABLESPACE_NAME, TABLESPACE_ID FROM SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) RIGHT_TABLE       ON LEFT_TABLE.TABLESPACE_ID = RIGHT_TABLE.TABLESPACE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_PROFILES	 SELECT   CAST(t.profile_name AS VARCHAR2(30)) AS PROFILE,   CAST(NULL AS VARCHAR2(32)) AS RESOURCE_NAME,   CAST(NULL AS VARCHAR2(8)) AS RESOURCE_TYPE,   CAST(NULL AS VARCHAR2(40)) AS LIMIT_ON_RESOURCE FROM   SYS.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT t   WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_PROCEDURES	     SELECT       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_NAME ELSE P.PACKAGE_NAME END AS OBJECT_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE R.ROUTINE_NAME END AS PROCEDURE_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,       CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,       CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,       CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS OBJECT_TYPE,       CAST('NO' AS VARCHAR2(3)) AS AGGREGATE,       CAST(DECODE(BITAND(R.FLAG, 128), 128, 'YES', 'NO') AS VARCHAR2(3)) AS PIPELINED,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPEOWNER,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPENAME,       CAST(DECODE(BITAND(R.FLAG, 8), 8, 'YES', 'NO') AS VARCHAR2(3)) AS PARALLEL,       CAST('NO' AS VARCHAR2(3)) AS INTERFACE,       CAST(DECODE(BITAND(R.FLAG, 4), 4, 'YES', 'NO') AS VARCHAR2(3)) AS DETERMINISTIC,       CAST(DECODE(BITAND(R.FLAG, 16), 16, 'INVOKER', 'DEFINER') AS VARCHAR2(12)) AS AUTHID,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID         AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND R.DATABASE_ID = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_PART_TABLES	SELECT CAST(TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE TB.PART_FUNC_TYPE WHEN 0 THEN      'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY'      WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE'      WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST'      WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END      AS VARCHAR2(9)) PARTITIONING_TYPE,      CAST (DECODE(TB.PART_LEVEL, 1, 'NONE',                                  2, DECODE(TB.SUB_PART_FUNC_TYPE, 0, 'HASH',                                                                   1, 'KEY',                                                                   2, 'KEY',                                                                   3, 'RANGE',                                                                   4, 'RANGE',                                                                   5, 'LIST',                                                                   6, 'KEY',                                                                   7, 'LIST',                                                                   8, 'HASH',                                                                   9, 'KEY',                                                                   10, 'KEY'))           AS VARCHAR2(9)) SUBPARTITIONING_TYPE,      CAST(TB.PART_NUM AS NUMBER) PARTITION_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, TB.SUB_PART_NUM) AS NUMBER) DEF_SUBPARTITION_COUNT,      CAST(PART_INFO.PART_KEY_COUNT AS NUMBER) PARTITIONING_KEY_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, PART_INFO.SUBPART_KEY_COUNT) AS NUMBER) SUBPARTITIONING_KEY_COUNT,      CAST(NULL AS VARCHAR2(8)) STATUS,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) DEF_TABLESPACE_NAME,      CAST(NULL AS NUMBER) DEF_PCT_FREE,      CAST(NULL AS NUMBER) DEF_PCT_USED,      CAST(NULL AS NUMBER) DEF_INI_TRANS,      CAST(NULL AS NUMBER) DEF_MAX_TRANS,      CAST(NULL AS VARCHAR2(40)) DEF_INITIAL_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_NEXT_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MIN_EXTENT,      CAST(NULL AS VARCHAR2(40)) MAX_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MAX_SIZE,      CAST(NULL AS VARCHAR2(40)) DEF_PCT_INCREASE,      CAST(NULL AS NUMBER) DEF_FREELISTS,      CAST(NULL AS NUMBER) DEF_FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) DEF_LOGGING,      CAST(CASE WHEN      TB.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(TB.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS VARCHAR2(7)) DEF_BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) DEF_FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) DEF_CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(30)) REF_PTN_CONSTRAINT_NAME,      CAST(NULL AS VARCHAR2(1000)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(4)) DEF_SEGMENT_CREATED      FROM   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB      JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB      ON        TB.DATABASE_ID = DB.DATABASE_ID        AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')       JOIN        (select table_id,                sum(case when BITAND(PARTITION_KEY_POSITION, 255) > 0 then 1 else 0 end) as PART_KEY_COUNT,                sum(case when BITAND(PARTITION_KEY_POSITION, 65280) > 0 then 0 else 1 end) as SUBPART_KEY_COUNT         from SYS.ALL_VIRTUAL_COLUMN_AGENT         where PARTITION_KEY_POSITION > 0         group by table_id) PART_INFO      ON        TB.TABLE_ID = PART_INFO.TABLE_ID      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = TB.TABLESPACE_ID       AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()      WHERE TB.TABLE_TYPE != 5       AND TB.PART_LEVEL != 0	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_PART_KEY_COLUMNS	     SELECT  CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T     WHERE C.TENANT_ID = T.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND T.DATABASE_ID = USERENV('SCHEMAID')           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND T.DATABASE_ID = USERENV('SCHEMAID')           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND T.DATABASE_ID = USERENV('SCHEMAID')           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_PART_INDEXES	 with PARTITIONED_INDEXES as ( SELECT CASE when I.INDEX_TYPE IN (1, 2) then 1 else 0 end as IS_LOCAL, DB.DATABASE_NAME AS I_OWNER, CASE WHEN DB.DATABASE_NAME !=  '__recyclebin' THEN SUBSTR(I.TABLE_NAME, 7 + INSTR(SUBSTR(I.TABLE_NAME, 7), '_')) ELSE I.TABLE_NAME END AS I_NAME, T.TABLE_NAME AS T_NAME, I.DATA_TABLE_ID AS T_ID, I.TABLE_ID AS I_ID, TP.TABLESPACE_NAME, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN I.DATA_TABLE_ID ELSE I.TABLE_ID END AS PART_INFO_T_ID, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_LEVEL ELSE I.PART_LEVEL END AS I_PART_LEVEL, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_FUNC_TYPE ELSE I.PART_FUNC_TYPE END AS I_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_FUNC_TYPE ELSE I.SUB_PART_FUNC_TYPE END AS I_SUB_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_NUM ELSE I.PART_NUM END AS I_PART_NUM, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_NUM ELSE I.SUB_PART_NUM END AS I_SUB_PART_NUM FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB ON I.DATABASE_ID = DB.DATABASE_ID   AND I.TENANT_ID = EFFECTIVE_TENANT_ID()   AND DB.TENANT_ID = EFFECTIVE_TENANT_ID() AND I.DATABASE_ID = USERENV('SCHEMAID') JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T ON I.DATA_TABLE_ID = T.TABLE_ID   AND T.TENANT_ID = EFFECTIVE_TENANT_ID() LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON  TP.TABLESPACE_ID = I.TABLESPACE_ID AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE I.TABLE_TYPE = 5 AND (I.INDEX_TYPE NOT IN (1, 2) and I.PART_LEVEL != 0  or  I.INDEX_TYPE IN (1, 2) and T.PART_LEVEL != 0) ), PART_KEY_COUNT as ( select PI.I_ID, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 255) != 0 THEN 1 ELSE 0 END) AS PARTITIONING_KEY_COUNT, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 65280)/256 != 0 THEN 1 ELSE 0 END) AS SUBPARTITIONING_KEY_COUNT from PARTITIONED_INDEXES PI join SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C on PI.PART_INFO_T_ID = C.TABLE_ID AND C.TENANT_ID = EFFECTIVE_TENANT_ID() group by I_ID ), LOCAL_INDEX_PREFIXED as ( select I.TABLE_ID AS I_ID, 1 AS IS_PREFIXED from SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I where I.TABLE_TYPE = 5 AND I.INDEX_TYPE in (1,2) AND I.TENANT_ID = EFFECTIVE_TENANT_ID() and not exists (select * from ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C where C.TABLE_ID = I.DATA_TABLE_ID AND C.PARTITION_KEY_POSITION != 0 AND C.TENANT_ID = EFFECTIVE_TENANT_ID() ) PART_COLUMNS left join ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C WHERE C.TABLE_ID = I.TABLE_ID AND C.INDEX_POSITION != 0 AND C.TENANT_ID = EFFECTIVE_TENANT_ID() ) INDEX_COLUMNS ON PART_COLUMNS.COLUMN_ID = INDEX_COLUMNS.COLUMN_ID where (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != 0 AND (INDEX_COLUMNS.INDEX_POSITION is null  or BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != INDEX_COLUMNS.INDEX_POSITION)) or (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 65280)/256 != 0  AND (INDEX_COLUMNS.INDEX_POSITION is null)) ) ) SELECT CAST(PI.I_NAME AS VARCHAR2(128)) AS INDEX_NAME, CAST(PI.T_NAME AS VARCHAR2(128)) AS TABLE_NAME,  CAST(CASE PI.I_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END AS VARCHAR2(9)) AS PARTITIONING_TYPE,  CAST( CASE WHEN PI.I_PART_LEVEL < 2 THEN 'NONE' ELSE CASE PI.I_SUB_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END END AS VARCHAR2(9)) AS SUBPARTITIONING_TYPE,  CAST(PI.I_PART_NUM AS NUMBER) AS PARTITION_COUNT, CAST(CASE WHEN PI.I_PART_LEVEL < 2 THEN 0 ELSE PI.I_SUB_PART_NUM END AS NUMBER) AS DEF_SUBPARTITION_COUNT, CAST(PKC.PARTITIONING_KEY_COUNT AS NUMBER) AS PARTITIONING_KEY_COUNT, CAST(PKC.SUBPARTITIONING_KEY_COUNT AS NUMBER) AS SUBPARTITIONING_KEY_COUNT,  CAST(CASE WHEN PI.IS_LOCAL = 1 THEN 'LOCAL' ELSE 'GLOBAL' END AS VARCHAR2(6)) AS LOCALITY,  CAST(CASE WHEN (PI.IS_LOCAL = 0 or (PI.IS_LOCAL = 1 and LIP.IS_PREFIXED = 1)) THEN 'PREFIXED' ELSE 'NON_PREFIXED' END AS VARCHAR2(12)) AS ALIGNMENT,  CAST(PI.TABLESPACE_NAME AS VARCHAR2(30)) AS DEF_TABLESPACE_NAME, CAST(0 AS NUMBER) AS DEF_PCT_FREE, CAST(0 AS NUMBER) AS DEF_INI_TRANS, CAST(0 AS NUMBER) AS DEF_MAX_TRANS, CAST(NULL AS VARCHAR2(40)) AS DEF_INITIAL_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_NEXT_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_MIN_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_SIZE, CAST(NULL AS VARCHAR2(40)) AS DEF_PCT_INCREASE, CAST(0 AS NUMBER) AS DEF_FREELISTS, CAST(0 AS NUMBER) AS DEF_FREELIST_GROUPS, CAST(NULL AS VARCHAR2(7)) AS DEF_LOGGING, CAST(NULL AS VARCHAR2(7)) AS DEF_BUFFER_POOL, CAST(NULL AS VARCHAR2(7)) AS DEF_FLASH_CACHE, CAST(NULL AS VARCHAR2(7)) AS DEF_CELL_FLASH_CACHE, CAST(NULL AS VARCHAR2(1000)) AS DEF_PARAMETERS, CAST(NULL AS VARCHAR2(1000)) AS INTERVAL  from PARTITIONED_INDEXES PI join PART_KEY_COUNT PKC on PI.I_ID = PKC.I_ID left join LOCAL_INDEX_PREFIXED LIP on PI.I_ID = LIP.I_ID     	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_OBJECTS	     SELECT     CAST((CASE WHEN A.OBJECT_TYPE = 'INDEX' THEN SUBSTR(A.OBJECT_NAME, 7 + INSTR(SUBSTR(A.OBJECT_NAME, 7), '_'))                ELSE A.OBJECT_NAME END) AS VARCHAR2(128)) AS OBJECT_NAME     ,CAST(A.SUBOBJECT_NAME AS VARCHAR2(128)) AS SUBOBJECT_NAME     ,A.OBJECT_ID AS OBJECT_ID     ,CAST(A.DATA_OBJECT_ID AS NUMBER) AS DATA_OBJECT_ID     ,CAST(A.OBJECT_TYPE AS VARCHAR2(23)) AS OBJECT_TYPE     ,CAST(A.GMT_CREATE AS DATE) AS CREATED     ,CAST(A.GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(A.GMT_CREATE) AS TIMESTAMP     ,CAST(A.STATUS AS VARCHAR2(7)) AS STATUS     ,CAST(A.TEMPORARY AS VARCHAR2(1)) AS TEMPORARY     ,CAST("GENERATED" AS VARCHAR2(1)) AS "GENERATED"     ,CAST(A.SECONDARY AS VARCHAR2(1)) AS SECONDARY     ,CAST(A.NAMESPACE AS NUMBER) AS NAMESPACE     ,CAST(A.EDITION_NAME AS VARCHAR2(128)) AS EDITION_NAME     FROM (     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TABLE_NAME OBJECT_NAME     ,NULL SUBOBJECT_NAME     ,TABLE_ID OBJECT_ID     ,NULL DATA_OBJECT_ID     ,CASE WHEN TABLE_TYPE IN (0,2,3,6,8,9,10) THEN 'TABLE'           WHEN TABLE_TYPE IN (1,4) THEN 'VIEW'           WHEN TABLE_TYPE IN (5) THEN 'INDEX'           WHEN TABLE_TYPE IN (7) THEN 'MATERIALIZED VIEW'           ELSE NULL END AS OBJECT_TYPE     ,CAST(CASE WHEN TABLE_TYPE IN (5) THEN CASE WHEN INDEX_STATUS = 2 THEN 'VALID'             WHEN INDEX_STATUS = 3 THEN 'CHECKING'             WHEN INDEX_STATUS = 4 THEN 'INELEGIBLE'             WHEN INDEX_STATUS = 5 THEN 'ERROR'             ELSE 'UNUSABLE' END            ELSE  'VALID' END AS VARCHAR2(10)) AS STATUS     ,CASE WHEN TABLE_TYPE IN (6,8,9,10) THEN 'Y'         ELSE 'N' END AS TEMPORARY     ,CASE WHEN TABLE_TYPE IN (0,1) THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM     SYS.ALL_VIRTUAL_TABLE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,P.PART_NAME SUBOBJECT_NAME     ,P.PART_ID OBJECT_ID     ,CASE WHEN P.PART_IDX != -1 THEN P.PART_ID ELSE NULL END AS DATA_OBJECT_ID     ,'TABLE PARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,CASE WHEN P.PART_IDX != -1 THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID = P.TABLE_ID     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     SUBP.GMT_CREATE     ,SUBP.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,SUBP.SUB_PART_NAME SUBOBJECT_NAME     ,SUBP.PART_ID OBJECT_ID     ,SUBP.PART_ID AS DATA_OBJECT_ID     ,'TABLE SUBPARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'Y' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_PART_REAL_AGENT P,SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUBP     WHERE T.TABLE_ID =P.TABLE_ID AND P.TABLE_ID=SUBP.TABLE_ID AND P.PART_ID =SUBP.PART_ID     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID() AND SUBP.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,P.DATABASE_ID     ,P.PACKAGE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,P.PACKAGE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN TYPE = 1 THEN 'PACKAGE'           WHEN TYPE = 2 THEN 'PACKAGE BODY'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE P.TENANT_ID = E.TENANT_ID AND P.PACKAGE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 3 OR E.OBJ_TYPE = 5))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P     WHERE P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     R.GMT_CREATE     ,R.GMT_MODIFIED     ,R.DATABASE_ID     ,R.ROUTINE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,R.ROUTINE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN ROUTINE_TYPE = 1 THEN 'PROCEDURE'           WHEN ROUTINE_TYPE = 2 THEN 'FUNCTION'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE R.TENANT_ID = E.TENANT_ID AND R.ROUTINE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 12 OR E.OBJ_TYPE = 9))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R     WHERE (ROUTINE_TYPE = 1 OR ROUTINE_TYPE = 2) AND R.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     T.GMT_CREATE     ,T.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TRIGGER_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,T.TRIGGER_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TRIGGER' OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE T.TENANT_ID = E.TENANT_ID AND T.TRIGGER_ID = E.OBJ_ID AND (E.OBJ_TYPE = 7))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TRIGGER_AGENT T     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SYNONYM_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SYNONYM_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SYNONYM' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SEQUENCE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SEQUENCE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SEQUENCE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TYPE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TYPE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,OBJECT_TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE BODY' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_OBJECT_TYPE_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID() and TYPE = 2     )A     WHERE DATABASE_ID=USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_MVIEW_COMMENTS	 SELECT   db.DATABASE_NAME AS OWNER,   CAST(t.TABLE_NAME AS VARCHAR2(128)) AS MVIEW_NAME,   CAST(t."COMMENT" AS VARCHAR(4000)) AS COMMENTS FROM   SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT db,   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT t WHERE     db.DATABASE_ID = t.DATABASE_ID     AND t.TABLE_TYPE = 7     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     AND db.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_METHOD_PARAMS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(30)) AS PARAM_NAME,   CAST(NULL AS NUMBER) AS PARAM_NO,   CAST(NULL AS VARCHAR2(6)) AS PARAM_MODE,   CAST(NULL AS VARCHAR2(7)) AS PARAM_TYPE_MOD,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_OWNER,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_NAME,   CAST(NULL AS VARCHAR2(44)) AS CHARACTER_SET_NAME FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_IND_SUBPARTITIONS	   SELECT     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(PART.PART_NAME AS VARCHAR2(30)) AS PARTITION_NAME,     CAST(SUB_PART.SUB_PART_NAME AS VARCHAR2(128)) AS SUBPARTITION_NAME,     CAST(SUB_PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(SUB_PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     SUB_PART.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID */       A.DATA_TABLE_ID AS DATA_TABLE_ID,       A.PART_LEVEL AS INDEX_TABLE_PART_LEVEL,       TB2.PART_LEVEL AS DATA_TABLE_PART_LEVEL,       /* CAST(CASE WHEN A.PART_LEVEL=2 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL */       CAST('TRUE' AS VARCHAR2(5)) AS IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin' AND TB1.DATABASE_ID=DB.DATABASE_ID AND TB1.TABLE_TYPE=5             AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()       ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID             AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=2 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=2)       ) B, SYS.ALL_VIRTUAL_PART_REAL_AGENT PART, SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUB_PART       WHERE ((B.IS_LOCAL='FALSE' AND B.TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID)               OR (B.IS_LOCAL='TRUE' AND B.DATA_TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID))           AND PART.TENANT_ID = EFFECTIVE_TENANT_ID()           AND SUB_PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_IND_PARTITIONS	   SELECT     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(CASE WHEN PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) AS COMPOSITE,     CAST(PART.PART_NAME AS VARCHAR2(128)) AS PARTITION_NAME,     PART.SUB_PART_NUM AS SUBPARTITION_COUNT,     CAST(PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     PART.PART_ID + 1 AS PARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID */       A.DATA_TABLE_ID AS DATA_TABLE_ID,       CAST(CASE WHEN A.PART_LEVEL=1 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin' AND TB1.DATABASE_ID=DB.DATABASE_ID AND TB1.TABLE_TYPE=5               AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()               AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()       ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID           AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=1 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=1)     ) B JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART ON     ((B.TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='FALSE') OR (B.DATA_TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='TRUE'))     AND PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_IND_EXPRESSIONS	   SELECT     CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(H.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(COLUMN_EXPRESSION /* TODO: LONG */ AS VARCHAR2(1000)) AS COLUMN_EXPRESSION,     COLUMN_POSITION   FROM   (   SELECT     INDEX_NAME,     F.CUR_DEFAULT_VALUE_V2 AS COLUMN_EXPRESSION,     E.INDEX_POSITION AS  COLUMN_POSITION,     E.TABLE_ID AS TABLE_ID     FROM       (SELECT               INDEX_NAME,               C.TABLE_ID AS TABLE_ID,               C.INDEX_ID AS INDEX_ID,               D.COLUMN_ID AS COLUMN_ID,               D.COLUMN_NAME AS COLUMN_NAME, D.INDEX_POSITION AS INDEX_POSITION       FROM         (SELECT                 SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')) AS INDEX_NAME,                 A.DATA_TABLE_ID AS TABLE_ID,                 A.TABLE_ID AS INDEX_ID           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID           AND B.DATABASE_NAME != '__recyclebin' AND A.DATABASE_ID = USERENV('SCHEMAID')           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           WHERE TABLE_TYPE=5 ) C       JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D ON C.INDEX_ID=D.TABLE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()) E     JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON F.TABLE_ID=E.TABLE_ID         AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     AND F.COLUMN_ID=E.COLUMN_ID     AND F.COLUMN_FLAGS=1) G   JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT H ON G.TABLE_ID=H.TABLE_ID       AND H.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_IND_COLUMNS	     SELECT       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(ROWKEY_POSITION AS NUMBER) AS COLUMN_POSITION,       CASE WHEN DATA_TYPE >= 1 AND DATA_TYPE <= 16 THEN CAST(22 AS NUMBER)            WHEN DATA_TYPE = 17 THEN CAST(7 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 2 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (45, 46, 224, 54, 55, 101) THEN CAST(DATA_LENGTH * 4 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (28, 87) THEN CAST(DATA_LENGTH * 2 AS NUMBER)            WHEN DATA_TYPE = 36 THEN CAST(12 AS NUMBER)            WHEN DATA_TYPE IN (37, 38) THEN CAST(11 AS NUMBER)            WHEN DATA_TYPE = 39 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE = 40 THEN CAST(5 AS NUMBER)            WHEN DATA_TYPE = 41 THEN CAST(11 AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS COLUMN_LENGTH,       CASE WHEN DATA_TYPE IN (22, 23) THEN CAST(DATA_LENGTH AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS CHAR_LENGTH,       CAST('ASC' AS VARCHAR2(4)) AS DESCEND       FROM         (SELECT         INDEX_OWNER,         INDEX_NAME,         TABLE_OWNER,         TABLE_NAME,         INDEX_ID,         IDX_TYPE         FROM           (SELECT           DATABASE_NAME AS INDEX_OWNER,           CASE WHEN (TABLE_TYPE = 5) THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))             ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,           DATABASE_NAME AS TABLE_OWNER,           CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID             ELSE A.DATA_TABLE_ID END AS TABLE_ID,           A.TABLE_ID AS INDEX_ID,           TABLE_TYPE AS IDX_TYPE           FROM             SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A             JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID             AND TABLE_TYPE IN (5, 3)             AND A.DATABASE_ID = USERENV('SCHEMAID')             AND B.DATABASE_NAME != '__recyclebin'             AND A.TENANT_ID = EFFECTIVE_TENANT_ID()             AND B.TENANT_ID = EFFECTIVE_TENANT_ID()             LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB               ON (CONS_TAB.TABLE_ID = A.TABLE_ID AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID())           WHERE             NOT(             TABLE_TYPE = 3             AND CONSTRAINT_NAME IS NULL             )           ) C         JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID               AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         ) E         JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON E.INDEX_ID = F.TABLE_ID               AND F.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE         F.ROWKEY_POSITION != 0 AND (CASE WHEN IDX_TYPE = 5 THEN INDEX_POSITION ELSE 1 END) != 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_INDEXES	     SELECT       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(INDEX_TYPE_NAME AS VARCHAR2(27)) AS INDEX_TYPE,       CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST('TABLE' AS CHAR(5)) AS TABLE_TYPE,       CAST(UNIQUENESS AS VARCHAR2(9)) AS UNIQUENESS,       CAST(COMPRESSION AS VARCHAR2(8)) AS COMPRESSION,       CAST(NULL AS NUMBER) AS PREFIX_LENGTH,       CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) AS TABLESPACE_NAME,       CAST(NULL AS NUMBER) AS INI_TRANS,       CAST(NULL AS NUMBER) AS MAX_TRANS,       CAST(NULL AS NUMBER) AS INITIAL_EXTENT,       CAST(NULL AS NUMBER) AS NEXT_EXTENT,       CAST(NULL AS NUMBER) AS MIN_EXTENTS,       CAST(NULL AS NUMBER) AS MAX_EXTENTS,       CAST(NULL AS NUMBER) AS PCT_INCREASE,       CAST(NULL AS NUMBER) AS PCT_THRESHOLD,       CAST(NULL AS NUMBER) AS INCLUDE_COLUMN,       CAST(NULL AS NUMBER) AS FREELISTS,       CAST(NULL AS NUMBER) AS FREELIST_GROUPS,       CAST(NULL AS NUMBER) AS PCT_FREE,       CAST(NULL AS VARCHAR2(3)) AS LOGGING,       CAST(NULL AS NUMBER) AS BLEVEL,       CAST(NULL AS NUMBER) AS LEAF_BLOCKS,       CAST(NULL AS NUMBER) AS DISTINCT_KEYS,       CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,       CAST(STATUS AS VARCHAR2(10)) AS STATUS,       CAST(NULL AS NUMBER) AS NUM_ROWS,       CAST(NULL AS NUMBER) AS SAMPLE_SIZE,       CAST(NULL AS DATE) AS LAST_ANALYZED,       CAST(NULL AS VARCHAR2(40)) AS DEGREE,       CAST(NULL AS VARCHAR2(40)) AS INSTANCES,       CAST(CASE WHEN A_TABLE_TYPE = 3 THEN 'NO'                 WHEN A_INDEX_TYPE = 1 OR A_INDEX_TYPE = 2                 THEN (CASE WHEN D.PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END)            ELSE (CASE WHEN A_PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END) END  AS VARCHAR2(3)) AS PARTITIONED,       CAST(NULL AS VARCHAR2(1)) AS TEMPORARY,       CAST(NULL AS VARCHAR2(1)) AS "GENERATED",       CAST(NULL AS VARCHAR2(1)) AS SECONDARY,       CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,       CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,       CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,       CAST(NULL AS VARCHAR2(3)) AS USER_STATS,       CAST(NULL AS VARCHAR2(15)) AS DURATION,       CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,       CAST(NULL AS VARCHAR2(30)) AS ITYP_OWNER,       CAST(NULL AS VARCHAR2(30)) AS ITYP_NAME,       CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,       CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,       CAST(NULL AS VARCHAR2(12)) AS DOMIDX_STATUS,       CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,       CAST(FUNCIDX_STATUS AS VARCHAR2(8)) AS FUNCIDX_STATUS,       CAST('NO' AS VARCHAR2(3)) AS JOIN_INDEX,       CAST(NULL AS VARCHAR2(3)) AS IOT_REDUNDANT_PKEY_ELIM,       CAST(DROPPED AS VARCHAR2(9)) AS DROPPED,       CAST(VISIBILITY AS VARCHAR2(10)) AS VISIBILITY,       CAST(NULL AS VARCHAR2(14)) AS DOMIDX_MANAGEMENT,       CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED       FROM         (SELECT         DATABASE_NAME AS INDEX_OWNER,         CASE WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME !=  '__recyclebin') THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))              WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME =  '__recyclebin') THEN TABLE_NAME           ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,          CASE           WHEN A.TABLE_TYPE = 5 AND EXISTS (             SELECT 1             FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_INDEX,                  SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_BASE             WHERE T_COL_BASE.TABLE_ID = A.DATA_TABLE_ID               AND T_COL_BASE.COLUMN_NAME = T_COL_INDEX.COLUMN_NAME               AND T_COL_INDEX.TABLE_ID = A.TABLE_ID               AND T_COL_BASE.TENANT_ID = A.TENANT_ID               AND T_COL_INDEX.TENANT_ID = A.TENANT_ID               AND BITAND(T_COL_BASE.COLUMN_FLAGS,3) > 0           ) THEN 'FUNCTION-BASED NORMAL'           ELSE 'NORMAL'         END AS INDEX_TYPE_NAME,          DATABASE_NAME AS TABLE_OWNER,         CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID           ELSE A.DATA_TABLE_ID END AS TABLE_ID,         A.TABLE_ID AS INDEX_ID,         CASE WHEN TABLE_TYPE = 3 THEN 'UNIQUE'              WHEN A.INDEX_TYPE IN (2, 4, 8) THEN 'UNIQUE'           ELSE 'NONUNIQUE' END AS UNIQUENESS,         CASE WHEN A.COMPRESS_FUNC_NAME = NULL THEN 'DISABLED'           ELSE 'ENABLED' END AS COMPRESSION,         CASE WHEN TABLE_TYPE = 3 THEN 'VALID'              WHEN A.INDEX_STATUS = 2 THEN 'VALID'              WHEN A.INDEX_STATUS = 3 THEN 'CHECKING'              WHEN A.INDEX_STATUS = 4 THEN 'INELEGIBLE'              WHEN A.INDEX_STATUS = 5 THEN 'ERROR'           ELSE 'UNUSABLE' END AS STATUS,         A.INDEX_TYPE AS A_INDEX_TYPE,         A.PART_LEVEL AS A_PART_LEVEL,         A.TABLE_TYPE AS A_TABLE_TYPE,         CASE WHEN 0 = (SELECT COUNT(1) FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT                       WHERE TABLE_ID = A.TABLE_ID AND IS_HIDDEN = 0                         AND TENANT_ID = EFFECTIVE_TENANT_ID()) THEN 'ENABLED'           ELSE 'NULL' END AS FUNCIDX_STATUS,         CASE WHEN B.DATABASE_NAME = '__recyclebin' THEN 'YES'           ELSE 'NO' END AS DROPPED,         CASE WHEN BITAND(A.INDEX_ATTRIBUTES_SET, 1) = 0 THEN 'VISIBLE'           ELSE 'INVISIBLE' END AS VISIBILITY,         A.TABLESPACE_ID         FROM           SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = USERENV('SCHEMAID') AND A.DATABASE_ID = B.DATABASE_ID           AND TABLE_TYPE IN (5, 3)           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB ON (CONS_TAB.TABLE_ID = A.TABLE_ID)               AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID()         WHERE           NOT(TABLE_TYPE = 3 AND CONSTRAINT_NAME IS NULL) AND (CONS_TAB.CONSTRAINT_TYPE IS NULL OR CONS_TAB.CONSTRAINT_TYPE = 1)         ) C       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID               AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON C.TABLESPACE_ID = TP.TABLESPACE_ID               AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_ERRORS	 SELECT   CAST(o.owner AS VARCHAR2(128)) AS OWNER,   CAST(o.object_name AS VARCHAR2(128)) AS NAME,   CAST(o.object_type AS VARCHAR2(19)) AS TYPE,   CAST(e.obj_seq AS NUMBER) AS SEQUENCE,   CAST(e.line AS NUMBER) AS LINE,   CAST(e.position AS NUMBER) AS POSITION,   CAST(e.text as VARCHAR2(4000)) AS TEXT,   CAST(DECODE(e.property, 0, 'ERROR', 1, 'WARNING', 'UNDEFINED') AS VARCHAR2(9)) AS ATTRIBUTE,   CAST(e.error_number AS NUMBER) AS MESSAGE_NUMBER FROM   all_objects o,  (select obj_id, obj_seq, line, position, text, property, error_number, CAST( UPPER(decode(obj_type,                                    3, 'PACKAGE',                                    4, 'TYPE',                                    5, 'PACKAGE BODY',                                    6, 'TYPE BODY',                                    7, 'TRIGGER',                                    8, 'VIEW',                                    9, 'FUNCTION',                                    12, 'PROCEDURE',                                    'MAXTYPE')) AS VARCHAR2(23)) object_type from sys.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT                           WHERE TENANT_ID = EFFECTIVE_TENANT_ID())  e,   all_users u WHERE   o.object_id = e.obj_id   AND o.object_type like e.object_type   AND o.object_type IN (UPPER('package'),                         UPPER('type'),                         UPPER('procedure'),                         UPPER('function'),                         UPPER('package body'),                         UPPER('view'),                         UPPER('trigger'),                         UPPER('type body'),                         UPPER('library'),                         UPPER('queue'),                         UPPER('java source'),                         UPPER('java class'),                         UPPER('dimension'),                         UPPER('assembly'),                         UPPER('hierarchy'),                         UPPER('arrtibute dimension'),                         UPPER('analytic view'))   AND u.username=o.owner   AND u.userid IN (USERENV('SCHEMAID'))   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_DEPENDENCIES	     SELECT      o.OBJECT_NAME AS NAME,      o.OBJECT_TYPE AS TYPE,      ro.REFERENCED_OWNER AS REFERENCED_OWNER,      ro.REFERENCED_NAME AS REFERENCED_NAME,      DECODE(ro.REFERENCED_TYPE, NULL, ' NON-EXISTENT', ro.REFERENCED_TYPE) AS REFERENCED_TYPE,      CAST(NULL AS VARCHAR2(128)) AS REFERENCED_LINK_NAME,      CAST(USERENV('SCHEMAID') AS NUMBER) AS SCHEMAID,      CAST(DECODE(BITAND(o.PROPERTY, 3), 2, 'REF', 'HARD') AS VARCHAR2(4)) AS DEPENDENCY_TYPE      FROM (select             OWNER,             OBJECT_NAME,             OBJECT_TYPE,             REF_OBJ_NAME,             ref_obj_type,             dep_obj_id,             dep_obj_type,             dep_order,             property             from SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d             WHERE CAST(UPPER(decode(d.dep_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                 'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.DEP_OBJ_ID = o.OBJECT_ID) o                 LEFT OUTER JOIN                 (SELECT DISTINCT                   CAST(OWNER AS VARCHAR2(128)) AS REFERENCED_OWNER,                   CAST(OBJECT_NAME AS VARCHAR2(128)) AS REFERENCED_NAME,                   CAST(OBJECT_TYPE AS VARCHAR2(18)) AS REFERENCED_TYPE,                   dep_obj_id,                   dep_obj_type,                   dep_order FROM                   SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d                   WHERE CAST(UPPER(decode(d.ref_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                       'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.REF_OBJ_ID = o.OBJECT_ID) ro                     on ro.dep_obj_id = o.dep_obj_id AND ro.dep_obj_type = o.dep_obj_type                       AND ro.dep_order = o.dep_order 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_CONS_COLUMNS	     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(D.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.INDEX_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D       WHERE A.DATA_TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID AND D.TABLE_ID = A.TABLE_ID AND A.INDEX_TYPE IN (2, 4, 8) AND C.DATABASE_NAME != '__recyclebin' AND D.IS_HIDDEN = 0 AND C.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') AND D.INDEX_POSITION != 0         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(E.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_FOREIGN_KEY_COLUMN_REAL_AGENT D, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT E       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.FOREIGN_KEY_ID = D.FOREIGN_KEY_ID AND D.CHILD_COLUMN_ID = E.COLUMN_ID AND B.TABLE_ID = E.TABLE_ID AND C.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(D.CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(A.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(B.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(B.ROWKEY_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT D       WHERE A.TABLE_ID = D.TABLE_ID AND D.CONSTRAINT_TYPE = 1 AND A.TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID AND B.ROWKEY_POSITION > 0 AND C.DATABASE_NAME != '__recyclebin' AND B.IS_HIDDEN = 0 AND C.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_CONSTRAINTS	     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('U' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(NULL AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,     CAST('ENABLED' AS VARCHAR2(8)) AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CAST('VALIDATED' AS VARCHAR2(13)) AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CAST(NULL AS VARCHAR2(4)) AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C WHERE A.DATA_TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID       AND A.DATABASE_ID = USERENV('SCHEMAID') AND A.INDEX_TYPE IN (2, 4, 8)       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'       ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CAST(NULL AS VARCHAR2(4)) AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.REF_CST_TYPE = 0 AND A.REF_CST_ID = -1 AND B.DATABASE_ID = USERENV('SCHEMAID')         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 2 THEN SUBSTR(F.TABLE_NAME, 7 + INSTR(SUBSTR(F.TABLE_NAME, 7), '_'))          ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.PARENT_TABLE_ID = D.TABLE_ID AND D.DATABASE_ID = E.DATABASE_ID AND (A.REF_CST_ID = F.TABLE_ID AND A.REF_CST_TYPE = 2) AND B.DATABASE_ID = USERENV('SCHEMAID')       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       AND E.TENANT_ID = EFFECTIVE_TENANT_ID()       AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 1 THEN F.CONSTRAINT_NAME         ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.PARENT_TABLE_ID = D.TABLE_ID AND D.DATABASE_ID = E.DATABASE_ID AND (A.PARENT_TABLE_ID = F.TABLE_ID AND A.REF_CST_TYPE = 1 AND F.CONSTRAINT_TYPE = 1 AND A.REF_CST_ID = F.CONSTRAINT_ID) AND B.DATABASE_ID = USERENV('SCHEMAID')       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       AND E.TENANT_ID = EFFECTIVE_TENANT_ID()       AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST('P' AS VARCHAR2(1))         ELSE CAST('C' AS VARCHAR2(1)) END AS CONSTRAINT_TYPE,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(NULL AS VARCHAR2(4000))         ELSE CAST(A.CHECK_EXPR AS VARCHAR2(4000)) END AS SEARCH_CONDITION,       CAST(NULL AS VARCHAR2(128)) AS R_OWNER,       CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,       CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,       CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))         ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,       CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,       CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,       CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))         ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,       CAST(NULL AS VARCHAR2(14)) AS "GENERATED",       CAST(NULL AS VARCHAR2(3)) AS BAD,       CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))         ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,       CAST(NULL AS DATE) AS LAST_CHANGE,       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(A.CONSTRAINT_NAME AS VARCHAR2(128))         ELSE CAST(NULL AS VARCHAR2(128)) END AS INDEX_NAME,       CAST(NULL AS VARCHAR2(7)) AS INVALID,       CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE C.DATABASE_ID = USERENV('SCHEMAID') AND A.TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND C.DATABASE_NAME != '__recyclebin'     AND A.TENANT_ID = EFFECTIVE_TENANT_ID()     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     AND C.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_COL_PRIVS	       SELECT         u_grantee.user_name as GRANTEE,         db.database_name as OWNER,         decode(auth.objtype, 1, t.table_name, '') as TABLE_NAME,         c.column_name as COLUMN_NAME,         u_grantor.user_name as GRANTOR,         cast (decode(auth.priv_id, 1, 'ALTER',                              2, 'AUDIT',                              3, 'COMMENT',                              4, 'DELETE',                              5, 'GRANT',                              6, 'INDEX',                              7, 'INSERT',                              8, 'LOCK',                              9, 'RENAME',                              10, 'SELECT',                              11, 'UPDATE',                              12, 'REFERENCES',                              13, 'EXECUTE',                              14, 'CREATE',                              15, 'FLASHBACK',                              16, 'READ',                              17, 'WRITE',                              'OTHERS') as varchar(40)) as PRIVILEGE,         decode(auth.priv_option, 0, 'NO', 1, 'YES', '') as GRANTABLE       FROM         sys.all_virtual_objauth_agent auth,         sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c,         sys.ALL_VIRTUAL_TABLE_REAL_AGENT t,         sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantor,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantee       WHERE         auth.col_id = c.column_id and         auth.obj_id = t.table_id and         auth.objtype = 1 and         auth.obj_id = c.table_id and         db.database_id = t.database_id and         u_grantor.user_id = auth.grantor_id and         u_grantee.user_id = auth.grantee_id         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTOR.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTEE.TENANT_ID = EFFECTIVE_TENANT_ID()         AND c.column_id != 65535 and 	      (db.database_name = SYS_CONTEXT('USERENV','CURRENT_USER') or          u_grantee.user_name = SYS_CONTEXT('USERENV','CURRENT_USER') or          u_grantor.user_name = SYS_CONTEXT('USERENV','CURRENT_USER')         )   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_COL_COMMENTS	     SELECT       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       C.COLUMN_NAME AS COLUMN_NAME,       CAST(C."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A,       SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B,       SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C     WHERE       A.DATABASE_ID = B.DATABASE_ID       AND B.TABLE_ID = C.TABLE_ID       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND A.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_COLL_TYPES	     SELECT /*+ USE_MERGE(T, C, D, T1, D1) */       T.TYPE_NAME AS TYPE_NAME,       CAST(         CASE C.UPPER_BOUND         WHEN 0 THEN 'COLLECTION'         ELSE 'TABLE' END AS VARCHAR2(10)) AS COLL_TYPE,       C.UPPER_BOUND AS UPPER_BOUND,       CAST(NULL AS VARCHAR2(7)) AS ELEM_TYPE_MOD,       CAST(         CASE C.PROPERTIES         WHEN 3 THEN NULL         ELSE d1.DATABASE_NAME END AS VARCHAR2(128)) AS ELEM_TYPE_OWNER,       CAST(         CASE C.PROPERTIES         WHEN 3           THEN DECODE (BITAND(C.ELEM_TYPE_ID, 1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(C.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(C.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(C.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(C.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, CONCAT('UROWID(', CONCAT(C.LENGTH, ')')),             46, '',             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ELEM_TYPE_NAME,       C.LENGTH AS LENGTH,       C.NUMBER_PRECISION AS NUMBER_PRECISION,       C.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       CAST('YES' AS CHAR(7)) AS ELEM_STORAGE,       CAST('B' AS CHAR(7)) AS NULLS_STORED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_COLL_TYPE_REAL_AGENT C         ON T.TYPE_ID = C.COLL_TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')            AND T.DATABASE_ID = D.DATABASE_ID            AND D.TENANT_ID = EFFECTIVE_TENANT_ID()            AND D.DATABASE_ID = USERENV('SCHEMAID')       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = C.ELEM_TYPE_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_ARGUMENTS	     SELECT       R.ROUTINE_NAME AS OBJECT_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE P.PACKAGE_NAME END AS PACKAGE_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,       CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,       CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,       RP.PARAM_NAME AS ARGUMENT_NAME,       RP.PARAM_POSITION AS POSITION,       RP.SEQUENCE AS SEQUENCE,       RP.PARAM_LEVEL AS DATA_LEVEL,       V.DATA_TYPE_STR AS DATA_TYPE,       'NO' AS DEFAULTED,       RP.PARAM_LENGTH AS DATA_LENGTH,       DECODE(BITAND(RP.FLAG, 3), 1, 'IN', 2, 'OUT', 3, 'INOUT', 0, 'OUT') AS IN_OUT,       RP.PARAM_PRECISION AS DATA_PRECISION,       RP.PARAM_SCALE AS DATA_SCALE,       CASE RP.PARAM_CHARSET WHEN 1 THEN 'BINARY' WHEN 2 THEN 'UTF8MB4' ELSE NULL END AS CHARACTER_SET_NAME,       CASE RP.PARAM_COLL_TYPE WHEN 45 THEN 'UTF8MB4_GENERAL_CI' WHEN 46 THEN 'UTF8MB4_BIN' WHEN 63 THEN 'BINARY' ELSE NULL END AS COLLATION,       RP.TYPE_OWNER AS TYPE_OWNER,       RP.TYPE_NAME AS TYPE_NAME,       RP.TYPE_SUBNAME AS TYPE_SUBNAME,       RP.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_PARAM_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID())RP       LEFT JOIN SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R ON RP.ROUTINE_ID = R.ROUTINE_ID         AND R.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID         AND P.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATA_TYPE V ON RP.PARAM_TYPE = V.DATA_TYPE     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = RP.TENANT_ID OR RP.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND R.DATABASE_ID = USERENV('SCHEMAID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	USER_ALL_TABLES	 SELECT   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(30)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(NULL AS VARCHAR2(16)) AS OBJECT_ID_TYPE,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE_OWNER,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST(NULL AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID(),     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db WHERE     db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND t.database_id = USERENV('SCHEMAID')     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND t.table_type != 5 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	mysql	time_zone_transition_type	     SELECT time_zone_id as Time_zone_id,            transition_type_id as Transition_type_id,            offset as Offset,            is_dst as Is_DST,            abbreviation as Abbreviation     FROM oceanbase.__all_tenant_time_zone_transition_type 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	mysql	time_zone_transition	     SELECT time_zone_id as Time_zone_id,            transition_time as Transition_time,            transition_type_id as Transition_type_id     FROM oceanbase.__all_tenant_time_zone_transition 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	mysql	time_zone_name	     SELECT name as Name,            time_zone_id as Time_zone_id     FROM oceanbase.__all_tenant_time_zone_name 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	mysql	time_zone	     SELECT time_zone_id as Time_zone_id,            use_leap_seconds as Use_leap_seconds     FROM oceanbase.__all_tenant_time_zone 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ROLE_TAB_PRIVS	       SELECT         U_GRANTEE.USER_NAME AS ROLE,         DB.DATABASE_NAME AS OWNER,           CAST (DECODE(AUTH.OBJTYPE,11, SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')),                         T.TABLE_NAME) AS VARCHAR(128)) AS TABLE_NAME,         C.COLUMN_NAME AS COLUMN_NAME,         CAST (DECODE(AUTH.PRIV_ID, 1, 'ALTER',                              2, 'AUDIT',                              3, 'COMMENT',                              4, 'DELETE',                              5, 'GRANT',                              6, 'INDEX',                              7, 'INSERT',                              8, 'LOCK',                              9, 'RENAME',                              10, 'SELECT',                              11, 'UPDATE',                              12, 'REFERENCES',                              13, 'EXECUTE',                              14, 'CREATE',                              15, 'FLASHBACK',                              16, 'READ',                              17, 'WRITE',                              'OTHERS') AS VARCHAR(40)) AS PRIVILEGE,         DECODE(AUTH.PRIV_OPTION, 0, 'NO', 1, 'YES', '') AS GRANTABLE       FROM         (SELECT * FROM SYS.ALL_VIRTUAL_TENANT_OBJAUTH_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) AUTH         LEFT JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C           ON AUTH.COL_ID = C.COLUMN_ID AND AUTH.OBJ_ID = C.TABLE_ID             AND C.TENANT_ID = EFFECTIVE_TENANT_ID(),         (SELECT TABLE_ID, TABLE_NAME, DATABASE_ID             FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT             WHERE TENANT_ID = EFFECTIVE_TENANT_ID()          UNION ALL          SELECT PACKAGE_ID AS TABLE_ID, PACKAGE_NAME AS TABLE_NAME, DATABASE_ID            FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT            WHERE TENANT_ID = EFFECTIVE_TENANT_ID()          UNION ALL          SELECT ROUTINE_ID AS TABLE_ID, ROUTINE_NAME AS TABLE_NAME, DATABASE_ID            FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT            WHERE TENANT_ID = EFFECTIVE_TENANT_ID()          UNION ALL          SELECT SEQUENCE_ID AS TABLE_ID, SEQUENCE_NAME AS TABLE_NAME, DATABASE_ID            FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT            WHERE TENANT_ID = EFFECTIVE_TENANT_ID()         ) T,         SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB,         SYS.ALL_VIRTUAL_USER_REAL_AGENT U_GRANTEE       WHERE         AUTH.OBJ_ID = T.TABLE_ID          AND DB.DATABASE_ID = T.DATABASE_ID          AND U_GRANTEE.USER_ID = AUTH.GRANTEE_ID          AND U_GRANTEE.TYPE = 1          AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()          AND U_GRANTEE.TENANT_ID = EFFECTIVE_TENANT_ID()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ROLE_SYS_PRIVS	       select 	u.user_name as ROLE,         CAST (DECODE(AUTH.PRIV_ID,                 1, 'CREATE SESSION',                 2, 'EXEMPT REDACT POLICY',                 3, 'SYSDBA',                 4, 'SYSOPER',                 5, 'SYSBACKUP',                 6, 'CREATE TABLE',                 7, 'CREATE ANY TABLE',                 8, 'ALTER ANY TABLE',                 9, 'BACKUP ANY TABLE',                 10, 'DROP ANY TABLE',                 11, 'LOCK ANY TABLE',                 12, 'COMMENT ANY TABLE',                 13, 'SELECT ANY TABLE',                 14, 'INSERT ANY TABLE',                 15, 'UPDATE ANY TABLE',                 16, 'DELETE ANY TABLE',                 17, 'FLASHBACK ANY TABLE',                 18, 'CREATE ROLE',                 19, 'DROP ANY ROLE',                 20, 'GRANT ANY ROLE',                 21, 'ALTER ANY ROLE',                 22, 'AUDIT ANY',                 23, 'GRANT ANY PRIVILEGE',                 24, 'GRANT ANY OBJECT PRIVILEGE',                 25, 'CREATE ANY INDEX',                 26, 'ALTER ANY INDEX',                 27, 'DROP ANY INDEX',                 28, 'CREATE ANY VIEW',                 29, 'DROP ANY VIEW',                 30, 'CREATE VIEW',                 31, 'SELECT ANY DICTIONARY',                 32, 'CREATE PROCEDURE',                 33, 'CREATE ANY PROCEDURE',                 34, 'ALTER ANY PROCEDURE',                 35, 'DROP ANY PROCEDURE',                 36, 'EXECUTE ANY PROCEDURE',                 37, 'CREATE SYNONYM',                 38, 'CREATE ANY SYNONYM',                 39, 'DROP ANY SYNONYM',                 40, 'CREATE PUBLIC SYNONYM',                 41, 'DROP PUBLIC SYNONYM',                 42, 'CREATE SEQUENCE',                 43, 'CREATE ANY SEQUENCE',                 44, 'ALTER ANY SEQUENCE',                 45, 'DROP ANY SEQUENCE',                 46, 'SELECT ANY SEQUENCE',                 47, 'CREATE TRIGGER',                 48, 'CREATE ANY TRIGGER',                 49, 'ALTER ANY TRIGGER',                 50, 'DROP ANY TRIGGER',                 51, 'CREATE PROFILE',                 52, 'ALTER PROFILE',                 53, 'DROP PROFILE',                 54, 'CREATE USER',                 55, 'BECOME USER',                 56, 'ALTER USER',                 57, 'DROP USER',                 58, 'CREATE TYPE',                 59, 'CREATE ANY TYPE',                 60, 'ALTER ANY TYPE',                 61, 'DROP ANY TYPE',                 62, 'EXECUTE ANY TYPE',                 63, 'UNDER ANY TYPE',                 64, 'PURGE DBA_RECYCLEBIN',                 65, 'CREATE ANY OUTLINE',                 66, 'ALTER ANY OUTLINE',                 67, 'DROP ANY OUTLINE',                 68, 'SYSKM',                 69, 'CREATE TABLESPACE',                 70, 'ALTER TABLESPACE',                 71, 'DROP TABLESPACE',                 72, 'SHOW PROCESS',                 73, 'ALTER SYSTEM',                 74, 'CREATE DATABASE LINK',                 75, 'CREATE PUBLIC DATABASE LINK',                 76, 'DROP DATABASE LINK',                 77, 'ALTER SESSION',                 78, 'ALTER DATABASE',                 'OTHER') AS VARCHAR(40)) AS PRIVILEGE ,        	decode(auth.priv_option, 0, 'NO', 1, 'YES', '') as ADMIN_OPTION       FROM 	sys.ALL_VIRTUAL_TENANT_SYSAUTH_REAL_AGENT auth, 	sys.ALL_VIRTUAL_USER_REAL_AGENT u       WHERE 	auth.grantee_id = u.user_id and   u.type = 1   AND U.TENANT_ID = EFFECTIVE_TENANT_ID()   AND AUTH.TENANT_ID = EFFECTIVE_TENANT_ID()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ROLE_ROLE_PRIVS	      select 	u_role.user_name as ROLE,         u_grantee.user_name as GRANTED_ROLE,         DECODE(R.ADMIN_OPTION, 0, 'NO', 1, 'YES', '') as ADMIN_OPTION      FROM 	sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantee, 	sys.ALL_VIRTUAL_USER_REAL_AGENT u_role, 	(select * from sys.all_virtual_tenant_role_grantee_map_agent 	 connect by prior role_id = grantee_id                    and bitand(role_id, power(2,40) - 1) != 9 	 start with grantee_id = uid               and bitand(role_id, power(2,40) - 1) != 9 ) r      WHERE 	r.grantee_id = u_role.user_id and 	r.role_id = u_grantee.user_id and 	u_role.type = 1 and   u_grantee.type = 1   AND U_GRANTEE.TENANT_ID = EFFECTIVE_TENANT_ID()   AND U_ROLE.TENANT_ID = EFFECTIVE_TENANT_ID()   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	NLS_SESSION_PARAMETERS	       SELECT         CAST(UPPER(VARIABLE_NAME) AS VARCHAR(30)) AS PARAMETER,         CAST(VALUE AS VARCHAR(64)) AS VALUE       FROM         SYS.TENANT_VIRTUAL_SESSION_VARIABLE       WHERE         VARIABLE_NAME LIKE 'nls_%'         AND VARIABLE_NAME != 'nls_characterset'         AND VARIABLE_NAME != 'nls_nchar_characterset' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	NLS_INSTANCE_PARAMETERS	       SELECT         CAST(UPPER(VARIABLE_NAME) AS VARCHAR(30)) AS PARAMETER,         CAST(VALUE AS VARCHAR(64)) AS VALUE       FROM         SYS.TENANT_VIRTUAL_GLOBAL_VARIABLE       WHERE         VARIABLE_NAME LIKE 'nls_%' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	NLS_DATABASE_PARAMETERS	       SELECT         CAST(UPPER(VARIABLE_NAME) AS VARCHAR(128)) AS PARAMETER,         CAST(VALUE AS VARCHAR(64)) AS VALUE       FROM         SYS.TENANT_VIRTUAL_GLOBAL_VARIABLE       WHERE         VARIABLE_NAME LIKE 'nls_%' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$TENANT_PX_WORKER_STAT	   SELECT     SESSION_ID,     TENANT_ID,     SVR_IP,     SVR_PORT,     TRACE_ID,     QC_ID,     SQC_ID,     WORKER_ID,     DFO_ID,     START_TIME   FROM SYS.ALL_VIRTUAL_PX_WORKER_STAT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$TENANT_MEMSTORE_ALLOCATOR_INFO	     SELECT TENANT_ID as CON_ID,            SVR_IP as SVR_IP,            SVR_PORT as SVR_PORT,            TABLE_ID as TABLE_ID,            PARTITION_ID as PARTITION_ID,            MT_BASE_VERSION as MT_BASE_VERSION,            RETIRE_CLOCK as RETIRE_CLOCK,            MT_IS_FROZEN as MT_IS_FROZEN,            MT_PROTECTION_CLOCK as MT_PROTECTION_CLOCK,            MT_SNAPSHOT_VERSION as MT_SNAPSHOT_VERSION     FROM SYS.ALL_VIRTUAL_TENANT_MEMSTORE_ALLOCATOR_INFO     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SYSTEM_EVENT	     SELECT TENANT_ID as CON_ID,       SVR_IP as SVR_IP,       SVR_PORT as SVR_PORT,       EVENT_ID as EVENT_ID,       EVENT as EVENT,       WAIT_CLASS_ID as WAIT_CLASS_ID,       "WAIT_CLASS#" as "WAIT_CLASS#",       WAIT_CLASS as WAIT_CLASS,       TOTAL_WAITS as TOTAL_WAITS,       TOTAL_TIMEOUTS as TOTAL_TIMEOUTS,       TIME_WAITED as TIME_WAITED,       AVERAGE_WAIT as AVERAGE_WAIT,       TIME_WAITED_MICRO as TIME_WAITED_MICRO     FROM SYS.ALL_VIRTUAL_SYSTEM_EVENT     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SYSSTAT	     SELECT TENANT_ID as CON_ID,       SVR_IP as SVR_IP,       SVR_PORT as SVR_PORT,       "STATISTIC#" as "STATISTIC#",       VALUE as VALUE,       STAT_ID as STAT_ID,       NAME as NAME,       CLASS as CLASS     FROM SYS.ALL_VIRTUAL_SYSSTAT     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SSTABLE	 SELECT   M.SVR_IP,   M.SVR_PORT,   M.TABLE_TYPE,   M.TABLE_ID,   T.TABLE_NAME,   T.TENANT_ID,   M.PARTITION_ID,   M.INDEX_ID,   M.BASE_VERSION,   M.MULTI_VERSION_START,   M.SNAPSHOT_VERSION,   M.START_LOG_ID,   M.END_LOG_ID,   M.MAX_LOG_ID,   M.VERSION,   M.LOGICAL_DATA_VERSION,   M."SIZE",   M.IS_ACTIVE,   M.REF,   M.WRITE_REF,   M.TRX_COUNT,   M.PENDING_LOG_PERSISTING_ROW_CNT,   M.UPPER_TRANS_VERSION,   M.CONTAIN_UNCOMMITTED_ROW FROM   SYS.ALL_VIRTUAL_TABLE_MGR_AGENT M JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T     ON M.TABLE_ID = T.TABLE_ID     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() AND   T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SQL_WORKAREA_HISTOGRAM	   SELECT       LOW_OPTIMAL_SIZE,       HIGH_OPTIMAL_SIZE,       OPTIMAL_EXECUTIONS,       ONEPASS_EXECUTIONS,       MULTIPASSES_EXECUTIONS,       TOTAL_EXECUTIONS,       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_HISTOGRAM_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SQL_WORKAREA_ACTIVE	   SELECT       CAST(NULL AS NUMBER) AS SQL_HASH_VALUE,       SQL_ID,       CAST(NULL AS DATE) AS SQL_EXEC_START,       SQL_EXEC_ID,       CAST(NULL AS RAW(8)) AS WORKAREA_ADDRESS,       OPERATION_TYPE,       OPERATION_ID,       POLICY,       SID,       CAST(NULL AS NUMBER) AS QCINST_ID,       CAST(NULL AS NUMBER) AS QCSID,       ACTIVE_TIME,       WORK_AREA_SIZE,       EXPECT_SIZE,       ACTUAL_MEM_USED,       MAX_MEM_USED,       NUMBER_PASSES,       TEMPSEG_SIZE,       CAST(NULL AS VARCHAR2(20)) AS TABLESPACE,       CAST(NULL AS NUMBER) AS "SEGRFNO#",       CAST(NULL AS NUMBER) AS "SEGBLK#",       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_ACTIVE_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SQL_WORKAREA	   SELECT       CAST(NULL AS RAW(8)) AS ADDRESS,       CAST(NULL AS NUMBER) AS HASH_VALUE,       SQL_ID,       CAST(NULL AS NUMBER) AS CHILD_NUMBER,       CAST(NULL AS RAW(8)) AS WORKAREA_ADDRESS,       OPERATION_TYPE,       OPERATION_ID,       POLICY,       ESTIMATED_OPTIMAL_SIZE,       ESTIMATED_ONEPASS_SIZE,       LAST_MEMORY_USED,       LAST_EXECUTION,       LAST_DEGREE,       TOTAL_EXECUTIONS,       OPTIMAL_EXECUTIONS,       ONEPASS_EXECUTIONS,       multipasses_executions,       ACTIVE_TIME,       MAX_TEMPSEG_SIZE,       LAST_TEMPSEG_SIZE,       TENANT_ID AS CON_ID   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_HISTORY_STAT_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SQL_PLAN_MONITOR	SELECT           TENANT_ID CON_ID,           REQUEST_ID,           NULL KEY,           NULL STATUS,           SVR_IP,           SVR_PORT,           TRACE_ID,           FIRST_REFRESH_TIME,           LAST_REFRESH_TIME,           FIRST_CHANGE_TIME,           LAST_CHANGE_TIME,           NULL REFRESH_COUNT,           NULL SID,           THREAD_ID  PROCESS_NAME,           NULL SQL_ID,           NULL SQL_EXEC_START,           NULL SQL_EXEC_ID,           NULL SQL_PLAN_HASH_VALUE,           NULL SQL_CHILD_ADDRESS,           NULL PLAN_PARENT_ID,           PLAN_LINE_ID,           PLAN_OPERATION,           NULL PLAN_OPTIONS,           NULL PLAN_OBJECT_OWNER,           NULL PLAN_OBJECT_NAME,           NULL PLAN_OBJECT_TYPE,           PLAN_DEPTH,           NULL PLAN_POSITION,           NULL PLAN_COST,           NULL PLAN_CARDINALITY,           NULL PLAN_BYTES,           NULL PLAN_TIME,           NULL PLAN_PARTITION_START,           NULL PLAN_PARTITION_STOP,           NULL PLAN_CPU_COST,           NULL PLAN_IO_COST,           NULL PLAN_TEMP_SPACE,           STARTS,           OUTPUT_ROWS,           NULL IO_INTERCONNECT_BYTES,           NULL PHYSICAL_READ_REQUESTS,           NULL PHYSICAL_READ_BYTES,           NULL PHYSICAL_WRITE_REQUESTS,           NULL PHYSICAL_WRITE_BYTES,           NULL WORKAREA_MEM,           NULL WORKAREA_MAX_MEM,           NULL WORKAREA_TEMPSEG,           NULL WORKAREA_MAX_TEMPSEG,           NULL OTHERSTAT_GROUP_ID,           OTHERSTAT_1_ID,           NULL OTHERSTAT_1_TYPE,           OTHERSTAT_1_VALUE,           OTHERSTAT_2_ID,           NULL OTHERSTAT_2_TYPE,           OTHERSTAT_2_VALUE,           OTHERSTAT_3_ID,           NULL OTHERSTAT_3_TYPE,           OTHERSTAT_3_VALUE,           OTHERSTAT_4_ID,           NULL OTHERSTAT_4_TYPE,           OTHERSTAT_4_VALUE,           OTHERSTAT_5_ID,           NULL OTHERSTAT_5_TYPE,           OTHERSTAT_5_VALUE,           OTHERSTAT_6_ID,           NULL OTHERSTAT_6_TYPE,           OTHERSTAT_6_VALUE,           OTHERSTAT_7_ID,           NULL OTHERSTAT_7_TYPE,           OTHERSTAT_7_VALUE,           OTHERSTAT_8_ID,           NULL OTHERSTAT_8_TYPE,           OTHERSTAT_8_VALUE,           OTHERSTAT_9_ID,           NULL OTHERSTAT_9_TYPE,           OTHERSTAT_9_VALUE,           OTHERSTAT_10_ID,           NULL OTHERSTAT_10_TYPE,           OTHERSTAT_10_VALUE,           NULL OTHER_XML,           NULL PLAN_OPERATION_INACTIVE         FROM SYS.ALL_VIRTUAL_SQL_PLAN_MONITOR         WHERE (is_serving_tenant(svr_ip, svr_port, effective_tenant_id()) = 1)         and (tenant_id = effective_tenant_id() or effective_tenant_id() = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SQL_AUDIT	SELECT                          svr_ip SVR_IP,                          svr_port SVR_PORT,                          request_id REQUEST_ID,                          execution_id SQL_EXEC_ID,                          trace_id TRACE_ID,                          session_id SID,                          client_ip CLIENT_IP,                          client_port CLIENT_PORT,                          tenant_id TENANT_ID,                          effective_tenant_id EFFECTIVE_TENANT_ID,                          tenant_name TENANT_NAME,                          user_id USER_ID,                          user_name USER_NAME,                          user_group as USER_GROUP,                          user_client_ip as USER_CLIENT_IP,                          db_id DB_ID,                          db_name DB_NAME,                          sql_id SQL_ID,                          query_sql QUERY_SQL,                          plan_id PLAN_ID,                          affected_rows AFFECTED_ROWS,                          return_rows RETURN_ROWS,                          partition_cnt PARTITION_CNT,                          ret_code RET_CODE,                          qc_id QC_ID,                          dfo_id DFO_ID,                          sqc_id SQC_ID,                          worker_id WORKER_ID,                          event EVENT,                          p1text P1TEXT,                          p1 P1,                          p2text P2TEXT,                          p2 P2,                          p3text P3TEXT,                          p3 P3,                          "LEVEL" "LEVEL",                          wait_class_id WAIT_CLASS_ID,                          "WAIT_CLASS#" "WAIT_CLASS#",                          wait_class WAIT_CLASS,                          state STATE,                          wait_time_micro WAIT_TIME_MICRO,                          total_wait_time_micro TOTAL_WAIT_TIME_MICRO,                          total_waits TOTAL_WAITS,                          rpc_count RPC_COUNT,                          plan_type PLAN_TYPE,                          is_inner_sql IS_INNER_SQL,                          is_executor_rpc IS_EXECUTOR_RPC,                          is_hit_plan IS_HIT_PLAN,                          request_time REQUEST_TIME,                          elapsed_time ELAPSED_TIME,                          net_time NET_TIME,                          net_wait_time NET_WAIT_TIME,                          queue_time QUEUE_TIME,                          decode_time DECODE_TIME,                          get_plan_time GET_PLAN_TIME,                          execute_time EXECUTE_TIME,                          application_wait_time APPLICATION_WAIT_TIME,                          concurrency_wait_time CONCURRENCY_WAIT_TIME,                          user_io_wait_time USER_IO_WAIT_TIME,                          schedule_time SCHEDULE_TIME,                          row_cache_hit ROW_CACHE_HIT,                          bloom_filter_cache_hit BLOOM_FILTER_CACHE_HIT,                          block_cache_hit BLOCK_CACHE_HIT,                          block_index_cache_hit BLOCK_INDEX_CACHE_HIT,                          disk_reads DISK_READS,                          retry_cnt RETRY_CNT,                          table_scan TABLE_SCAN,                          consistency_level CONSISTENCY_LEVEL,                          memstore_read_row_count MEMSTORE_READ_ROW_COUNT,                          ssstore_read_row_count SSSTORE_READ_ROW_COUNT,                          request_memory_used REQUEST_MEMORY_USED,                          expected_worker_count EXPECTED_WORKER_COUNT,                          used_worker_count USED_WORKER_COUNT,                          sched_info SCHED_INFO,                          ps_stmt_id PS_STMT_ID,                          transaction_hash TRANSACTION_HASH,                          request_type as REQUEST_TYPE,                          is_batched_multi_stmt as IS_BATCHED_MULTI_STMT,                          ob_trace_info as OB_TRACE_INFO,                          plan_hash as PLAN_HASH                     FROM SYS.ALL_VIRTUAL_SQL_AUDIT                     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SESSTAT	     SELECT SESSION_ID as SID,        TENANT_ID as CON_ID,        SVR_IP as SVR_IP,        SVR_PORT as SVR_PORT,        "STATISTIC#" as "STATISTIC#",        VALUE as VALUE     FROM SYS.ALL_VIRTUAL_SESSTAT     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SESSION_WAIT_HISTORY	     SELECT SESSION_ID AS SID,     TENANT_ID AS CON_ID,     SVR_IP AS SVR_IP,     SVR_PORT AS SVR_PORT,     "SEQ#" AS "SEQ#",     "EVENT#" AS "EVENT#",     EVENT AS EVENT,     P1TEXT AS P1TEXT,     P1 AS P1,     P2TEXT AS P2TEXT,     P2 AS P2,     P3TEXT AS P3TEXT,     P3 AS P3,     WAIT_TIME_MICRO AS WAIT_TIME_MICRO,     TIME_SINCE_LAST_WAIT_MICRO AS TIME_SINCE_LAST_WAIT_MICRO,     WAIT_TIME AS WAIT_TIME     FROM SYS.ALL_VIRTUAL_SESSION_WAIT_HISTORY     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SESSION_WAIT	     SELECT SESSION_ID AS SID,     TENANT_ID AS CON_ID,     SVR_IP AS SVR_IP,     SVR_PORT AS SVR_PORT,     EVENT AS EVENT,     P1TEXT AS P1TEXT,     P1 AS P1,     P2TEXT AS P2TEXT,     P2 AS P2,     P3TEXT AS P3TEXT,     P3 AS P3,     WAIT_CLASS_ID AS WAIT_CLASS_ID,     "WAIT_CLASS#" AS "WAIT_CLASS#",     WAIT_CLASS AS WAIT_CLASS,     STATE AS STATE,     WAIT_TIME_MICRO AS WAIT_TIME_MICRO,     TIME_REMAINING_MICRO AS TIME_REMAINING_MICRO,     TIME_SINCE_LAST_WAIT_MICRO AS TIME_SINCE_LAST_WAIT_MICRO     FROM SYS.ALL_VIRTUAL_SESSION_WAIT     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SERVER_SCHEMA_INFO	 SELECT   SVR_IP,   SVR_PORT,   TENANT_ID,   REFRESHED_SCHEMA_VERSION,   RECEIVED_SCHEMA_VERSION,   SCHEMA_COUNT,   SCHEMA_SIZE,   MIN_SSTABLE_SCHEMA_VERSION FROM   SYS.ALL_VIRTUAL_SERVER_SCHEMA_INFO_AGENT WHERE   TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$SERVER_MEMSTORE	     SELECT       SVR_IP AS SVR_IP,       SVR_PORT AS SVR_PORT,       ACTIVE_MEMSTORE_USED AS ACTIVE,       TOTAL_MEMSTORE_USED AS TOTAL,       MAJOR_FREEZE_TRIGGER AS "FREEZE_TRIGGER",       MEMSTORE_LIMIT AS "MEM_LIMIT"     FROM SYS.ALL_VIRTUAL_SERVER_MEMORY_INFO_AGENT     WHERE SYS_CONTEXT('USERENV', 'CON_ID') = 1 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PS_STAT	   SELECT svr_ip, svr_port, stmt_count,          hit_count, access_count, mem_hold       FROM SYS.ALL_VIRTUAL_PS_STAT WHERE       TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PS_ITEM_INFO	   SELECT svr_ip, svr_port, stmt_id, db_id,          ps_sql, param_count, stmt_item_ref_count,          stmt_info_ref_count, mem_hold, stmt_type, checksum, expired       FROM SYS.ALL_VIRTUAL_PS_ITEM_INFO WHERE       TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PLAN_CACHE_STAT	       SELECT       SVR_IP,       SVR_PORT,       SQL_NUM,       MEM_USED,       MEM_HOLD,       ACCESS_COUNT,       HIT_COUNT,       HIT_RATE,       PLAN_NUM,       MEM_LIMIT,       HASH_BUCKET,       STMTKEY_NUM       FROM SYS.ALL_VIRTUAL_PLAN_CACHE_STAT WHERE       TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PLAN_CACHE_REFERENCE_INFO	 SELECT SVR_IP, SVR_PORT, TENANT_ID, PC_REF_PLAN_LOCAL, PC_REF_PLAN_REMOTE, PC_REF_PLAN_DIST, PC_REF_PLAN_ARR, PC_REF_PL, PC_REF_PL_STAT, PLAN_GEN, CLI_QUERY, OUTLINE_EXEC, PLAN_EXPLAIN, ASYN_BASELINE, LOAD_BASELINE, PS_EXEC, GV_SQL, PL_ANON, PL_ROUTINE, PACKAGE_VAR, PACKAGE_TYPE, PACKAGE_SPEC, PACKAGE_BODY, PACKAGE_RESV, GET_PKG, INDEX_BUILDER, PCV_SET, PCV_RD, PCV_WR, PCV_GET_PLAN_KEY, PCV_GET_PL_KEY, PCV_EXPIRE_BY_USED, PCV_EXPIRE_BY_MEM FROM SYS.ALL_VIRTUAL_PLAN_CACHE_STAT WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PLAN_CACHE_PLAN_STAT	       SELECT       TENANT_ID AS TENANT_ID,       SVR_IP AS SVR_IP,       SVR_PORT AS SVR_PORT,       PLAN_ID AS PLAN_ID,       SQL_ID AS SQL_ID,       TYPE AS TYPE,       IS_BIND_SENSITIVE AS IS_BIND_SENSITIVE,       IS_BIND_AWARE AS IS_BIND_AWARE,       DB_ID AS DB_ID,       STATEMENT AS STATEMENT,       QUERY_SQL AS QUERY_SQL,       SPECIAL_PARAMS AS SPECIAL_PARAMS,       PARAM_INFOS AS PARAM_INFOS,       SYS_VARS AS SYS_VARS,       PLAN_HASH AS PLAN_HASH,       FIRST_LOAD_TIME AS FIRST_LOAD_TIME,       SCHEMA_VERSION AS SCHEMA_VERSION,       MERGED_VERSION AS MERGED_VERSION,       LAST_ACTIVE_TIME AS LAST_ACTIVE_TIME,       AVG_EXE_USEC AS AVG_EXE_USEC,       SLOWEST_EXE_TIME AS SLOWEST_EXE_TIME,       SLOWEST_EXE_USEC AS SLOWEST_EXE_USEC,       SLOW_COUNT AS SLOW_COUNT,       HIT_COUNT AS HIT_COUNT,       PLAN_SIZE AS PLAN_SIZE,       EXECUTIONS AS EXECUTIONS,       DISK_READS AS DISK_READS,       DIRECT_WRITES AS DIRECT_WRITES,       BUFFER_GETS AS BUFFERS_GETS,       APPLICATION_WAIT_TIME AS APPLICATION_WATI_TIME,       CONCURRENCY_WAIT_TIME AS CONCURRENCY_WAIT_TIME,       USER_IO_WAIT_TIME AS USER_IO_WAIT_TIME,       ROWS_PROCESSED AS ROWS_PROCESSED,       ELAPSED_TIME AS ELAPSED_TIME,       CPU_TIME AS CPU_TIME,       LARGE_QUERYS AS LARGE_QUERYS,       DELAYED_LARGE_QUERYS AS DELAYED_LARGE_QUERYS,       DELAYED_PX_QUERYS AS DELAYED_PX_QUERYS,       OUTLINE_VERSION AS OUTLINE_VERSION,       OUTLINE_ID AS OUTLINE_ID,       OUTLINE_DATA AS OUTLINE_DATA,       HINTS_INFO AS HINTS_INFO,       HINTS_ALL_WORKED AS HINTS_ALL_WORKED,       ACS_SEL_INFO AS ACS_SEL_INFO,       TABLE_SCAN AS TABLE_SCAN,       EVOLUTION AS EVOLUTION,       EVO_EXECUTIONS AS EVO_EXECUTIONS,       EVO_CPU_TIME AS EVO_CPU_TIME,       TIMEOUT_COUNT AS TIMEOUT_COUNT,       PS_STMT_ID AS PS_STMT_ID,       SESSID AS SESSID,       TEMP_TABLES AS TEMP_TABLES,       IS_USE_JIT AS IS_USE_JIT,       OBJECT_TYPE AS OBJECT_TYPE,       PL_SCHEMA_ID AS PL_SCHEMA_ID,       IS_BATCHED_MULTI_STMT AS IS_BATCHED_MULTI_STMT       FROM SYS.ALL_VIRTUAL_PLAN_STAT WHERE       TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$PLAN_CACHE_PLAN_EXPLAIN	       SELECT TENANT_ID AS TENANT_ID,       SVR_IP as SVR_IP,       SVR_PORT as SVR_PORT,       PLAN_ID AS PLAN_ID,       PLAN_DEPTH as PLAN_DEPTH,       PLAN_LINE_ID as PLAN_LINE_ID,       OPERATOR AS OPERATOR,       NAME AS NAME,       "ROWS" AS "ROWS",       COST AS COST,       PROPERTY AS PROPERTY       FROM SYS.ALL_VIRTUAL_PLAN_CACHE_PLAN_EXPLAIN WHERE       TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$OUTLINE	SELECT tenant_id  TENANT_ID,                           database_id  DATABASE_ID,                           outline_id OUTLINE_ID,                           database_name DATABASE_NAME,                           outline_name OUTLINE_NAME,                           visible_signature VISIBLE_SIGNATURE,                           sql_text SQL_TEXT,                           outline_target OUTLINE_TARGET,                           outline_sql OUTLINE_SQL                    from SYS.TENANT_VIRTUAL_OUTLINE_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$OPEN_CURSOR	     SELECT       SVR_IP,       SVR_PORT,       SADDR,       SID,       USER_NAME,       ADDRESS,       HASH_VALUE,       SQL_ID,       SQL_TEXT,       CAST(LAST_SQL_ACTIVE_TIME as DATE) LAST_SQL_ACTIVE_TIME,       SQL_EXEC_ID FROM SYS.ALL_VIRTUAL_OPEN_CURSOR   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$OB_SQL_WORKAREA_MEMORY_INFO	   SELECT       MAX_WORKAREA_SIZE,       WORKAREA_HOLD_SIZE,       MAX_AUTO_WORKAREA_SIZE,       MEM_TARGET,       TOTAL_MEM_USED,       GLOBAL_MEM_BOUND,       DRIFT_SIZE,       WORKAREA_COUNT,       MANUAL_CALC_COUNT   FROM SYS.ALL_VIRTUAL_SQL_WORKAREA_MEMORY_INFO_AGENT   WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$MEMSTORE_INFO	     SELECT TENANT_ID AS CON_ID,     SVR_IP AS SVR_IP,     SVR_PORT AS SVR_PORT,     TABLE_ID AS TABLE_ID,     PARTITION_IDX AS PARTITION_ID,     VERSION,     BASE_VERSION,     MULTI_VERSION_START,     SNAPSHOT_VERSION,     IS_ACTIVE,     MEM_USED as USED,     HASH_ITEM_COUNT as HASH_ITEMS,     BTREE_ITEM_COUNT as BTREE_ITEMS     FROM SYS.ALL_VIRTUAL_MEMSTORE_INFO     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$MEMSTORE	     SELECT TENANT_ID AS CON_ID,     SVR_IP AS SVR_IP,     SVR_PORT AS SVR_PORT,     ACTIVE_MEMSTORE_USED AS ACTIVE,     TOTAL_MEMSTORE_USED AS TOTAL,     MAJOR_FREEZE_TRIGGER AS "FREEZE_TRIGGER",     MEMSTORE_LIMIT AS "MEM_LIMIT",     FREEZE_CNT AS FREEZE_CNT     FROM SYS.ALL_VIRTUAL_TENANT_MEMSTORE_INFO     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID') 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$MEMORY	     SELECT TENANT_ID AS CON_ID,     SVR_IP AS SVR_IP,     SVR_PORT AS SVR_PORT,     MOD_NAME AS CONTEXT,     SUM(COUNT) AS COUNT,     SUM(USED) AS USED,     SUM(ALLOC_COUNT) AS ALLOC_COUNT,     SUM(FREE_COUNT) AS FREE_COUNT     FROM SYS.ALL_VIRTUAL_MEMORY_INFO     WHERE TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')     AND MOD_TYPE = 'USER' GROUP BY TENANT_ID, SVR_IP, SVR_PORT, MOD_NAME     ORDER BY TENANT_ID, SVR_IP, SVR_PORT, MOD_NAME 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$LOCK	     SELECT       DISTINCT       A.SVR_IP AS SVR_IP,       A.SVR_PORT AS SVR_PORT,       A.TABLE_ID AS TABLE_ID,       A.ROWKEY AS ADDR,       B.ROW_LOCK_ADDR AS KADDR,       B.SESSION_ID AS SID,       A.TYPE AS TYPE,       A.LOCK_MODE AS LMODE,       CAST(NULL AS NUMBER) AS REQUEST,       A.TIME_AFTER_RECV AS CTIME,       A.BLOCK_SESSION_ID AS BLOCK,       TRUNC(A.TABLE_ID / POWER(2, 40)) AS CON_ID       FROM SYS.ALL_VIRTUAL_LOCK_WAIT_STAT A       JOIN SYS.ALL_VIRTUAL_TRANS_LOCK_STAT B       ON A.SVR_IP = B.SVR_IP AND A.SVR_PORT = B.SVR_PORT       AND A.TABLE_ID = B.TABLE_ID AND SUBSTR(A.ROWKEY, 1, 512) = SUBSTR(B.ROWKEY, 1, 512)       WHERE (SYS_CONTEXT('USERENV', 'CON_ID') = 1 OR SYS_CONTEXT('USERENV', 'CON_ID') = TRUNC(A.TABLE_ID / POWER(2, 40)))       AND A.SESSION_ID = A.BLOCK_SESSION_ID   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$INSTANCE	       SELECT       CAST(ID AS NUMBER) INST_ID,       CAST(NULL AS NUMBER) INSTANCE_NUMBER,       CAST(NULL AS VARCHAR2(16)) INSTANCE_NAME,       CAST(CONCAT(SVR_IP, CONCAT(':', SVR_PORT)) AS VARCHAR2(64)) HOST_NAME,       CAST(SUBSTR(BUILD_VERSION, 1, 11) AS VARCHAR2(17)) VERSION,       CAST(NULL AS DATE) STARTUP_TIME,       CAST(NULL AS VARCHAR2(12)) STATUS,       CAST(NULL AS VARCHAR2(3)) PARALLEL,       CAST(NULL AS NUMBER) THREAD#,       CAST(NULL AS VARCHAR2(7)) ARCHIVER,       CAST(NULL AS VARCHAR2(15)) LOG_SWITCH_WAIT,       CAST(NULL AS VARCHAR2(10)) LOGINS,       CAST(NULL AS VARCHAR2(3)) SHUTDOWN_PENDING,       CAST(STATUS AS VARCHAR2(17)) DATABASE_STATUS,       CAST(NULL AS VARCHAR2(18)) INSTANCE_ROLE,       CAST(NULL AS VARCHAR2(9)) ACTIVE_STATE,       CAST(NULL AS VARCHAR2(2)) BLOCKED,       CAST(NULL AS NUMBER) CON_ID,       CAST(NULL AS VARCHAR2(11)) INSTANCE_MODE,       CAST(NULL AS VARCHAR2(7)) EDITION,       CAST(NULL AS VARCHAR2(80)) FAMILY,       CAST(NULL AS VARCHAR2(15)) DATABASE_TYPE       FROM       SYS.ALL_VIRTUAL_SERVER_AGENT WHERE       IS_SERVING_TENANT(SVR_IP, SVR_PORT, SYS_CONTEXT('USERENV', 'CON_ID')) = 1 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$GLOBAL_TRANSACTION	     SELECT A.FORMAT_ID AS FORMATID,       A.SCHEDULER_IP AS SVR_IP,       A.SCHEDULER_PORT AS SVR_PORT,       RAWTOHEX(A.GTRID) AS GLOBALID,       RAWTOHEX(A.BQUAL) AS BRANCHID,       B.BRANCHES AS BRANCHES,       B.BRANCHES AS REFCOUNT,       NVL(C.PREPARECOUNT, 0) AS PREPARECOUNT,       'ACTIVE' AS STATE,       0 AS FLAGS,       CASE WHEN bitand(end_flag,65536)=65536 THEN 'LOOSELY COUPLED' ELSE 'TIGHTLY COUPLED' END AS COUPLING,       SYS_CONTEXT('USERENV', 'CON_ID') AS CON_ID     FROM SYS.ALL_VIRTUAL_TENANT_GLOBAL_TRANSACTION_AGENT A     LEFT JOIN (SELECT GTRID, FORMAT_ID, COUNT(BQUAL) AS BRANCHES FROM SYS.ALL_VIRTUAL_TENANT_GLOBAL_TRANSACTION_AGENT GROUP BY GTRID, FORMAT_ID) B     ON A.GTRID = B.GTRID AND A.FORMAT_ID = B.FORMAT_ID     LEFT JOIN (SELECT GTRID, FORMAT_ID, COUNT(BQUAL) AS PREPARECOUNT FROM SYS.ALL_VIRTUAL_TENANT_GLOBAL_TRANSACTION_AGENT WHERE STATE = 3 GROUP BY GTRID, FORMAT_ID) C     ON B.GTRID = C.GTRID AND B.FORMAT_ID = C.FORMAT_ID     WHERE A.format_id != -2   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	GV$CONCURRENT_LIMIT_SQL	SELECT tenant_id TENANT_ID,           database_id DATABASE_ID,           outline_id OUTLINE_ID,           database_name DATABASE_NAME,           outline_name OUTLINE_NAME,           outline_content OUTLINE_CONTENT,           visible_signature VISIBLE_SIGNATURE,           sql_text SQL_TEXT,           concurrent_num CONCURRENT_NUM,           limit_target LIMIT_TARGET    FROM SYS.TENANT_VIRTUAL_CONCURRENT_LIMIT_SQL_AGENT	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DICTIONARY	     SELECT       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE TABLE_NAME         WHEN 'DBA_COL_PRIVS' THEN 'All grants on columns in the database'         WHEN 'USER_COL_PRIVS' THEN 'Grants on columns for which the user is the owner, grantor or grantee'         WHEN 'ALL_COL_PRIVS' THEN 'Grants on columns for which the user is the grantor, grantee, owner, or an enabled role or PUBLIC is the grantee'         WHEN 'ROLE_TAB_PRIVS' THEN 'Table privileges granted to roles'         WHEN 'ROLE_SYS_PRIVS' THEN 'System privileges granted to roles'         WHEN 'ROLE_ROLE_PRIVS' THEN 'Roles which are granted to roles'         WHEN 'DBA_SYNONYMS' THEN 'All synonyms in the database'         WHEN 'DBA_OBJECTS' THEN 'All objects in the database'         WHEN 'ALL_OBJECTS' THEN 'Objects accessible to the user'         WHEN 'USER_OBJECTS' THEN 'Objects owned by the user'         WHEN 'DBA_SEQUENCES' THEN 'Description of all SEQUENCEs in the database'         WHEN 'ALL_SEQUENCES' THEN 'Description of SEQUENCEs accessible to the user'         WHEN 'USER_SEQUENCES' THEN 'Description of the user''s own SEQUENCEs'         WHEN 'DBA_USERS' THEN 'Information about all users of the database'         WHEN 'ALL_USERS' THEN 'Information about all users of the database'         WHEN 'ALL_SYNONYMS' THEN 'All synonyms for base objects accessible to the user and session'         WHEN 'USER_SYNONYMS' THEN 'The user''s private synonyms'         WHEN 'DBA_IND_COLUMNS' THEN 'COLUMNs comprising INDEXes on all TABLEs and CLUSTERs'         WHEN 'ALL_IND_COLUMNS' THEN 'COLUMNs comprising INDEXes on accessible TABLES'         WHEN 'USER_IND_COLUMNS' THEN 'COLUMNs comprising user''s INDEXes and INDEXes on user''s TABLES'         WHEN 'DBA_CONSTRAINTS' THEN 'Constraint definitions on all tables'         WHEN 'ALL_CONSTRAINTS' THEN 'Constraint definitions on accessible tables'         WHEN 'USER_CONSTRAINTS' THEN 'Constraint definitions on user''s own tables'         WHEN 'ALL_TAB_COLS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'DBA_TAB_COLS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'USER_TAB_COLS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'ALL_TAB_COLUMNS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'DBA_TAB_COLUMNS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'USER_TAB_COLUMNS' THEN 'Columns of user''s tables, views and clusters'         WHEN 'ALL_TABLES' THEN 'Description of relational tables accessible to the user'         WHEN 'DBA_TABLES' THEN 'Description of all relational tables in the database'         WHEN 'USER_TABLES' THEN 'Description of the user''s own relational tables'         WHEN 'DBA_TAB_COMMENTS' THEN 'Comments on all tables and views in the database'         WHEN 'ALL_TAB_COMMENTS' THEN 'Comments on tables and views accessible to the user'         WHEN 'USER_TAB_COMMENTS' THEN 'Comments on the tables and views owned by the user'         WHEN 'DBA_COL_COMMENTS' THEN 'Comments on columns of all tables and views'         WHEN 'ALL_COL_COMMENTS' THEN 'Comments on columns of accessible tables and views'         WHEN 'USER_COL_COMMENTS' THEN 'Comments on columns of user''s tables and views'         WHEN 'DBA_INDEXES' THEN 'Description for all indexes in the database'         WHEN 'ALL_INDEXES' THEN 'Descriptions of indexes on tables accessible to the user'         WHEN 'USER_INDEXES' THEN 'Description of the user''s own indexes'         WHEN 'DBA_CONS_COLUMNS' THEN 'Information about accessible columns in constraint definitions'         WHEN 'ALL_CONS_COLUMNS' THEN 'Information about accessible columns in constraint definitions'         WHEN 'USER_CONS_COLUMNS' THEN 'Information about accessible columns in constraint definitions'         WHEN 'USER_SEGMENTS' THEN 'Storage allocated for all database segments'         WHEN 'DBA_SEGMENTS' THEN 'Storage allocated for all database segments'         WHEN 'DBA_TYPES' THEN 'Description of all types in the database'         WHEN 'ALL_TYPES' THEN 'Description of types accessible to the user'         WHEN 'USER_TYPES' THEN 'Description of the user''s own types'         WHEN 'DBA_TYPE_ATTRS' THEN 'Description of attributes of all types in the database'         WHEN 'ALL_TYPE_ATTRS' THEN 'Description of attributes of types accessible to the user'         WHEN 'USER_TYPE_ATTRS' THEN 'Description of attributes of the user''s own types'         WHEN 'DBA_COLL_TYPES' THEN 'Description of all named collection types in the database'         WHEN 'ALL_COLL_TYPES' THEN 'Description of named collection types accessible to the user'         WHEN 'USER_COLL_TYPES' THEN 'Description of the user''s own named collection types'         WHEN 'DBA_PROCEDURES' THEN 'Description of the dba functions/procedures/packages/types/triggers'         WHEN 'DBA_ARGUMENTS' THEN 'All arguments for objects in the database'         WHEN 'DBA_SOURCE' THEN 'Source of all stored objects in the database'         WHEN 'ALL_PROCEDURES' THEN 'Functions/procedures/packages/types/triggers available to the user'         WHEN 'ALL_ARGUMENTS' THEN 'Arguments in object accessible to the user'         WHEN 'ALL_SOURCE' THEN 'Current source on stored objects that user is allowed to create'         WHEN 'USER_PROCEDURES' THEN 'Description of the user functions/procedures/packages/types/triggers'         WHEN 'USER_ARGUMENTS' THEN 'Arguments in object accessible to the user'         WHEN 'USER_SOURCE' THEN 'Source of stored objects accessible to the user'         WHEN 'ALL_ALL_TABLES' THEN 'Description of all object and relational tables accessible to the user'         WHEN 'DBA_ALL_TABLES' THEN 'Description of all object and relational tables in the database'         WHEN 'USER_ALL_TABLES' THEN 'Description of all object and relational tables owned by the user''s'         WHEN 'DBA_PROFILES' THEN 'Display all profiles and their limits'         WHEN 'ALL_MVIEW_COMMENTS' THEN 'Comments on materialized views accessible to the user'         WHEN 'USER_MVIEW_COMMENTS' THEN 'Comments on materialized views owned by the user'         WHEN 'DBA_MVIEW_COMMENTS' THEN 'Comments on all materialized views in the database'         WHEN 'ALL_SCHEDULER_PROGRAM_ARGS' THEN 'All arguments of all scheduler programs visible to the user'         WHEN 'ALL_SCHEDULER_JOB_ARGS' THEN 'All arguments with set values of all scheduler jobs in the database'         WHEN 'DBA_SCHEDULER_JOB_ARGS' THEN 'All arguments with set values of all scheduler jobs in the database'         WHEN 'USER_SCHEDULER_JOB_ARGS' THEN 'All arguments with set values of all scheduler jobs in the database'         WHEN 'DBA_VIEWS' THEN 'Description of all views in the database'         WHEN 'ALL_VIEWS' THEN 'Description of views accessible to the user'         WHEN 'USER_VIEWS' THEN 'Description of the user''s own views'         WHEN 'ALL_ERRORS' THEN 'Current errors on stored objects that user is allowed to create'         WHEN 'USER_ERRORS' THEN 'Current errors on stored objects owned by the user'         WHEN 'ALL_TYPE_METHODS' THEN 'Description of methods of types accessible to the user'         WHEN 'DBA_TYPE_METHODS' THEN 'Description of methods of all types in the database'         WHEN 'USER_TYPE_METHODS' THEN 'Description of methods of the user''s own types'         WHEN 'ALL_METHOD_PARAMS' THEN 'Description of method parameters of types accessible to the user'         WHEN 'DBA_METHOD_PARAMS' THEN 'Description of method parameters of all types in the database'         WHEN 'USER_TABLESPACES' THEN 'Description of accessible tablespaces'         WHEN 'DBA_IND_EXPRESSIONS' THEN 'FUNCTIONAL INDEX EXPRESSIONs on all TABLES and CLUSTERS'         WHEN 'ALL_IND_EXPRESSIONS' THEN 'FUNCTIONAL INDEX EXPRESSIONs on accessible TABLES'         WHEN 'DBA_ROLE_PRIVS' THEN 'Roles granted to users and roles'         WHEN 'USER_ROLE_PRIVS' THEN 'Roles granted to current user'         WHEN 'DBA_TAB_PRIVS' THEN 'All grants on objects in the database'         WHEN 'ALL_TAB_PRIVS' THEN 'Grants on objects for which the user is the grantor, grantee, owner,'         WHEN 'DBA_SYS_PRIVS' THEN 'System privileges granted to users and roles'         WHEN 'USER_SYS_PRIVS' THEN 'System privileges granted to current user'         WHEN 'AUDIT_ACTIONS' THEN 'Description table for audit trail action type codes.  Maps action type numbers to action type names'         WHEN 'ALL_DEF_AUDIT_OPTS' THEN 'Auditing options for newly created objects'         WHEN 'DBA_STMT_AUDIT_OPTS' THEN 'Describes current system auditing options across the system and by user'         WHEN 'DBA_OBJ_AUDIT_OPTS' THEN 'Auditing options for all tables and views with atleast one option set'         WHEN 'DBA_AUDIT_TRAIL' THEN 'All audit trail entries'         WHEN 'USER_AUDIT_TRAIL' THEN 'Audit trail entries relevant to the user'         WHEN 'DBA_AUDIT_EXISTS' THEN 'Lists audit trail entries produced by AUDIT NOT EXISTS and AUDIT EXISTS'         WHEN 'DBA_AUDIT_STATEMENT' THEN 'Audit trail records concerning grant, revoke, audit, noaudit and alter system'         WHEN 'USER_AUDIT_STATEMENT' THEN 'Audit trail records concerning  grant, revoke, audit, noaudit and alter system'         WHEN 'DBA_AUDIT_OBJECT' THEN 'Audit trail records for statements concerning objects, specifically: table, cluster, view, index, sequence,  [public] database link, [public] synonym, procedure, trigger, rollback segment, tablespace, role, user'         WHEN 'USER_AUDIT_OBJECT' THEN 'Audit trail records for statements concerning objects, specifically: table, cluster, view, index, sequence,  [public] database link, [public] synonym, procedure, trigger, rollback segment, tablespace, role, user'         WHEN 'ALL_DEPENDENCIES' THEN 'Describes dependencies between procedures, packages,functions, package bodies, and triggers accessible to the current user,including dependencies on views created without any database links'         WHEN 'DBA_DEPENDENCIES' THEN 'Describes all dependencies in the database between procedures,packages, functions, package bodies, and triggers, including dependencies on views created without any database links'         WHEN 'USER_DEPENDENCIES' THEN 'Describes dependencies between procedures, packages, functions, package bodies, and triggers owned by the current user, including dependencies on views created without any database links'         WHEN 'GV$INSTANCE' THEN 'Synonym for GV_$INSTANCE'         WHEN 'V$INSTANCE' THEN 'Synonym for V_$INSTANCE'         WHEN 'GV$SESSION_WAIT' THEN 'Synonym for GV_$SESSION_WAIT'         WHEN 'V$SESSION_WAIT' THEN 'Synonym for V_$SESSION_WAIT'         WHEN 'GV$SESSION_WAIT_HISTORY' THEN 'Synonym for GV_$SESSION_WAIT_HISTORY'         WHEN 'V$SESSION_WAIT_HISTORY' THEN 'Synonym for V_$SESSION_WAIT_HISTORY'         WHEN 'GV$SESSTAT' THEN 'Synonym for GV_$SESSTAT'         WHEN 'V$SESSTAT' THEN 'Synonym for V_$SESSTAT'         WHEN 'GV$SYSSTAT' THEN 'Synonym for GV_$SYSSTAT'         WHEN 'V$SYSSTAT' THEN 'Synonym for V_$SYSSTAT'         WHEN 'GV$SYSTEM_EVENT' THEN 'Synonym for GV_$SYSTEM_EVENT'         WHEN 'V$SYSTEM_EVENT' THEN 'Synonym for V_$SYSTEM_EVENT'         WHEN 'NLS_SESSION_PARAMETERS' THEN 'NLS parameters of the user session'         WHEN 'NLS_DATABASE_PARAMETERS' THEN 'Permanent NLS parameters of the database'         WHEN 'V$NLS_PARAMETERS' THEN 'Synonym for V_$NLS_PARAMETERS'         WHEN 'V$VERSION' THEN 'Synonym for V_$VERSION'         WHEN 'GV$SQL_WORKAREA' THEN 'Synonym for GV_$SQL_WORKAREA'         WHEN 'V$SQL_WORKAREA' THEN 'Synonym for V_$SQL_WORKAREA'         WHEN 'GV$SQL_WORKAREA_ACTIVE' THEN 'Synonym for GV_$SQL_WORKAREA_ACTIVE'         WHEN 'V$SQL_WORKAREA_ACTIVE' THEN 'Synonym for V_$SQL_WORKAREA_ACTIVE'         WHEN 'GV$SQL_WORKAREA_HISTOGRAM' THEN 'Synonym for GV_$SQL_WORKAREA_HISTOGRAM'         WHEN 'V$SQL_WORKAREA_HISTOGRAM' THEN 'Synonym for V_$SQL_WORKAREA_HISTOGRAM'         WHEN 'DICT' THEN 'Synonym for DICTIONARY'         WHEN 'DICTIONARY' THEN 'Description of data dictionary tables and views'         WHEN 'DBA_RECYCLEBIN' THEN 'Description of the Recyclebin view accessible to the user'         WHEN 'USER_RECYCLEBIN' THEN 'User view of his recyclebin'         WHEN 'V$TENANT_PX_WORKER_STAT' THEN ''         WHEN 'GV$PS_STAT' THEN ''         WHEN 'V$PS_STAT' THEN ''         WHEN 'GV$PS_ITEM_INFO' THEN ''         WHEN 'V$PS_ITEM_INFO' THEN ''         WHEN 'GV$OB_SQL_WORKAREA_MEMORY_INFO' THEN ''         WHEN 'V$OB_SQL_WORKAREA_MEMORY_INFO' THEN ''         WHEN 'DBA_PART_KEY_COLUMNS' THEN ''         WHEN 'ALL_PART_KEY_COLUMNS' THEN ''         WHEN 'USER_PART_KEY_COLUMNS' THEN ''         WHEN 'DBA_SUBPART_KEY_COLUMNS' THEN ''         WHEN 'ALL_SUBPART_KEY_COLUMNS' THEN ''         WHEN 'USER_SUBPART_KEY_COLUMNS' THEN ''         WHEN 'ALL_TAB_PARTITIONS' THEN ''         WHEN 'ALL_TAB_SUBPARTITIONS' THEN ''         WHEN 'ALL_PART_TABLES' THEN ''         WHEN 'DBA_PART_TABLES' THEN ''         WHEN 'USER_PART_TABLES' THEN ''         WHEN 'DBA_TAB_PARTITIONS' THEN ''         WHEN 'USER_TAB_PARTITIONS' THEN ''         WHEN 'DBA_TAB_SUBPARTITIONS' THEN ''         WHEN 'USER_TAB_SUBPARTITIONS' THEN ''         WHEN 'DBA_SUBPARTITION_TEMPLATES' THEN ''         WHEN 'ALL_SUBPARTITION_TEMPLATES' THEN ''         WHEN 'USER_SUBPARTITION_TEMPLATES' THEN ''         WHEN 'DBA_PART_INDEXES' THEN ''         WHEN 'ALL_PART_INDEXES' THEN ''         WHEN 'USER_PART_INDEXES' THEN ''         WHEN 'ALL_TAB_COLS_V$' THEN ''         WHEN 'DBA_TAB_COLS_V$' THEN ''         WHEN 'USER_TAB_COLS_V$' THEN ''         WHEN 'USER_PROFILES' THEN ''         WHEN 'ALL_PROFILES' THEN ''         WHEN 'DBA_SCHEDULER_PROGRAM_ARGS' THEN ''         WHEN 'USER_SCHEDULER_PROGRAM_ARGS' THEN ''         WHEN 'USER_IND_EXPRESSIONS' THEN ''         WHEN 'DBA_ERRORS' THEN ''         WHEN 'USER_METHOD_PARAMS' THEN ''         WHEN 'DBA_TABLESPACES' THEN ''         WHEN 'ALL_IND_PARTITIONS' THEN ''         WHEN 'USER_IND_PARTITIONS' THEN ''         WHEN 'DBA_IND_PARTITIONS' THEN ''         WHEN 'DBA_IND_SUBPARTITIONS' THEN ''         WHEN 'ALL_IND_SUBPARTITIONS' THEN ''         WHEN 'USER_IND_SUBPARTITIONS' THEN ''         WHEN 'DBA_ROLES' THEN ''         WHEN 'USER_TAB_PRIVS' THEN ''         WHEN 'STMT_AUDIT_OPTION_MAP' THEN ''         WHEN 'GV$OUTLINE' THEN ''         WHEN 'GV$SQL_AUDIT' THEN ''         WHEN 'V$SQL_AUDIT' THEN ''         WHEN 'DBA_AUDIT_SESSION' THEN ''         WHEN 'USER_AUDIT_SESSION' THEN ''         WHEN 'GV$PLAN_CACHE_PLAN_STAT' THEN ''         WHEN 'V$PLAN_CACHE_PLAN_STAT' THEN ''         WHEN 'GV$PLAN_CACHE_PLAN_EXPLAIN' THEN ''         WHEN 'V$PLAN_CACHE_PLAN_EXPLAIN' THEN ''         WHEN 'GV$MEMSTORE' THEN ''         WHEN 'V$MEMSTORE' THEN ''         WHEN 'GV$MEMSTORE_INFO' THEN ''         WHEN 'V$MEMSTORE_INFO' THEN ''         WHEN 'GV$MEMORY' THEN ''         WHEN 'V$MEMORY' THEN ''         WHEN 'GV$SERVER_MEMSTORE' THEN ''         WHEN 'GV$TENANT_MEMSTORE_ALLOCATOR_INFO' THEN ''         WHEN 'V$TENANT_MEMSTORE_ALLOCATOR_INFO' THEN ''         WHEN 'GV$PLAN_CACHE_STAT' THEN ''         WHEN 'V$PLAN_CACHE_STAT' THEN ''         WHEN 'GV$CONCURRENT_LIMIT_SQL' THEN ''         WHEN 'NLS_INSTANCE_PARAMETERS' THEN ''         WHEN 'GV$TENANT_PX_WORKER_STAT' THEN ''         ELSE NULL END AS VARCHAR2(4000)) AS COMMENTS     FROM SYS.ALL_VIRTUAL_TABLE_SYS_AGENT     WHERE BITAND(TABLE_ID,  1099511627775) > 25000         AND BITAND(TABLE_ID, 1099511627775) <= 30000         AND TABLE_TYPE = 1 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DICT	     SELECT * FROM SYS.DICTIONARY 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_VIEWS	   SELECT CAST('SYS' AS VARCHAR2(128)) OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) VIEW_NAME,       CAST(LENGTH(VIEW_DEFINITION) AS NUMBER) TEXT_LENGTH,       TO_CLOB(VIEW_DEFINITION) TEXT,       CAST(NULL AS NUMBER) OID_TEXT_LENGTH,       CAST(NULL AS VARCHAR2(4000)) OID_TEXT,       CAST(NULL AS VARCHAR2(30)) VIEW_TYPE,       CAST(NULL AS VARCHAR2(30)) SUPERVIEW_NAME,       CAST(NULL AS VARCHAR2(1)) EDITIONING_VIEW,       CAST(NULL AS VARCHAR2(1)) READ_ONLY  FROM SYS.ALL_VIRTUAL_TABLE_SYS_AGENT  WHERE BITAND(TABLE_ID,  1099511627775) > 25000      AND BITAND(TABLE_ID, 1099511627775) <= 28000      AND TABLE_TYPE = 1  UNION ALL  SELECT CAST(B.DATABASE_NAME AS VARCHAR2(128)) OWNER,         CAST(A.TABLE_NAME AS VARCHAR2(128)) VIEW_NAME,         CAST(LENGTH(A.VIEW_DEFINITION) AS NUMBER) TEXT_LENGTH,         TO_CLOB(VIEW_DEFINITION) TEXT,         CAST(NULL AS NUMBER) OID_TEXT_LENGTH,         CAST(NULL AS VARCHAR2(4000)) OID_TEXT,         CAST(NULL AS VARCHAR2(30)) VIEW_TYPE,         CAST(NULL AS VARCHAR2(30)) SUPERVIEW_NAME,         CAST(NULL AS VARCHAR2(1)) EDITIONING_VIEW,         CAST(NULL AS VARCHAR2(1)) READ_ONLY  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B  WHERE A.TABLE_TYPE = 4        AND A.DATABASE_ID = B.DATABASE_ID        AND A.TENANT_ID = EFFECTIVE_TENANT_ID()        AND B.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_USERS	     SELECT       A.DATABASE_NAME AS USERNAME,       A.DATABASE_ID AS USERID,       B.PASSWD AS PASSWORD,       CAST(NULL as VARCHAR2(30)) AS ACCOUNT_STATUS,       CAST(NULL as DATE) AS LOCK_DATE,       CAST(NULL as DATE) AS EXPIRY_DATE,       CAST(NULL as VARCHAR2(30)) AS DEFAULT_TABLESPACE,       CAST(NULL as VARCHAR2(30)) AS TEMPORARY_TABLESPACE,       CAST(A.GMT_CREATE AS DATE) AS CREATED,       CAST(NULL as VARCHAR2(30)) AS INITIAL_RSRC_CONSUMER_GROUP,       CAST(NULL as VARCHAR2(4000)) AS EXTERNAL_NAME     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A,       SYS.ALL_VIRTUAL_USER_REAL_AGENT B     WHERE       A.DATABASE_NAME = B.USER_NAME       AND A.TENANT_ID = B.TENANT_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TYPE_METHODS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(6)) AS METHOD_TYPE,   CAST(NULL AS NUMBER) AS PARAMETERS,   CAST(NULL AS NUMBER) AS RESULTS,   CAST(NULL AS VARCHAR2(3)) AS FINAL,   CAST(NULL AS VARCHAR2(3)) AS INSTANTIABLE,   CAST(NULL AS VARCHAR2(3)) AS OVERRIDING,   CAST(NULL AS VARCHAR2(3)) AS INHERITED FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TYPE_ATTRS	     SELECT /*+ USE_MERGE(T, A, D, T1, D1) */       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       A.NAME AS ATTR_NAME,       CAST(NULL AS VARCHAR2(7)) AS ATTR_TYPE_MOD,       CAST(         CASE A.PROPERTIES         WHEN 3 THEN NULL         ELSE D1.DATABASE_NAME END AS VARCHAR2(128)) AS ATTR_TYPE_OWNER,       CAST(         CASE A.PROPERTIES         WHEN 3           THEN DECODE (BITAND(A.TYPE_ATTR_ID,1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(A.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(A.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(A.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, '',             46, DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ATTR_TYPE_NAME,       A.LENGTH AS LENGTH,       A.NUMBER_PRECISION AS NUMBER_PRECISION,       A.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       A.ATTRIBUTE AS ATTR_NO,       CAST('NO' AS CHAR(2)) AS INHERITED,       CAST('C' AS CHAR(1)) AS CHAR_USED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_TYPE_ATTR_REAL_AGENT A         ON T.TYPE_ID = A.TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')           AND t.database_id = d.database_id           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = A.TYPE_ATTR_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT /*+ USE_MERGE(TS, TAS, TS1) */       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       TAS.NAME AS ATTR_NAME,       CAST(NULL AS VARCHAR2(7)) AS ATTR_TYPE_MOD,       CAST(         CASE TAS.PROPERTIES         WHEN 3 THEN NULL         ELSE 'SYS' END AS VARCHAR2(128)) AS ATTR_TYPE_OWNER,       CAST(         CASE TAS.PROPERTIES         WHEN 3           THEN DECODE (BITAND(TAS.TYPE_ATTR_ID,1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(TAS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(TAS.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(TAS.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(TAS.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, '',             46, DECODE(TAS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE TS1.TYPE_NAME END AS VARCHAR2(324)) AS ATTR_TYPE_NAME,       TAS.LENGTH AS LENGTH,       TAS.NUMBER_PRECISION AS NUMBER_PRECISION,       TAS.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       TAS.ATTRIBUTE AS ATTR_NO,       CAST('NO' AS CHAR(2)) AS INHERITED,       CAST('C' AS CHAR(1)) AS CHAR_USED     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS JOIN SYS.ALL_VIRTUAL_TYPE_ATTR_SYS_AGENT TAS         ON TS.TYPE_ID = TAS.TYPE_ID       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS1         ON TS1.TYPE_ID = TAS.TYPE_ATTR_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TYPES	     SELECT       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       T.TYPE_ID AS TYPE_OID,       CAST(         CASE T.TYPECODE         WHEN 1 THEN 'COLLECTION'         WHEN 2 THEN 'OBJECT' END AS VARCHAR2(10)) AS TYPECODE,       T.ATTRIBUTES AS ATTRIBUTES,       T.METHODS AS METHODS,       CAST('NO' AS CHAR(2)) AS PREDEFINED,       CAST('NO' AS CHAR(2)) AS INCOMPLETE,       CAST('YES' AS CHAR(3)) AS FINAL,       CAST('YES' AS CHAR(3)) AS INSTANTIABLE,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_OWNER,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_NAME,       T.LOCAL_ATTRS AS LOCAL_ATTRIBUTES,       T.LOCAL_METHODS AS LOCAL_METHODS,       T.TYPE_ID AS TYPEID     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON D.DATABASE_ID = T.DATABASE_ID         AND T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       TS.TYPE_ID AS TYPE_OID,       CAST(         CASE TS.TYPECODE         WHEN 1 THEN 'COLLECTION'         WHEN 2 THEN 'OBJECT' END AS VARCHAR2(10)) AS TYPECODE,       TS.ATTRIBUTES AS ATTRIBUTES,       TS.METHODS AS METHODS,       CAST('NO' AS CHAR(2)) AS PREDEFINED,       CAST('NO' AS CHAR(2)) AS INCOMPLETE,       CAST('YES' AS CHAR(3)) AS FINAL,       CAST('YES' AS CHAR(3)) AS INSTANTIABLE,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_OWNER,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_NAME,       TS.LOCAL_ATTRS AS LOCAL_ATTRIBUTES,       TS.LOCAL_METHODS AS LOCAL_METHODS,       TS.TYPE_ID AS TYPEID     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TRIGGERS	 SELECT * FROM ALL_TRIGGERS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_SUBPARTITIONS	SELECT CAST(DB_TB.DATABASE_NAME AS VARCHAR2(128)) TABLE_OWNER,      CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(PART.PART_NAME AS VARCHAR2(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NAME AS VARCHAR2(128))  SUBPARTITION_NAME,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.SUB_PART_ID + 1 AS NUMBER) SUBPARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(3)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID        AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()) DB_TB      JOIN      (SELECT P_PART.PART_NAME,              P_PART.SUB_PART_NUM,              P_PART.TABLE_ID,              S_PART.SUB_PART_NAME,              S_PART.HIGH_BOUND_VAL,              S_PART.LIST_VAL,              S_PART.COMPRESS_FUNC_NAME,              S_PART.SUB_PART_ID,              S_PART.TABLESPACE_ID        FROM SYS.ALL_VIRTUAL_PART_REAL_AGENT P_PART,            SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT S_PART       WHERE P_PART.PART_ID = S_PART.PART_ID AND             P_PART.TABLE_ID = S_PART.TABLE_ID              AND P_PART.TENANT_ID = EFFECTIVE_TENANT_ID()              AND S_PART.TENANT_ID = EFFECTIVE_TENANT_ID()) PART      ON      DB_TB.TABLE_ID = PART.TABLE_ID      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID      AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_PRIVS	     SELECT C.USER_NAME AS GRANTEE,        E.DATABASE_NAME AS OWNER,        CAST (DECODE(A.OBJTYPE,11, SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')),                         D.TABLE_NAME) AS VARCHAR(128)) AS TABLE_NAME,        B.USER_NAME AS GRANTOR,        CAST (DECODE(A.PRIV_ID, 1, 'ALTER',                          2, 'AUDIT',                          3, 'COMMENT',                          4, 'DELETE',                          5, 'GRANT',                          6, 'INDEX',                          7, 'INSERT',                          8, 'LOCK',                          9, 'RENAME',                          10, 'SELECT',                          11, 'UPDATE',                          12, 'REFERENCES',                          13, 'EXECUTE',                          14, 'CREATE',                          15, 'FLASHBACK',                          16, 'READ',                          17, 'WRITE',                          'OTHERS') AS VARCHAR(40)) AS PRIVILEGE,        DECODE(A.PRIV_OPTION,0,'NO', 1,'YES','') AS GRANTABLE,        CAST('NO' AS VARCHAR(10)) AS  HIERARCHY       FROM SYS.ALL_VIRTUAL_TENANT_OBJAUTH_REAL_AGENT A ,               SYS.ALL_VIRTUAL_USER_REAL_AGENT B,               SYS.ALL_VIRTUAL_USER_REAL_AGENT C,               (SELECT TABLE_ID, TABLE_NAME, DATABASE_ID                  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT                  WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT PACKAGE_ID AS TABLE_ID, PACKAGE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT                   WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT ROUTINE_ID AS TABLE_ID, ROUTINE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT                   WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT SEQUENCE_ID AS TABLE_ID, SEQUENCE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT                   WHERE TENANT_ID = EFFECTIVE_TENANT_ID()               ) D,               SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E       WHERE A.GRANTOR_ID = B.USER_ID         AND A.GRANTEE_ID = C.USER_ID         AND A.COL_ID = 65535         AND A.OBJ_ID = D.TABLE_ID         AND  D.DATABASE_ID=E.DATABASE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.DATABASE_NAME != '__recyclebin' 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_PARTITIONS	SELECT CAST(DB_TB.DATABASE_NAME AS VARCHAR2(128)) TABLE_OWNER,      CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE WHEN      PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) COMPOSITE,      CAST(PART.PART_NAME AS VARCHAR(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NUM AS NUMBER)  SUBPARTITION_COUNT,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.PART_ID + 1 AS NUMBER) PARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(30)) PARENT_TABLE_PARTITION,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(4)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID         AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()) DB_TB      JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART      ON   DB_TB.TABLE_ID = PART.TABLE_ID      AND PART.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID       AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_COMMENTS	     SELECT       A.DATABASE_NAME AS OWNER,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN TABLE_TYPE = 0 OR TABLE_TYPE = 2 OR TABLE_TYPE = 3 OR TABLE_TYPE = 5 OR TABLE_TYPE = 8 OR TABLE_TYPE = 9 THEN   'TABLE' WHEN TABLE_TYPE = 1 OR TABLE_TYPE = 4 OR TABLE_TYPE = 7 THEN 'VIEW' ELSE NULL END AS VARCHAR2(11)) AS TABLE_TYPE,       CAST(B."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B     ON A.DATABASE_ID = B.DATABASE_ID     AND A.TENANT_ID = EFFECTIVE_TENANT_ID()     AND B.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_COLUMNS	 select   OWNER, TABLE_NAME,   COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM from SYS.DBA_TAB_COLS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_COLS_V$	 SELECT   cast(db.database_name as VARCHAR2(128)) as OWNER,   cast(t.table_name as VARCHAR2(128)) as  TABLE_NAME,   cast(c.column_name as VARCHAR2(128)) as  COLUMN_NAME,   cast(decode(c.data_type,         0, 'NULL',          1, 'NUMBER',         2, 'NUMBER',         3, 'NUMBER',         4, 'NUMBER',         5, 'NUMBER',          6, 'NUMBER',         7, 'NUMBER',         8, 'NUMBER',         9, 'NUMBER',         10, 'NUMBER',          11, 'BINARY_FLOAT',         12, 'BINARY_DOUBLE',          13, 'NUMBER',         14, 'NUMBER',          15, 'NUMBER',         16, 'NUMBER',          17, 'DATE',         18, 'TIMESTAMP',         19, 'DATE',         20, 'TIME',         21, 'YEAR',          22, 'VARCHAR2',         23, 'CHAR',         24, 'HEX_STRING',          25, 'EXT',         26, 'UNKNOWN',          27, 'TINYTEXT',         28, 'TEXT',         29, 'MEDIUMTEXT',         30, decode(c.collation_type, 63, 'BLOB', 'CLOB'),         31, 'BIT',         32, 'ENUM',         33, 'SET',         34, 'ENUM_INNER',         35, 'SET_INNER',         36, concat('TIMESTAMP(', concat(c.data_scale, ') WITH TIME ZONE')),         37, concat('TIMESTAMP(', concat(c.data_scale, ') WITH LOCAL TIME ZONE')),         38, concat('TIMESTAMP(', concat(c.data_scale, ')')),         39, 'RAW',         40, concat('INTERVAL YEAR(', concat(c.data_scale, ') TO MONTH')),         41, concat('INTERVAL DAY(', concat(trunc(c.data_scale/10), concat(') TO SECOND(', concat(mod(c.data_scale, 10), ')')))),         42, 'FLOAT',         43, 'NVARCHAR2',         44, 'NCHAR',         45, '',         'UNDEFINED') as VARCHAR2(128)) as  DATA_TYPE,   cast(NULL as VARCHAR2(3)) as  DATA_TYPE_MOD,   cast(NULL as VARCHAR2(128)) as  DATA_TYPE_OWNER,   cast(c.data_length as NUMBER) as  DATA_LENGTH,   cast(CASE WHEN c.data_type in (11,12,17,18,19,22,23,27,28,29,30,36,37,38,43,44)             THEN NULL             ELSE CASE WHEN c.data_precision < 0 THEN NULL ELSE c.data_precision END        END as NUMBER) as  DATA_PRECISION,   cast(CASE WHEN c.data_type in (11,12,17,19,22,23,27,28,29,30,42,43,44)             THEN NULL             ELSE CASE WHEN c.data_scale < -84 THEN NULL ELSE c.data_scale END        END as NUMBER) as  DATA_SCALE,   cast(decode(c.nullable, 1, 'Y', 'N') as VARCHAR2(1)) as  NULLABLE,   cast(decode(BITAND(c.column_flags, 64), 0, c.column_id, NULL) as NUMBER) as  COLUMN_ID,   cast(LENGTHB(c.cur_default_value_v2) as NUMBER) as  DEFAULT_LENGTH,   cast(c.cur_default_value_v2 as /* TODO: LONG() */ VARCHAR(128)) as  DATA_DEFAULT,   cast(NULL as NUMBER) as  NUM_DISTINCT,   cast(NULL as /* TODO: RAW */ varchar(128)) as  LOW_VALUE,   cast(NULL as /* TODO: RAW */ varchar(128)) as  HIGH_VALUE,   cast(NULL as NUMBER) as  DENSITY,   cast(NULL as NUMBER) as  NUM_NULLS,   cast(NULL as NUMBER) as  NUM_BUCKETS,   cast(NULL as DATE) as  LAST_ANALYZED,   cast(NULL as NUMBER) as  SAMPLE_SIZE,   cast(NULL as VARCHAR2(44)) as  CHARACTER_SET_NAME,   cast(NULL as NUMBER) as  CHAR_COL_DECL_LENGTH,   cast(NULL as VARCHAR2(3)) as  GLOBAL_STATS,   cast(NULL as VARCHAR2(3)) as  USER_STATS,   cast(NULL as VARCHAR2(80)) as  NOTES,   cast(NULL as NUMBER) as  AVG_COL_LEN,   cast(decode(c.data_type,          22, c.data_length,          23, c.data_length,          0) as NUMBER) as  CHAR_LENGTH,   cast(decode(c.data_type,          22, decode(c.data_precision, 1, 'C', 'B'),          23, decode(c.data_precision, 1, 'C', 'B'),          NULL) as VARCHAR2(1)) as  CHAR_USED,   cast(NULL as VARCHAR2(3)) as  V80_FMT_IMAGE,   cast(NULL as VARCHAR2(3)) as  DATA_UPGRADED,   cast(decode(BITAND(c.column_flags, 64), 0, 'NO', 'YES') as VARCHAR2(3)) as HIDDEN_COLUMN,   cast(decode(BITAND(c.column_flags, 1), 1, 'YES', 'NO') as VARCHAR2(3)) as  VIRTUAL_COLUMN,   cast(NULL as NUMBER) as  SEGMENT_COLUMN_ID,   cast(NULL as NUMBER) as  INTERNAL_COLUMN_ID,   cast(NULL as VARCHAR2(15)) as  HISTOGRAM,   cast(c.column_name as VARCHAR2(4000)) as  QUALIFIED_COL_NAME,   cast('YES' as VARCHAR2(3)) as  USER_GENERATED,   cast(NULL as VARCHAR2(3)) as  DEFAULT_ON_NULL,   cast(NULL as VARCHAR2(3)) as  IDENTITY_COLUMN,   cast(NULL as VARCHAR2(128)) as  EVALUATION_EDITION,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEFORE,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEGINNING,   cast(NULL as VARCHAR2(100)) as  COLLATION,   cast(NULL as NUMBER) as  COLLATED_COLUMN_ID FROM     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t   JOIN     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db     ON db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()   JOIN     sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c     ON c.tenant_id = t.tenant_id     AND c.table_id = t.table_id     AND C.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE   c.is_hidden = 0   AND t.table_type in (0,2,3,8,9) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TAB_COLS	 select   OWNER, TABLE_NAME,   COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS,   USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HIDDEN_COLUMN, VIRTUAL_COLUMN,   SEGMENT_COLUMN_ID, INTERNAL_COLUMN_ID, HISTOGRAM, QUALIFIED_COL_NAME from SYS.dba_tab_cols_v$ 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TABLESPACES	SELECT       TABLESPACE_NAME,       CAST(NULL AS NUMBER) BLOCK_SIZE,       CAST(NULL AS NUMBER) INITIAL_EXTENT,       CAST(NULL AS NUMBER) NEXT_EXTENT,       CAST(NULL AS NUMBER) MIN_EXTENT,       CAST(NULL AS NUMBER) MAX_EXTENT,       CAST(NULL AS NUMBER) MAX_SIZE,       CAST(NULL AS NUMBER) PCT_INCREASE,       CAST(NULL AS NUMBER) MIN_EXTLEN,       CAST(NULL AS VARCHAR2(9)) STATUS,       CAST(NULL AS VARCHAR2(9)) CONTENTS,       CAST(NULL AS VARCHAR2(9)) LOGGING,       CAST(NULL AS VARCHAR2(3)) FORCE_LOGGING,       CAST(NULL AS VARCHAR2(10)) EXTENT_MANAGEMENT,       CAST(NULL AS VARCHAR2(9)) ALLOCATION_TYPE,       CAST(NULL AS VARCHAR2(3)) PLUGGED_IN,       CAST(NULL AS VARCHAR2(6)) SEGMENT_SPACE_MANAGEMENT,       CAST(NULL AS VARCHAR2(8)) DEF_TAB_COMPRESSION,       CAST(NULL AS VARCHAR2(11)) RETENTION,       CAST(NULL AS VARCHAR2(3)) BIGFILE,       CAST(NULL AS VARCHAR2(7)) PREDICATE_EVALUATION,       CAST(NULL AS VARCHAR2(3)) ENCRYPTED,       CAST(NULL AS VARCHAR2(12)) COMPRESS_FOR       FROM       SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT       WHERE TENANT_ID = EFFECTIVE_TENANT_ID()       	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_TABLES	 SELECT   CAST(db.database_name AS VARCHAR2(128)) AS OWNER,   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(tp.tablespace_name AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(128)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(128)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST('NO' AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id   JOIN     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db   ON     db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND db.database_name != '__recyclebin'     AND t.table_type in (3, 8, 9, 11)     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()   LEFT JOIN     sys.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT tp   ON     tp.tablespace_id = t.tablespace_id     AND t.tenant_id = tp.tenant_id     AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()   WHERE t.session_id = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SYS_PRIVS		NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SYNONYMS	     SELECT       CASE WHEN       A.DATABASE_NAME = '__public' THEN       'PUBLIC' ELSE A.DATABASE_NAME END AS OWNER,       A.SYNONYM_NAME AS SYNONYM_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN B.DATABASE_NAME            ELSE SUBSTR(A.OBJECT_NAME, 1, INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN A.OBJECT_NAME            ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '.') + 1, INSTR(A.OBJECT_NAME, '@') - INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0                 THEN NULL                 ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '@')+1)                 END                 AS VARCHAR2(128)) AS DB_LINK     FROM       (SELECT BB.DATABASE_NAME, AA.SYNONYM_NAME,       AA.OBJECT_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT BB       WHERE AA.DATABASE_ID = BB.DATABASE_ID         AND AA.TENANT_ID = EFFECTIVE_TENANT_ID()         AND BB.TENANT_ID = EFFECTIVE_TENANT_ID()) A,       (SELECT BB.DATABASE_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT BB       WHERE AA.OBJECT_DATABASE_ID = BB.DATABASE_ID         AND AA.TENANT_ID = EFFECTIVE_TENANT_ID()         AND BB.TENANT_ID = EFFECTIVE_TENANT_ID()) B     WHERE       A.SYNONYM_ID = B.SYNONYM_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SUBPART_KEY_COLUMNS	     SELECT  D.DATABASE_NAME AS OWNER,             CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SUBPARTITION_TEMPLATES	SELECT       CAST(DB.DATABASE_NAME AS VARCHAR2(128)) USER_NAME,       TB.TABLE_NAME AS TABLE_NAME,       SP.SUB_PART_NAME AS SUBPARTITION_NAME,       SP.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,       TP.TABLESPACE_NAME AS TABLESPACE_NAME,       CAST(CASE WHEN SP.HIGH_BOUND_VAL is NULL THEN SP.LIST_VAL ELSE SP.HIGH_BOUND_VAL END AS VARCHAR2(1024)) HIGH_BOUND       FROM (SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB join SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB             on DB.database_id = TB.database_id               AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()               AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()             join SYS.ALL_VIRTUAL_DEF_SUB_PART_REAL_AGENT SP on tb.table_id = sp.table_id                 AND SP.TENANT_ID = EFFECTIVE_TENANT_ID())             left join SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP               ON TP.TABLESPACE_ID = SP.TABLESPACE_ID               AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()       	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SOURCE	     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(P.PACKAGE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE P.TYPE WHEN 1 THEN 'PACKAGE' WHEN 2 THEN 'PACKAGE BODY' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(P.SOURCE) AS TEXT,       P.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) P       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON P.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON P.OWNER_ID = U.USER_ID           AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = P.TENANT_ID OR P.TENANT_ID = 1) AND D.IN_RECYCLEBIN = 0     UNION ALL     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(R.ROUTINE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(R.ROUTINE_BODY) AS TEXT,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID           AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1) AND D.IN_RECYCLEBIN = 0 AND R.PACKAGE_ID = -1     UNION ALL     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(T.TRIGGER_NAME AS VARCHAR2(30)) AS NAME,       CAST('TRIGGER' AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(T.TRIGGER_BODY) AS TEXT,       T.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) T       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON T.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON T.OWNER_ID = U.USER_ID           AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = T.TENANT_ID OR T.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(PS.PACKAGE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE PS.TYPE WHEN 1 THEN 'PACKAGE' WHEN 2 THEN 'PACKAGE BODY' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(PS.SOURCE) AS TEXT,       PS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(RS.ROUTINE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE RS.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(RS.ROUTINE_BODY) AS TEXT,       RS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS WHERE RS.ROUTINE_TYPE != 3     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(TS.TRIGGER_NAME AS VARCHAR2(30)) AS NAME,       CAST('TRIGGER' AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(TS.TRIGGER_BODY) AS TEXT,       TS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_TENANT_TRIGGER_SYS_AGENT TS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SEQUENCES	     SELECT        C.DATABASE_NAME AS SEQUENCE_OWNER       ,A.SEQUENCE_NAME AS SEQUENCE_NAME       ,A.MIN_VALUE AS MIN_VALUE       ,A.MAX_VALUE AS MAX_VALUE       ,A.INCREMENT_BY AS INCREMENT_BY       ,CASE A.CYCLE_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS CYCLE_FLAG       ,CASE A.ORDER_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS ORDER_FLAG       ,A.CACHE_SIZE AS CACHE_SIZE       ,CAST(COALESCE(B.NEXT_VALUE,A.START_WITH) AS NUMBER(38,0)) AS LAST_NUMBER     FROM        SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT A     INNER JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     ON A.DATABASE_ID = C.DATABASE_ID AND A.TENANT_ID = C.TENANT_ID       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN       SYS.ALL_VIRTUAL_SEQUENCE_VALUE_REAL_AGENT B     ON B.SEQUENCE_ID = A.SEQUENCE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SEGMENTS	     SELECT       B.DATABASE_NAME OWNER       ,CAST(A.SEGMENT_NAME AS VARCHAR2(128)) AS SEGMENT_NAME       ,CAST(A.PARTITION_NAME AS VARCHAR2(128)) AS PARTITION_NAME       ,CAST(A.SEGMENT_TYPE AS VARCHAR2(18)) AS SEGMENT_TYPE       ,CAST(NULL AS VARCHAR2(10)) AS SEGMENT_SUBTYPE       ,CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME       ,CAST(NULL AS NUMBER) AS HEADER_FILE       ,CAST(NULL AS NUMBER) AS HEADER_BLOCK       ,A.DATA_SIZE AS BYTES       ,A.BLOCK_SIZE AS BLOCKS       ,CAST(NULL AS NUMBER) AS EXTENTS       ,CAST(NULL AS NUMBER) AS INITIAL_EXTENT       ,CAST(NULL AS NUMBER) AS NEXT_EXTENT       ,CAST(NULL AS NUMBER) AS MIN_EXTENTS       ,CAST(NULL AS NUMBER) AS MAX_EXTENTS       ,CAST(NULL AS NUMBER) AS MAX_SIZE       ,CAST(NULL AS VARCHAR(7)) AS RETENTION       ,CAST(NULL AS NUMBER) AS MINRETENTION       ,CAST(NULL AS NUMBER) AS PCT_INCREASE       ,CAST(NULL AS NUMBER) AS FREELISTS       ,CAST(NULL AS NUMBER) AS FREELIST_GROUPS       ,CAST(NULL AS NUMBER) AS RELATIVE_FNO       ,CAST('DEFAULT' AS VARCHAR2(7)) AS BUFFER_POOL       ,CAST('DEFAULT' AS VARCHAR2(7)) AS FLASH_CACHE       ,CAST('DEFAULT' AS VARCHAR2(7)) AS CELL_FLASH_CACHE       FROM (       SELECT       T.TABLE_ID       ,T.DATABASE_ID       ,T.TABLE_NAME SEGMENT_NAME       ,NULL PARTITION_NAME       ,CASE WHEN T.TABLE_TYPE IN (0,2,3,6,8,9,10) THEN 'TABLE'           WHEN T.TABLE_TYPE IN (1,4) THEN 'VIEW'           WHEN T.TABLE_TYPE IN (5) THEN 'INDEX'           WHEN T.TABLE_TYPE IN (7) THEN 'MATERIALIZED VIEW'           ELSE NULL END AS SEGMENT_TYPE       ,T.BLOCK_SIZE       ,MT.DATA_SIZE       FROM       SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT MT       ON T.TABLE_ID = MT.TABLE_ID WHERE T.PART_LEVEL=0 AND MT.ROLE = 1       AND T.TENANT_ID = EFFECTIVE_TENANT_ID()       AND MT.TENANT_ID = EFFECTIVE_TENANT_ID()       UNION ALL       SELECT           T.TABLE_ID           ,T.DATABASE_ID           ,T.TABLE_NAME SEGMENT_NAME           ,P.PART_NAME PARTITION_NAME           ,'TABLE PARTITION' AS SEGMENT_TYPE           ,T.BLOCK_SIZE           ,MT.DATA_SIZE           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID = P.TABLE_ID             AND T.TENANT_ID = EFFECTIVE_TENANT_ID()             AND P.TENANT_ID = EFFECTIVE_TENANT_ID()           JOIN SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT MT           ON T.TABLE_ID = MT.TABLE_ID AND P.PART_ID = MT.PARTITION_ID WHERE T.PART_LEVEL=1 AND MT.ROLE = 1           AND MT.TENANT_ID = EFFECTIVE_TENANT_ID()       UNION ALL       SELECT           T.TABLE_ID           ,T.DATABASE_ID           ,T.TABLE_NAME SEGMENT_NAME           ,SUBP.SUB_PART_NAME PARTITION_NAME           ,'TABLE SUBPARTITION' AS OBJECT_TYPE           ,T.BLOCK_SIZE           ,MT.DATA_SIZE           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID =P.TABLE_ID JOIN SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUBP           ON P.TABLE_ID=SUBP.TABLE_ID AND P.PART_ID =SUBP.PART_ID           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND P.TENANT_ID = EFFECTIVE_TENANT_ID()           AND SUBP.TENANT_ID = EFFECTIVE_TENANT_ID()           JOIN (SELECT A.PARTITION_ID,A.TABLE_ID,A.DATA_SIZE,A.PART_ID,PARTITION_ID - 1152921504606846976 - PART_ID *4294967296 - 268435456 AS SUB_PART_ID FROM           (SELECT A.PARTITION_ID,A.TABLE_ID,A.DATA_SIZE,FLOOR((PARTITION_ID - 1152921504606846976 - 268435456)/4294967296) AS PART_ID FROM SYS.ALL_VIRTUAL_TENANT_META_TABLE_REAL_AGENT A               WHERE A.PARTITION_ID != 0 AND A.ROLE = 1 AND A.TENANT_ID = EFFECTIVE_TENANT_ID())A) MT           ON SUBP.TABLE_ID = MT.TABLE_ID AND SUBP.PART_ID = MT.PART_ID AND SUBP.SUB_PART_ID=MT.SUB_PART_ID WHERE T.PART_LEVEL=2     ) A JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B       ON A.DATABASE_ID = B.DATABASE_ID       AND B.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SCHEDULER_PROGRAM_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS PROGRAM_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(19)) AS METADATA_ATTRIBUTE,   CAST(NULL AS VARCHAR2(4000)) AS DEFAULT_VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_SCHEDULER_JOB_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS JOB_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(4000)) AS VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_RSRC_PLAN_DIRECTIVES	     SELECT /*+ READ_CONSISTENCY(WEAK) */       PLAN,       GROUP_OR_SUBPLAN,       CAST(NULL AS VARCHAR2(14)) AS TYPE,       CAST(NULL AS NUMBER) AS CPU_P1,       CAST(NULL AS NUMBER) AS CPU_P2,       CAST(NULL AS NUMBER) AS CPU_P3,       CAST(NULL AS NUMBER) AS CPU_P4,       CAST(NULL AS NUMBER) AS CPU_P5,       CAST(NULL AS NUMBER) AS CPU_P6,       CAST(NULL AS NUMBER) AS CPU_P7,       CAST(NULL AS NUMBER) AS CPU_P8,       MGMT_P1,       CAST(NULL AS NUMBER) AS MGMT_P2,       CAST(NULL AS NUMBER) AS MGMT_P3,       CAST(NULL AS NUMBER) AS MGMT_P4,       CAST(NULL AS NUMBER) AS MGMT_P5,       CAST(NULL AS NUMBER) AS MGMT_P6,       CAST(NULL AS NUMBER) AS MGMT_P7,       CAST(NULL AS NUMBER) AS MGMT_P8,       CAST(NULL AS NUMBER) AS ACTIVE_SESS_POOL_P1,       CAST(NULL AS NUMBER) AS QUEUEING_P1,       CAST(NULL AS NUMBER) AS PARALLEL_TARGET_PERCENTAGE,       CAST(NULL AS NUMBER) AS PARALLEL_DEGREE_LIMIT_P1,       CAST(NULL AS VARCHAR2(128)) AS SWITCH_GROUP,       CAST(NULL AS VARCHAR2(5)) AS SWITCH_FOR_CALL,       CAST(NULL AS NUMBER) AS SWITCH_TIME,       CAST(NULL AS NUMBER) AS SWITCH_IO_MEGABYTES,       CAST(NULL AS NUMBER) AS SWITCH_IO_REQS,       CAST(NULL AS VARCHAR2(5)) AS SWITCH_ESTIMATE,       CAST(NULL AS NUMBER) AS MAX_EST_EXEC_TIME,       CAST(NULL AS NUMBER) AS UNDO_POOL,       CAST(NULL AS NUMBER) AS MAX_IDLE_TIME,       CAST(NULL AS NUMBER) AS MAX_IDLE_BLOCKER_TIME,       CAST(NULL AS NUMBER) AS MAX_UTILIZATION_LIMIT,       CAST(NULL AS NUMBER) AS PARALLEL_QUEUE_TIMEOUT,       CAST(NULL AS NUMBER) AS SWITCH_TIME_IN_CALL,       CAST(NULL AS NUMBER) AS SWITCH_IO_LOGICAL,       CAST(NULL AS NUMBER) AS SWITCH_ELAPSED_TIME,       CAST(NULL AS NUMBER) AS PARALLEL_SERVER_LIMIT,       UTILIZATION_LIMIT,       CAST(NULL AS VARCHAR2(12)) AS PARALLEL_STMT_CRITICAL,       CAST(NULL AS NUMBER) AS SESSION_PGA_LIMIT,       CAST(NULL AS VARCHAR2(6)) AS PQ_TIMEOUT_ACTION,       COMMENTS,       CAST(NULL AS VARCHAR2(128)) AS STATUS,       CAST('YES' AS VARCHAR2(3)) AS MANDATORY     FROM        SYS.ALL_VIRTUAL_RES_MGR_DIRECTIVE_REAL_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_RSRC_PLANS	     SELECT /*+ READ_CONSISTENCY(WEAK) */       CAST(NULL AS NUMBER) AS PLAN_ID,       PLAN,       CAST(NULL AS NUMBER) AS NUM_PLAN_DIRECTIVES,       CAST(NULL AS VARCHAR2(128)) AS CPU_METHOD,       CAST(NULL AS VARCHAR2(128)) AS MGMT_METHOD,       CAST(NULL AS VARCHAR2(128)) AS ACTIVE_SESS_POOL_MTH,       CAST(NULL AS VARCHAR2(128)) AS PARALLEL_DEGREE_LIMIT_MTH,       CAST(NULL AS VARCHAR2(128)) AS QUEUING_MTH,       CAST(NULL AS VARCHAR2(3)) AS SUB_PLAN,       COMMENTS,       CAST(NULL AS VARCHAR2(128)) AS STATUS,       CAST(NULL AS VARCHAR2(3)) AS MANDATORY     FROM        SYS.ALL_VIRTUAL_RES_MGR_PLAN_REAL_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_RSRC_GROUP_MAPPINGS	     SELECT /*+ READ_CONSISTENCY(WEAK) */       ATTRIBUTE,       VALUE,       CONSUMER_GROUP,       CAST(NULL AS VARCHAR2(128)) AS STATUS     FROM        SYS.ALL_VIRTUAL_RES_MGR_MAPPING_RULE_REAL_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_RSRC_CONSUMER_GROUPS	     SELECT /*+ READ_CONSISTENCY(WEAK) */       CONSUMER_GROUP_ID,       CONSUMER_GROUP,       CAST(NULL AS VARCHAR2(128)) AS CPU_METHOD,       CAST(NULL AS VARCHAR2(128)) AS MGMT_METHOD,       CAST(NULL AS VARCHAR2(3)) AS INTERNAL_USE,       COMMENTS,       CAST(NULL AS VARCHAR2(128)) AS CATEGORY,       CAST(NULL AS VARCHAR2(128)) AS STATUS,       CAST(NULL AS VARCHAR2(3)) AS MANDATORY     FROM        SYS.ALL_VIRTUAL_RES_MGR_CONSUMER_GROUP_REAL_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_ROLE_PRIVS	SELECT CAST(A.USER_NAME AS VARCHAR2(30)) GRANTEE,      CAST(B.USER_NAME AS VARCHAR2(30)) GRANTED_ROLE,      DECODE(R.ADMIN_OPTION, 0, 'NO', 1, 'YES', '') AS ADMIN_OPTION ,      DECODE(R.DISABLE_FLAG, 0, 'YES', 1, 'NO', '') AS DEFAULT_ROLE      FROM SYS.ALL_VIRTUAL_TENANT_ROLE_GRANTEE_MAP_AGENT R,      SYS.ALL_VIRTUAL_USER_REAL_AGENT A,      SYS.ALL_VIRTUAL_USER_REAL_AGENT B      WHERE R.GRANTEE_ID = A.USER_ID      AND R.ROLE_ID = B.USER_ID      AND B.TYPE = 1      AND A.TENANT_ID = EFFECTIVE_TENANT_ID()      AND B.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_ROLES	SELECT CAST(USER_NAME AS VARCHAR2(30)) ROLE,      CAST('NO' AS VARCHAR2(8)) PASSWORD_REQUIRED,      CAST('NONE' AS VARCHAR2(11)) AUTHENTICATION_TYPE      FROM   SYS.ALL_VIRTUAL_USER_REAL_AGENT U      WHERE             U.TYPE = 1 AND U.TENANT_ID = EFFECTIVE_TENANT_ID()	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_RECYCLEBIN	     SELECT OWNER, OBJECT_NAME, ORIGINAL_NAME, OPERATION, TYPE, CAST(TABLESPACE_NAME AS VARCHAR2(30)) AS TS_NAME, CREATETIME, DROPTIME, DROPSCN, PARTITION_NAME, CAN_UNDROP, CAN_PURGE, RELATED, BASE_OBJECT, PURGE_OBJECT, SPACE     FROM       (SELECT         CAST(B.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,         CAST(A.OBJECT_NAME AS VARCHAR2(128)) AS OBJECT_NAME,         CAST(A.ORIGINAL_NAME AS VARCHAR2(128)) AS ORIGINAL_NAME,         CAST(NULL AS VARCHAR2(9)) AS OPERATION,         CAST(CASE A.TYPE              WHEN 1 THEN 'TABLE'              WHEN 2 THEN 'NORMAL INDEX'              WHEN 3 THEN 'VIEW'              WHEN 4 THEN 'DATABASE'              WHEN 5 THEN 'AUX_VP'              WHEN 6 THEN 'TRIGGER'              ELSE NULL END AS VARCHAR2(25)) AS TYPE,         CAST(NULL AS VARCHAR2(30)) AS TS_NAME,         CAST(C.GMT_CREATE AS VARCHAR(30)) AS CREATETIME,         CAST(C.GMT_MODIFIED AS VARCHAR(30)) AS DROPTIME,         CAST(NULL AS NUMBER) AS DROPSCN,         CAST(NULL AS VARCHAR2(128)) AS PARTITION_NAME,         CAST('YES' AS VARCHAR2(3)) AS CAN_UNDROP,         CAST('YES' AS VARCHAR2(3)) AS CAN_PURGE,         CAST(NULL AS NUMBER) AS RELATED,         CAST(NULL AS NUMBER) AS BASE_OBJECT,         CAST(NULL AS NUMBER) AS PURGE_OBJECT,         CAST(NULL AS NUMBER) AS SPACE,         C.TABLE_ID AS TABLE_ID,         C.TABLESPACE_ID AS TABLESPACE_ID         FROM SYS.ALL_VIRTUAL_RECYCLEBIN_REAL_AGENT A, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT C         WHERE A.DATABASE_ID = B.DATABASE_ID AND A.TABLE_ID = C.TABLE_ID AND A.TENANT_ID = EFFECTIVE_TENANT_ID() AND B.TENANT_ID = EFFECTIVE_TENANT_ID() AND C.TENANT_ID = EFFECTIVE_TENANT_ID()) LEFT_TABLE       LEFT JOIN         (SELECT TABLESPACE_NAME, TABLESPACE_ID FROM SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT) RIGHT_TABLE       ON LEFT_TABLE.TABLESPACE_ID = RIGHT_TABLE.TABLESPACE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_PROFILES	 SELECT   PROFILE,   RESOURCE_NAME,   RESOURCE_TYPE,   LIMIT FROM   (SELECT     PROFILE_NAME AS PROFILE,     CAST('FAILED_LOGIN_ATTEMPTS' AS VARCHAR2(32)) AS RESOURCE_NAME,     CAST('PASSWORD' AS VARCHAR2(8)) AS RESOURCE_TYPE,     CAST(DECODE(FAILED_LOGIN_ATTEMPTS, -1, 'UNLIMITED',       9223372036854775807, 'UNLIMITED',       10, 'DEFAULT',       FAILED_LOGIN_ATTEMPTS) AS VARCHAR2(128)) AS LIMIT   FROM     sys.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT   UNION ALL   SELECT     PROFILE_NAME AS PROFILE,     CAST('PASSWORD_LOCK_TIME' AS VARCHAR2(32)) AS RESOURCE_NAME,     CAST('PASSWORD' AS VARCHAR2(8)) AS RESOURCE_TYPE,     CAST(DECODE(PASSWORD_LOCK_TIME, -1, 'UNLIMITED',       9223372036854775807, 'UNLIMITED',       86400000000, 'DEFAULT',       PASSWORD_LOCK_TIME) AS VARCHAR2(128)) AS LIMIT   FROM     sys.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT   UNION ALL   SELECT     PROFILE_NAME AS PROFILE,     CAST('PASSWORD_VERIFY_FUNCTION' AS VARCHAR2(32)) AS RESOURCE_NAME,     CAST('PASSWORD' AS VARCHAR2(8)) AS RESOURCE_TYPE,     CAST(DECODE(PASSWORD_VERIFY_FUNCTION, NULL, 'NULL',       PASSWORD_VERIFY_FUNCTION) AS VARCHAR2(128)) AS LIMIT   FROM     sys.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT   UNION ALL   SELECT     PROFILE_NAME AS PROFILE,     CAST('PASSWORD_LIFE_TIME' AS VARCHAR2(32)) AS RESOURCE_NAME,     CAST('PASSWORD' AS VARCHAR2(8)) AS RESOURCE_TYPE,     CAST(DECODE(PASSWORD_LIFE_TIME, -1, 'UNLIMITED',       9223372036854775807, 'UNLIMITED',       15552000000000, 'DEFAULT',       PASSWORD_LIFE_TIME) AS VARCHAR2(128)) AS LIMIT   FROM     sys.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT   UNION ALL   SELECT     PROFILE_NAME AS PROFILE,     CAST('PASSWORD_GRACE_TIME' AS VARCHAR2(32)) AS RESOURCE_NAME,     CAST('PASSWORD' AS VARCHAR2(8)) AS RESOURCE_TYPE,     CAST(DECODE(PASSWORD_GRACE_TIME, -1, 'UNLIMITED',       9223372036854775807, 'UNLIMITED',       604800000000, 'DEFAULT',       PASSWORD_GRACE_TIME) AS VARCHAR2(128)) AS LIMIT   FROM     sys.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT) ORDER BY PROFILE, RESOURCE_NAME 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_PROCEDURES	     SELECT       U.USER_NAME AS OWNER,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_NAME ELSE P.PACKAGE_NAME END AS OBJECT_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE R.ROUTINE_NAME END AS PROCEDURE_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,       CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,       CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,       CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS OBJECT_TYPE,       CAST('NO' AS VARCHAR2(3)) AS AGGREGATE,       CAST(DECODE(BITAND(R.FLAG, 128), 128, 'YES', 'NO') AS VARCHAR2(3)) AS PIPELINED,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPEOWNER,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPENAME,       CAST(DECODE(BITAND(R.FLAG, 8), 8, 'YES', 'NO') AS VARCHAR2(3)) AS PARALLEL,       CAST('NO' AS VARCHAR2(3)) AS INTERFACE,       CAST(DECODE(BITAND(R.FLAG, 4), 4, 'YES', 'NO') AS VARCHAR2(3)) AS DETERMINISTIC,       CAST(DECODE(BITAND(R.FLAG, 16), 16, 'INVOKER', 'DEFINER') AS VARCHAR2(12)) AS AUTHID,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID())R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID           AND U.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID           AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1) AND D.IN_RECYCLEBIN = 0     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_NAME ELSE PS.PACKAGE_NAME END AS OBJECT_NAME,       CASE RS.PACKAGE_ID WHEN -1 THEN NULL ELSE RS.ROUTINE_NAME END AS PROCEDURE_NAME,       CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_ID ELSE RS.PACKAGE_ID END AS OBJECT_ID,       CASE RS.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE RS.SUBPROGRAM_ID END AS SUBPROGRAM_ID,       CASE RS.OVERLOAD WHEN 0 THEN NULL ELSE RS.OVERLOAD END AS OVERLOAD,       CASE RS.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS OBJECT_TYPE,       CAST('NO' AS VARCHAR2(3)) AS AGGREGATE,       CAST(DECODE(BITAND(RS.FLAG, 128), 128, 'YES', 'NO') AS VARCHAR2(3)) AS PIPELINED,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPEOWNER,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPENAME,       CAST(DECODE(BITAND(RS.FLAG, 8), 8, 'YES', 'NO') AS VARCHAR2(3)) AS PARALLEL,       CAST('NO' AS VARCHAR2(3)) AS INTERFACE,       CAST(DECODE(BITAND(RS.FLAG, 4), 4, 'YES', 'NO') AS VARCHAR2(3)) AS DETERMINISTIC,       CAST(DECODE(BITAND(RS.FLAG, 16), 16, 'INVOKER', 'DEFINER') AS VARCHAR2(12)) AS AUTHID,       RS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS       LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS ON RS.PACKAGE_ID = PS.PACKAGE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_PART_TABLES	SELECT CAST(DB.DATABASE_NAME AS VARCHAR2(128)) OWNER,      CAST(TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE TB.PART_FUNC_TYPE WHEN 0 THEN      'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY'      WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE'      WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST'      WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END      AS VARCHAR2(9)) PARTITIONING_TYPE,      CAST (DECODE(TB.PART_LEVEL, 1, 'NONE',                                  2, DECODE(TB.SUB_PART_FUNC_TYPE, 0, 'HASH',                                                                   1, 'KEY',                                                                   2, 'KEY',                                                                   3, 'RANGE',                                                                   4, 'RANGE',                                                                   5, 'LIST',                                                                   6, 'KEY',                                                                   7, 'LIST',                                                                   8, 'HASH',                                                                   9, 'KEY',                                                                   10, 'KEY'))           AS VARCHAR2(9)) SUBPARTITIONING_TYPE,      CAST (TB.PART_NUM AS NUMBER) PARTITION_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, TB.SUB_PART_NUM) AS NUMBER) DEF_SUBPARTITION_COUNT,      CAST(PART_INFO.PART_KEY_COUNT AS NUMBER) PARTITIONING_KEY_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, PART_INFO.SUBPART_KEY_COUNT) AS NUMBER) SUBPARTITIONING_KEY_COUNT,      CAST(NULL AS VARCHAR2(8)) STATUS,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) DEF_TABLESPACE_NAME,      CAST(NULL AS NUMBER) DEF_PCT_FREE,      CAST(NULL AS NUMBER) DEF_PCT_USED,      CAST(NULL AS NUMBER) DEF_INI_TRANS,      CAST(NULL AS NUMBER) DEF_MAX_TRANS,      CAST(NULL AS VARCHAR2(40)) DEF_INITIAL_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_NEXT_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MIN_EXTENT,      CAST(NULL AS VARCHAR2(40)) MAX_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MAX_SIZE,      CAST(NULL AS VARCHAR2(40)) DEF_PCT_INCREASE,      CAST(NULL AS NUMBER) DEF_FREELISTS,      CAST(NULL AS NUMBER) DEF_FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) DEF_LOGGING,      CAST(CASE WHEN      TB.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(TB.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS VARCHAR2(7)) DEF_BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) DEF_FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) DEF_CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(30)) REF_PTN_CONSTRAINT_NAME,      CAST(NULL AS VARCHAR2(1000)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(4)) DEF_SEGMENT_CREATED      FROM   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB      JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB      ON        TB.DATABASE_ID = DB.DATABASE_ID        AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()      JOIN        (select table_id,                sum(case when BITAND(PARTITION_KEY_POSITION, 255) > 0 then 1 else 0 end) as PART_KEY_COUNT,                sum(case when BITAND(PARTITION_KEY_POSITION, 65280) > 0 then 0 else 1 end) as SUBPART_KEY_COUNT         from SYS.ALL_VIRTUAL_COLUMN_AGENT         where PARTITION_KEY_POSITION > 0         group by table_id) PART_INFO      ON        TB.TABLE_ID = PART_INFO.TABLE_ID      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = TB.TABLESPACE_ID       AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()      WHERE TB.TABLE_TYPE != 5       AND TB.PART_LEVEL != 0	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_PART_KEY_COLUMNS	     SELECT  D.DATABASE_NAME AS OWNER,             CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_PART_INDEXES	 with PARTITIONED_INDEXES as ( SELECT CASE when I.INDEX_TYPE IN (1, 2) then 1 else 0 end as IS_LOCAL, DB.DATABASE_NAME AS I_OWNER, CASE WHEN DB.DATABASE_NAME !=  '__recyclebin' THEN SUBSTR(I.TABLE_NAME, 7 + INSTR(SUBSTR(I.TABLE_NAME, 7), '_')) ELSE I.TABLE_NAME END AS I_NAME, T.TABLE_NAME AS T_NAME, I.DATA_TABLE_ID AS T_ID, I.TABLE_ID AS I_ID, TP.TABLESPACE_NAME, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN I.DATA_TABLE_ID ELSE I.TABLE_ID END AS PART_INFO_T_ID, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_LEVEL ELSE I.PART_LEVEL END AS I_PART_LEVEL, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_FUNC_TYPE ELSE I.PART_FUNC_TYPE END AS I_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_FUNC_TYPE ELSE I.SUB_PART_FUNC_TYPE END AS I_SUB_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_NUM ELSE I.PART_NUM END AS I_PART_NUM, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_NUM ELSE I.SUB_PART_NUM END AS I_SUB_PART_NUM FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB ON I.DATABASE_ID = DB.DATABASE_ID   AND I.TENANT_ID = EFFECTIVE_TENANT_ID()   AND DB.TENANT_ID = EFFECTIVE_TENANT_ID() JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T ON I.DATA_TABLE_ID = T.TABLE_ID   AND T.TENANT_ID = EFFECTIVE_TENANT_ID() LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON  TP.TABLESPACE_ID = I.TABLESPACE_ID   AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE I.TABLE_TYPE = 5 AND (I.INDEX_TYPE NOT IN (1, 2) and I.PART_LEVEL != 0  or  I.INDEX_TYPE IN (1, 2) and T.PART_LEVEL != 0) ), PART_KEY_COUNT as ( select PI.I_ID, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 255) != 0 THEN 1 ELSE 0 END) AS PARTITIONING_KEY_COUNT, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 65280)/256 != 0 THEN 1 ELSE 0 END) AS SUBPARTITIONING_KEY_COUNT from PARTITIONED_INDEXES PI join SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C on PI.PART_INFO_T_ID = C.TABLE_ID AND C.TENANT_ID = EFFECTIVE_TENANT_ID() group by I_ID ), LOCAL_INDEX_PREFIXED as ( select I.TABLE_ID AS I_ID, 1 AS IS_PREFIXED from SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I where I.TABLE_TYPE = 5 AND I.INDEX_TYPE in (1,2)   AND I.TENANT_ID = EFFECTIVE_TENANT_ID() and not exists (select * from ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C where C.TABLE_ID = I.DATA_TABLE_ID AND C.PARTITION_KEY_POSITION != 0 AND C.TENANT_ID = EFFECTIVE_TENANT_ID() ) PART_COLUMNS left join ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C WHERE C.TABLE_ID = I.TABLE_ID AND C.TENANT_ID = EFFECTIVE_TENANT_ID() AND C.INDEX_POSITION != 0 ) INDEX_COLUMNS ON PART_COLUMNS.COLUMN_ID = INDEX_COLUMNS.COLUMN_ID where (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != 0 AND (INDEX_COLUMNS.INDEX_POSITION is null  or BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != INDEX_COLUMNS.INDEX_POSITION)) or (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 65280)/256 != 0  AND (INDEX_COLUMNS.INDEX_POSITION is null)) ) ) SELECT CAST(PI.I_OWNER AS VARCHAR2(128)) AS OWNER, CAST(PI.I_NAME AS VARCHAR2(128)) AS INDEX_NAME, CAST(PI.T_NAME AS VARCHAR2(128)) AS TABLE_NAME,  CAST(CASE PI.I_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END AS VARCHAR2(9)) AS PARTITIONING_TYPE, CAST( CASE WHEN PI.I_PART_LEVEL < 2 THEN 'NONE' ELSE CASE PI.I_SUB_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END END AS VARCHAR2(9)) AS SUBPARTITIONING_TYPE,  CAST(PI.I_PART_NUM AS NUMBER) AS PARTITION_COUNT, CAST(CASE WHEN PI.I_PART_LEVEL < 2 THEN 0 ELSE PI.I_SUB_PART_NUM END AS NUMBER) AS DEF_SUBPARTITION_COUNT, CAST(PKC.PARTITIONING_KEY_COUNT AS NUMBER) AS PARTITIONING_KEY_COUNT, CAST(PKC.SUBPARTITIONING_KEY_COUNT AS NUMBER) AS SUBPARTITIONING_KEY_COUNT,  CAST(CASE WHEN PI.IS_LOCAL = 1 THEN 'LOCAL' ELSE 'GLOBAL' END AS VARCHAR2(6)) AS LOCALITY,  CAST(CASE WHEN (PI.IS_LOCAL = 0 or (PI.IS_LOCAL = 1 and LIP.IS_PREFIXED = 1)) THEN 'PREFIXED' ELSE 'NON_PREFIXED' END AS VARCHAR2(12)) AS ALIGNMENT,  CAST(PI.TABLESPACE_NAME AS VARCHAR2(30)) AS DEF_TABLESPACE_NAME, CAST(0 AS NUMBER) AS DEF_PCT_FREE, CAST(0 AS NUMBER) AS DEF_INI_TRANS, CAST(0 AS NUMBER) AS DEF_MAX_TRANS, CAST(NULL AS VARCHAR2(40)) AS DEF_INITIAL_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_NEXT_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_MIN_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_SIZE, CAST(NULL AS VARCHAR2(40)) AS DEF_PCT_INCREASE, CAST(0 AS NUMBER) AS DEF_FREELISTS, CAST(0 AS NUMBER) AS DEF_FREELIST_GROUPS, CAST(NULL AS VARCHAR2(7)) AS DEF_LOGGING, CAST(NULL AS VARCHAR2(7)) AS DEF_BUFFER_POOL, CAST(NULL AS VARCHAR2(7)) AS DEF_FLASH_CACHE, CAST(NULL AS VARCHAR2(7)) AS DEF_CELL_FLASH_CACHE, CAST(NULL AS VARCHAR2(1000)) AS DEF_PARAMETERS, CAST(NULL AS VARCHAR2(1000)) AS INTERVAL  from PARTITIONED_INDEXES PI join PART_KEY_COUNT PKC on PI.I_ID = PKC.I_ID left join LOCAL_INDEX_PREFIXED LIP on PI.I_ID = LIP.I_ID     	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_OBJECTS	     SELECT      B.DATABASE_NAME AS OWNER     ,CAST((CASE WHEN B.DATABASE_NAME = '__recyclebin' THEN A.OBJECT_NAME                 WHEN A.OBJECT_TYPE = 'INDEX' THEN SUBSTR(A.OBJECT_NAME, 7 + INSTR(SUBSTR(A.OBJECT_NAME, 7), '_'))            ELSE A.OBJECT_NAME END) AS VARCHAR2(128)) AS OBJECT_NAME     ,CAST(A.SUBOBJECT_NAME AS VARCHAR2(128)) AS SUBOBJECT_NAME     ,A.OBJECT_ID AS OBJECT_ID     ,CAST(A.DATA_OBJECT_ID AS NUMBER) AS DATA_OBJECT_ID     ,CAST(A.OBJECT_TYPE AS VARCHAR2(23)) AS OBJECT_TYPE     ,CAST(A.GMT_CREATE AS DATE) AS CREATED     ,CAST(A.GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(A.GMT_CREATE) AS TIMESTAMP     ,CAST(A.STATUS AS VARCHAR2(7)) AS STATUS     ,CAST(A.TEMPORARY AS VARCHAR2(1)) AS TEMPORARY     ,CAST("GENERATED" AS VARCHAR2(1)) AS "GENERATED"     ,CAST(A.SECONDARY AS VARCHAR2(1)) AS SECONDARY     ,CAST(A.NAMESPACE AS NUMBER) AS NAMESPACE     ,CAST(A.EDITION_NAME AS VARCHAR2(128)) AS EDITION_NAME     FROM (     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TABLE_NAME OBJECT_NAME     ,NULL SUBOBJECT_NAME     ,TABLE_ID OBJECT_ID     ,NULL DATA_OBJECT_ID     ,CASE WHEN TABLE_TYPE IN (0,2,3,6,8,9,10) THEN 'TABLE'           WHEN TABLE_TYPE IN (1,4) THEN 'VIEW'           WHEN TABLE_TYPE IN (5) THEN 'INDEX'           WHEN TABLE_TYPE IN (7) THEN 'MATERIALIZED VIEW'           ELSE NULL END AS OBJECT_TYPE     ,CAST(CASE WHEN TABLE_TYPE IN (5) THEN CASE WHEN INDEX_STATUS = 2 THEN 'VALID'             WHEN INDEX_STATUS = 3 THEN 'CHECKING'             WHEN INDEX_STATUS = 4 THEN 'INELEGIBLE'             WHEN INDEX_STATUS = 5 THEN 'ERROR'             ELSE 'UNUSABLE' END           ELSE  'VALID' END AS VARCHAR2(10)) AS STATUS     ,CASE WHEN TABLE_TYPE IN (6,8,9,10) THEN 'Y'         ELSE 'N' END AS TEMPORARY     ,CASE WHEN TABLE_TYPE IN (0,1) THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM     SYS.ALL_VIRTUAL_TABLE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,P.PART_NAME SUBOBJECT_NAME     ,P.PART_ID OBJECT_ID     ,CASE WHEN P.PART_IDX != -1 THEN P.PART_ID ELSE NULL END AS DATA_OBJECT_ID     ,'TABLE PARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,CASE WHEN P.PART_IDX != -1 THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID = P.TABLE_ID     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     SUBP.GMT_CREATE     ,SUBP.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,SUBP.SUB_PART_NAME SUBOBJECT_NAME     ,SUBP.PART_ID OBJECT_ID     ,SUBP.PART_ID AS DATA_OBJECT_ID     ,'TABLE SUBPARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'Y' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_PART_REAL_AGENT P,SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUBP     WHERE T.TABLE_ID =P.TABLE_ID AND P.TABLE_ID=SUBP.TABLE_ID AND P.PART_ID =SUBP.PART_ID     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID() AND SUBP.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,P.DATABASE_ID     ,P.PACKAGE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,P.PACKAGE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN TYPE = 1 THEN 'PACKAGE'           WHEN TYPE = 2 THEN 'PACKAGE BODY'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE P.TENANT_ID = E.TENANT_ID AND P.PACKAGE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 3 OR E.OBJ_TYPE = 5))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P     WHERE P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     R.GMT_CREATE     ,R.GMT_MODIFIED     ,R.DATABASE_ID     ,R.ROUTINE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,R.ROUTINE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN ROUTINE_TYPE = 1 THEN 'PROCEDURE'           WHEN ROUTINE_TYPE = 2 THEN 'FUNCTION'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE R.TENANT_ID = E.TENANT_ID AND R.ROUTINE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 9 OR E.OBJ_TYPE = 12))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R     WHERE (ROUTINE_TYPE = 1 OR ROUTINE_TYPE = 2) AND R.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     T.GMT_CREATE     ,T.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TRIGGER_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,T.TRIGGER_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TRIGGER' OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_ERROR_AGENT E                   WHERE T.TENANT_ID = E.TENANT_ID AND T.TRIGGER_ID = E.OBJ_ID AND (E.OBJ_TYPE = 7))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TRIGGER_AGENT T     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SYNONYM_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SYNONYM_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SYNONYM' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SEQUENCE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SEQUENCE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SEQUENCE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TYPE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_TYPE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,OBJECT_TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE BODY' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     FROM SYS.ALL_VIRTUAL_OBJECT_TYPE_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID() and TYPE = 2     )A     JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B     ON A.DATABASE_ID = B.DATABASE_ID     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       'SYS' AS OWNER       ,TS.TYPE_NAME AS OBJECT_NAME       ,NULL AS SUBOBJECT_NAME       ,TS.TYPE_ID AS OBJECT_ID       ,NULL AS DATA_OBJECT_ID       ,'TYPE' AS OBJECT_TYPE       ,CAST(TS.GMT_CREATE AS DATE) AS CREATED       ,CAST(TS.GMT_MODIFIED AS DATE) AS LAST_DDL_TIME       ,TO_CHAR(TS.GMT_CREATE) AS TIMESTAMP       ,'VALID' AS STATUS       ,'N' AS TEMPORARY       ,'N' AS "GENERATED"       ,'N' AS SECONDARY       ,0 AS NAMESPACE       ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS   UNION ALL   SELECT     'SYS' AS OWNER     ,PACKAGE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,PACKAGE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN TYPE = 1 THEN 'PACKAGE'           WHEN TYPE = 2 THEN 'PACKAGE BODY'           ELSE NULL END AS OBJECT_TYPE     ,CAST(GMT_CREATE AS DATE) AS CREATED     ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(GMT_CREATE) AS TIMESTAMP     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     ,0 AS NAMESPACE     ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT   UNION ALL   SELECT      'SYS' AS OWNER      ,ROUTINE_NAME AS OBJECT_NAME      ,NULL AS SUBOBJECT_NAME      ,ROUTINE_ID OBJECT_ID      ,NULL AS DATA_OBJECT_ID      ,CASE WHEN ROUTINE_TYPE = 1 THEN 'PROCEDURE'            WHEN ROUTINE_TYPE = 2 THEN 'FUNCTION'            ELSE NULL END AS OBJECT_TYPE      ,CAST(GMT_CREATE AS DATE) AS CREATED      ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME      ,TO_CHAR(GMT_CREATE) AS TIMESTAMP      ,'VALID' AS STATUS      ,'N' AS TEMPORARY      ,'N' AS "GENERATED"      ,'N' AS SECONDARY      ,0 AS NAMESPACE      ,NULL AS EDITION_NAME    FROM SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT    UNION ALL    SELECT      'SYS' AS OWNER      ,TRIGGER_NAME AS OBJECT_NAME      ,NULL AS SUBOBJECT_NAME      ,TRIGGER_ID OBJECT_ID      ,NULL AS DATA_OBJECT_ID      ,'TRIGGER' AS OBJECT_TYPE      ,CAST(GMT_CREATE AS DATE) AS CREATED      ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME      ,TO_CHAR(GMT_CREATE) AS TIMESTAMP      ,'VALID' AS STATUS      ,'N' AS TEMPORARY      ,'N' AS "GENERATED"      ,'N' AS SECONDARY      ,0 AS NAMESPACE      ,NULL AS EDITION_NAME    FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_SYS_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_MVIEW_COMMENTS	 SELECT   db.DATABASE_NAME AS OWNER,   CAST(t.TABLE_NAME AS VARCHAR2(128)) AS MVIEW_NAME,   CAST(t."COMMENT" AS VARCHAR(4000)) AS COMMENTS FROM   SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT db,   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT t WHERE     db.DATABASE_ID = t.DATABASE_ID     AND t.TABLE_TYPE = 7     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_METHOD_PARAMS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(30)) AS PARAM_NAME,   CAST(NULL AS NUMBER) AS PARAM_NO,   CAST(NULL AS VARCHAR2(6)) AS PARAM_MODE,   CAST(NULL AS VARCHAR2(7)) AS PARAM_TYPE_MOD,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_OWNER,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_NAME,   CAST(NULL AS VARCHAR2(44)) AS CHARACTER_SET_NAME FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_IND_SUBPARTITIONS	   SELECT     CAST(B.INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(PART.PART_NAME AS VARCHAR2(128)) AS PARTITION_NAME,     CAST(SUB_PART.SUB_PART_NAME AS VARCHAR2(128)) AS SUBPARTITION_NAME,     CAST(SUB_PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(SUB_PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     SUB_PART.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID*/       A.DATA_TABLE_ID AS DATA_TABLE_ID,       A.PART_LEVEL AS INDEX_TABLE_PART_LEVEL,       TB2.PART_LEVEL AS DATA_TABLE_PART_LEVEL,       /* CAST(CASE WHEN A.PART_LEVEL=2 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL */       CAST('TRUE' AS VARCHAR2(5)) AS IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin' AND TB1.DATABASE_ID=DB.DATABASE_ID AND TB1.TABLE_TYPE=5             AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()       ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID             AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=2 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=2)       ) B, SYS.ALL_VIRTUAL_PART_REAL_AGENT PART, SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUB_PART       WHERE ((B.IS_LOCAL='FALSE' AND B.TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID)       OR (B.IS_LOCAL='TRUE' AND B.DATA_TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID))       AND SUB_PART.TENANT_ID = EFFECTIVE_TENANT_ID()       AND PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_IND_PARTITIONS	   SELECT     CAST(B.INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(CASE WHEN PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) AS COMPOSITE,     CAST(PART.PART_NAME AS VARCHAR2(128)) AS PARTITION_NAME,     PART.SUB_PART_NUM AS SUBPARTITION_COUNT,     CAST(PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     PART.PART_ID + 1 AS PARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID*/       A.DATA_TABLE_ID AS DATA_TABLE_ID,       CAST(CASE WHEN A.PART_LEVEL=1 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin' AND TB1.DATABASE_ID=DB.DATABASE_ID AND TB1.TABLE_TYPE=5             AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()       ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID           AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=1 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=1)     ) B JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART ON     ((B.TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='FALSE') OR (B.DATA_TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='TRUE'))     AND PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_IND_EXPRESSIONS	   SELECT CAST(INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,     CAST(H.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(COLUMN_EXPRESSION /* TODO: LONG */ AS VARCHAR2(1000)) AS COLUMN_EXPRESSION,     COLUMN_POSITION   FROM   (   SELECT INDEX_OWNER,     INDEX_NAME,     TABLE_OWNER,     F.CUR_DEFAULT_VALUE_V2 AS COLUMN_EXPRESSION,     E.INDEX_POSITION AS  COLUMN_POSITION,     E.TABLE_ID AS TABLE_ID     FROM       (SELECT INDEX_OWNER,               INDEX_NAME,               TABLE_OWNER,               C.TABLE_ID AS TABLE_ID,               C.INDEX_ID AS INDEX_ID,               D.COLUMN_ID AS COLUMN_ID,               D.COLUMN_NAME AS COLUMN_NAME, D.INDEX_POSITION AS INDEX_POSITION       FROM         (SELECT DATABASE_NAME AS INDEX_OWNER,                 SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')) AS INDEX_NAME,                 DATABASE_NAME AS TABLE_OWNER,                 A.DATA_TABLE_ID AS TABLE_ID,                 A.TABLE_ID AS INDEX_ID           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID           AND B.DATABASE_NAME != '__recyclebin'           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           WHERE TABLE_TYPE=5 ) C       JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D ON C.INDEX_ID=D.TABLE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()) E     JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON F.TABLE_ID=E.TABLE_ID         AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     AND F.COLUMN_ID=E.COLUMN_ID     AND F.COLUMN_FLAGS=1) G   JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT H ON G.TABLE_ID=H.TABLE_ID       AND H.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_IND_COLUMNS	     SELECT       CAST(INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(ROWKEY_POSITION AS NUMBER) AS COLUMN_POSITION,       CASE WHEN DATA_TYPE >= 1 AND DATA_TYPE <= 16 THEN CAST(22 AS NUMBER)            WHEN DATA_TYPE = 17 THEN CAST(7 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 2 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (45, 46, 224, 54, 55, 101) THEN CAST(DATA_LENGTH * 4 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (28, 87) THEN CAST(DATA_LENGTH * 2 AS NUMBER)            WHEN DATA_TYPE = 36 THEN CAST(12 AS NUMBER)            WHEN DATA_TYPE IN (37, 38) THEN CAST(11 AS NUMBER)            WHEN DATA_TYPE = 39 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE = 40 THEN CAST(5 AS NUMBER)            WHEN DATA_TYPE = 41 THEN CAST(11 AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS COLUMN_LENGTH,       CASE WHEN DATA_TYPE IN (22, 23) THEN CAST(DATA_LENGTH AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS CHAR_LENGTH,       CAST('ASC' AS VARCHAR2(4)) AS DESCEND       FROM         (SELECT         INDEX_OWNER,         INDEX_NAME,         TABLE_OWNER,         TABLE_NAME,         INDEX_ID,         IDX_TYPE         FROM           (SELECT           DATABASE_NAME AS INDEX_OWNER,           CASE WHEN (TABLE_TYPE = 5) THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))             ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,           DATABASE_NAME AS TABLE_OWNER,           CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID             ELSE A.DATA_TABLE_ID END AS TABLE_ID,           A.TABLE_ID AS INDEX_ID,           TABLE_TYPE AS IDX_TYPE           FROM             SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A             JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID             AND TABLE_TYPE IN (5, 3)             AND B.DATABASE_NAME != '__recyclebin'             AND A.TENANT_ID = B.TENANT_ID AND A.TENANT_ID = EFFECTIVE_TENANT_ID()             LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB             ON (CONS_TAB.TABLE_ID = A.TABLE_ID AND A.TENANT_ID = CONS_TAB.TENANT_ID                 AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID())           WHERE             NOT(             TABLE_TYPE = 3             AND CONSTRAINT_NAME IS NULL             )           ) C         JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID               AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         ) E         JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON E.INDEX_ID = F.TABLE_ID               AND F.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE         F.ROWKEY_POSITION != 0 AND (CASE WHEN IDX_TYPE = 5 THEN INDEX_POSITION ELSE 1 END) != 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_INDEXES	     SELECT       CAST(INDEX_OWNER AS VARCHAR2(128)) AS OWNER,       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(INDEX_TYPE_NAME AS VARCHAR2(27)) AS INDEX_TYPE,       CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST('TABLE' AS CHAR(5)) AS TABLE_TYPE,       CAST(UNIQUENESS AS VARCHAR2(9)) AS UNIQUENESS,       CAST(COMPRESSION AS VARCHAR2(8)) AS COMPRESSION,       CAST(NULL AS NUMBER) AS PREFIX_LENGTH,       CAST(TABLESPACE_NAME AS VARCHAR2(30)) AS TABLESPACE_NAME,       CAST(NULL AS NUMBER) AS INI_TRANS,       CAST(NULL AS NUMBER) AS MAX_TRANS,       CAST(NULL AS NUMBER) AS INITIAL_EXTENT,       CAST(NULL AS NUMBER) AS NEXT_EXTENT,       CAST(NULL AS NUMBER) AS MIN_EXTENTS,       CAST(NULL AS NUMBER) AS MAX_EXTENTS,       CAST(NULL AS NUMBER) AS PCT_INCREASE,       CAST(NULL AS NUMBER) AS PCT_THRESHOLD,       CAST(NULL AS NUMBER) AS INCLUDE_COLUMN,       CAST(NULL AS NUMBER) AS FREELISTS,       CAST(NULL AS NUMBER) AS FREELIST_GROUPS,       CAST(NULL AS NUMBER) AS PCT_FREE,       CAST(NULL AS VARCHAR2(3)) AS LOGGING,       CAST(NULL AS NUMBER) AS BLEVEL,       CAST(NULL AS NUMBER) AS LEAF_BLOCKS,       CAST(NULL AS NUMBER) AS DISTINCT_KEYS,       CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,       CAST(STATUS AS VARCHAR2(10)) AS STATUS,       CAST(NULL AS NUMBER) AS NUM_ROWS,       CAST(NULL AS NUMBER) AS SAMPLE_SIZE,       CAST(NULL AS DATE) AS LAST_ANALYZED,       CAST(NULL AS VARCHAR2(40)) AS DEGREE,       CAST(NULL AS VARCHAR2(40)) AS INSTANCES,       CAST(CASE WHEN A_TABLE_TYPE = 3 THEN 'NO'                 WHEN A_INDEX_TYPE = 1 OR A_INDEX_TYPE = 2                 THEN (CASE WHEN D.PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END)            ELSE (CASE WHEN A_PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END) END  AS VARCHAR2(3)) AS PARTITIONED,       CAST(NULL AS VARCHAR2(1)) AS TEMPORARY,       CAST(NULL AS VARCHAR2(1)) AS "GENERATED",       CAST(NULL AS VARCHAR2(1)) AS SECONDARY,       CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,       CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,       CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,       CAST(NULL AS VARCHAR2(3)) AS USER_STATS,       CAST(NULL AS VARCHAR2(15)) AS DURATION,       CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,       CAST(NULL AS VARCHAR2(30)) AS ITYP_OWNER,       CAST(NULL AS VARCHAR2(30)) AS ITYP_NAME,       CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,       CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,       CAST(NULL AS VARCHAR2(12)) AS DOMIDX_STATUS,       CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,       CAST(FUNCIDX_STATUS AS VARCHAR2(8)) AS FUNCIDX_STATUS,       CAST('NO' AS VARCHAR2(3)) AS JOIN_INDEX,       CAST(NULL AS VARCHAR2(3)) AS IOT_REDUNDANT_PKEY_ELIM,       CAST(DROPPED AS VARCHAR2(9)) AS DROPPED,       CAST(VISIBILITY AS VARCHAR2(10)) AS VISIBILITY,       CAST(NULL AS VARCHAR2(14)) AS DOMIDX_MANAGEMENT,       CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED       FROM         (SELECT         DATABASE_NAME AS INDEX_OWNER,         CASE WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME !=  '__recyclebin') THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))              WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME =  '__recyclebin') THEN TABLE_NAME           ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,          CASE           WHEN A.TABLE_TYPE = 5 AND EXISTS (             SELECT 1             FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_INDEX,                  SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_BASE             WHERE T_COL_BASE.TABLE_ID = A.DATA_TABLE_ID               AND T_COL_BASE.COLUMN_NAME = T_COL_INDEX.COLUMN_NAME               AND T_COL_INDEX.TABLE_ID = A.TABLE_ID               AND T_COL_BASE.TENANT_ID = A.TENANT_ID               AND T_COL_INDEX.TENANT_ID = A.TENANT_ID               AND BITAND(T_COL_BASE.COLUMN_FLAGS,3) > 0           ) THEN 'FUNCTION-BASED NORMAL'           ELSE 'NORMAL'         END AS INDEX_TYPE_NAME,          DATABASE_NAME AS TABLE_OWNER,         CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID           ELSE A.DATA_TABLE_ID END AS TABLE_ID,         A.TABLE_ID AS INDEX_ID,         CASE WHEN TABLE_TYPE = 3 THEN 'UNIQUE'              WHEN A.INDEX_TYPE IN (2, 4, 8) THEN 'UNIQUE'           ELSE 'NONUNIQUE' END AS UNIQUENESS,         CASE WHEN A.COMPRESS_FUNC_NAME = NULL THEN 'DISABLED'           ELSE 'ENABLED' END AS COMPRESSION,         CASE WHEN TABLE_TYPE = 3 THEN 'VALID'              WHEN A.INDEX_STATUS = 2 THEN 'VALID'              WHEN A.INDEX_STATUS = 3 THEN 'CHECKING'              WHEN A.INDEX_STATUS = 4 THEN 'INELEGIBLE'              WHEN A.INDEX_STATUS = 5 THEN 'ERROR'           ELSE 'UNUSABLE' END AS STATUS,         A.INDEX_TYPE AS A_INDEX_TYPE,         A.PART_LEVEL AS A_PART_LEVEL,         A.TABLE_TYPE AS A_TABLE_TYPE,         CASE WHEN 0 = (SELECT COUNT(1) FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT                       WHERE TABLE_ID = A.TABLE_ID AND IS_HIDDEN = 0                         AND TENANT_ID = EFFECTIVE_TENANT_ID()) THEN 'ENABLED'           ELSE 'NULL' END AS FUNCIDX_STATUS,         CASE WHEN B.DATABASE_NAME = '__recyclebin' THEN 'YES'           ELSE 'NO' END AS DROPPED,         CASE WHEN BITAND(A.INDEX_ATTRIBUTES_SET, 1) = 0 THEN 'VISIBLE'           ELSE 'INVISIBLE' END AS VISIBILITY,         A.TABLESPACE_ID         FROM           SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID           AND TABLE_TYPE IN (5, 3)           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB ON (CONS_TAB.TABLE_ID = A.TABLE_ID)               AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID()         WHERE           NOT(TABLE_TYPE = 3 AND CONSTRAINT_NAME IS NULL) AND (CONS_TAB.CONSTRAINT_TYPE IS NULL OR CONS_TAB.CONSTRAINT_TYPE = 1)         ) C       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON C.TABLESPACE_ID = TP.TABLESPACE_ID           AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_ERRORS	 SELECT   CAST(o.owner AS VARCHAR2(128)) AS OWNER,   CAST(o.object_name AS VARCHAR2(128)) AS NAME,   CAST(o.object_type AS VARCHAR2(19)) AS TYPE,   CAST(e.obj_seq AS NUMBER) AS SEQUENCE,   CAST(e.line AS NUMBER) AS LINE,   CAST(e.position AS NUMBER) AS POSITION,   CAST(e.text as VARCHAR2(4000)) AS TEXT,   CAST(DECODE(e.property, 0, 'ERROR', 1, 'WARNING', 'UNDEFINED') AS VARCHAR2(9)) AS ATTRIBUTE,   CAST(e.error_number AS NUMBER) AS MESSAGE_NUMBER FROM   all_objects o,  (select obj_id, obj_seq, line, position, text, property, error_number, CAST( UPPER(decode(obj_type,                                    3, 'PACKAGE',                                    4, 'TYPE',                                    5, 'PACKAGE BODY',                                    6, 'TYPE BODY',                                    7, 'TRIGGER',                                    8, 'VIEW',                                    9, 'FUNCTION',                                    12, 'PROCEDURE',                                    'MAXTYPE')) AS VARCHAR2(23)) object_type from sys.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT                             WHERE TENANT_ID = EFFECTIVE_TENANT_ID())  e WHERE   o.object_id = e.obj_id   AND o.object_type like e.object_type   AND o.object_type IN (UPPER('package'),                         UPPER('type'),                         UPPER('procedure'),                         UPPER('function'),                         UPPER('package body'),                         UPPER('view'),                         UPPER('trigger'),                         UPPER('type body'),                         UPPER('library'),                         UPPER('queue'),                         UPPER('java source'),                         UPPER('java class'),                         UPPER('dimension'),                         UPPER('assembly'),                         UPPER('hierarchy'),                         UPPER('arrtibute dimension'),                         UPPER('analytic view'))   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_DEPENDENCIES	     SELECT      o.OWNER AS OWNER,      o.OBJECT_NAME AS NAME,      o.OBJECT_TYPE AS TYPE,      ro.REFERENCED_OWNER AS REFERENCED_OWNER,      ro.REFERENCED_NAME AS REFERENCED_NAME,      DECODE(ro.REFERENCED_TYPE, NULL, ' NON-EXISTENT', ro.REFERENCED_TYPE) AS REFERENCED_TYPE,      CAST(NULL AS VARCHAR2(128)) AS REFERENCED_LINK_NAME,      CAST(DECODE(BITAND(o.PROPERTY, 3), 2, 'REF', 'HARD') AS VARCHAR2(4)) AS DEPENDENCY_TYPE      FROM (select             OWNER,             OBJECT_NAME,             OBJECT_TYPE,             REF_OBJ_NAME,             ref_obj_type,             dep_obj_id,             dep_obj_type,             dep_order,             property             from SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d             WHERE CAST(UPPER(decode(d.dep_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                 'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.DEP_OBJ_ID = o.OBJECT_ID) o                 LEFT OUTER JOIN                 (SELECT DISTINCT                   CAST(OWNER AS VARCHAR2(128)) AS REFERENCED_OWNER,                   CAST(OBJECT_NAME AS VARCHAR2(128)) AS REFERENCED_NAME,                   CAST(OBJECT_TYPE AS VARCHAR2(18)) AS REFERENCED_TYPE,                   dep_obj_id,                   dep_obj_type,                   dep_order FROM                   SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d                   WHERE CAST(UPPER(decode(d.ref_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                       'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.REF_OBJ_ID = o.OBJECT_ID) ro                     on ro.dep_obj_id = o.dep_obj_id AND ro.dep_obj_type = o.dep_obj_type                       AND ro.dep_order = o.dep_order 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_CONS_COLUMNS	     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(D.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.INDEX_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D       WHERE A.DATA_TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID AND D.TABLE_ID = A.TABLE_ID AND A.INDEX_TYPE IN (2, 4, 8) AND C.DATABASE_NAME != '__recyclebin' AND D.IS_HIDDEN = 0 AND D.INDEX_POSITION != 0         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(E.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_FOREIGN_KEY_COLUMN_REAL_AGENT D, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT E       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.FOREIGN_KEY_ID = D.FOREIGN_KEY_ID AND D.CHILD_COLUMN_ID = E.COLUMN_ID AND B.TABLE_ID = E.TABLE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(D.CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(A.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(B.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(B.ROWKEY_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT D       WHERE A.TABLE_ID = D.TABLE_ID AND D.CONSTRAINT_TYPE = 1 AND A.TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID AND B.ROWKEY_POSITION > 0 AND C.DATABASE_NAME != '__recyclebin' AND B.IS_HIDDEN = 0         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_CONSTRAINTS	     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('U' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(NULL AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,     CAST('ENABLED' AS VARCHAR2(8)) AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CAST('VALIDATED' AS VARCHAR2(13)) AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CAST(NULL AS VARCHAR2(4)) AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C WHERE A.DATA_TABLE_ID = B.TABLE_ID AND A.DATABASE_ID = C.DATABASE_ID       AND A.INDEX_TYPE IN (2, 4, 8) AND C.DATABASE_NAME != '__recyclebin'       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'       ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.REF_CST_TYPE = 0 AND A.REF_CST_ID = -1       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 2 THEN SUBSTR(F.TABLE_NAME, 7 + INSTR(SUBSTR(F.TABLE_NAME, 7), '_'))          ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.PARENT_TABLE_ID = D.TABLE_ID AND D.DATABASE_ID = E.DATABASE_ID AND (A.REF_CST_ID = F.TABLE_ID AND A.REF_CST_TYPE = 2)       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       AND E.TENANT_ID = EFFECTIVE_TENANT_ID()       AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 1 THEN F.CONSTRAINT_NAME         ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.PARENT_TABLE_ID = D.TABLE_ID AND D.DATABASE_ID = E.DATABASE_ID AND (A.PARENT_TABLE_ID = F.TABLE_ID AND A.REF_CST_TYPE = 1 AND F.CONSTRAINT_TYPE = 1 AND A.REF_CST_ID = F.CONSTRAINT_ID)       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       AND E.TENANT_ID = EFFECTIVE_TENANT_ID()       AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST('P' AS VARCHAR2(1))         ELSE CAST('C' AS VARCHAR2(1)) END AS CONSTRAINT_TYPE,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(NULL AS VARCHAR2(4000))         ELSE CAST(A.CHECK_EXPR AS VARCHAR2(4000)) END AS SEARCH_CONDITION,       CAST(NULL AS VARCHAR2(128)) AS R_OWNER,       CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,       CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,       CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))         ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,       CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,       CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,       CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))         ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,       CAST(NULL AS VARCHAR2(14)) AS "GENERATED",       CAST(NULL AS VARCHAR2(3)) AS BAD,       CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))         ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,       CAST(NULL AS DATE) AS LAST_CHANGE,       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(A.CONSTRAINT_NAME AS VARCHAR2(128))         ELSE CAST(NULL AS VARCHAR2(128)) END AS INDEX_NAME,       CAST(NULL AS VARCHAR2(7)) AS INVALID,       CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE A.TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND C.DATABASE_NAME != '__recyclebin'     AND A.TENANT_ID = EFFECTIVE_TENANT_ID()     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     AND C.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_COL_PRIVS	       SELECT         u_grantee.user_name as GRANTEE,         db.database_name as OWNER,         decode(auth.objtype, 1, t.table_name, '') as TABLE_NAME,         c.column_name as COLUMN_NAME,         u_grantor.user_name as GRANTOR,         cast (decode(auth.priv_id, 1, 'ALTER',                              2, 'AUDIT',                              3, 'COMMENT',                              4, 'DELETE',                              5, 'GRANT',                              6, 'INDEX',                              7, 'INSERT',                              8, 'LOCK',                              9, 'RENAME',                              10, 'SELECT',                              11, 'UPDATE',                              12, 'REFERENCES',                              13, 'EXECUTE',                              14, 'CREATE',                              15, 'FLASHBACK',                              16, 'READ',                              17, 'WRITE',                              'OTHERS') as varchar(40)) as PRIVILEGE,         decode(auth.priv_option, 0, 'NO', 1, 'YES', '') as GRANTABLE       FROM         sys.all_virtual_objauth_agent auth,         sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c,         sys.ALL_VIRTUAL_TABLE_REAL_AGENT t,         sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantor,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantee       WHERE         auth.col_id = c.column_id and         auth.obj_id = t.table_id and         auth.objtype = 1 and         auth.obj_id = c.table_id and         db.database_id = t.database_id and         u_grantor.user_id = auth.grantor_id and         u_grantee.user_id = auth.grantee_id         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTOR.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTEE.TENANT_ID = EFFECTIVE_TENANT_ID() 	      AND c.column_id != 65535   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_COL_COMMENTS	     SELECT       A.DATABASE_NAME AS OWNER,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       C.COLUMN_NAME AS COLUMN_NAME,       CAST(C."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A,       SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B,       SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C     WHERE       A.DATABASE_ID = B.DATABASE_ID       AND B.TABLE_ID = C.TABLE_ID       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_COLL_TYPES	     SELECT /*+ USE_MERGE(T, C, D, T1, D1) */       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       CAST(         CASE C.UPPER_BOUND         WHEN 0 THEN 'COLLECTION'         ELSE 'TABLE' END AS VARCHAR2(10)) AS COLL_TYPE,       C.UPPER_BOUND AS UPPER_BOUND,       CAST(NULL AS VARCHAR2(7)) AS ELEM_TYPE_MOD,       CAST(         CASE C.PROPERTIES         WHEN 3 THEN NULL         ELSE D1.DATABASE_NAME END AS VARCHAR2(128)) AS ELEM_TYPE_OWNER,       CAST(         CASE C.PROPERTIES         WHEN 3           THEN DECODE (BITAND(C.ELEM_TYPE_ID, 1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(C.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(C.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(C.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(C.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, CONCAT('UROWID(', CONCAT(C.LENGTH, ')')),             46, DECODE(C.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ELEM_TYPE_NAME,       C.LENGTH AS LENGTH,       C.NUMBER_PRECISION AS NUMBER_PRECISION,       C.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       CAST('YES' AS CHAR(3)) AS ELEM_STORAGE,       CAST('B' AS CHAR(1)) AS NULLS_STORED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_COLL_TYPE_REAL_AGENT C         ON T.TYPE_ID = C.COLL_TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')           AND T.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = C.ELEM_TYPE_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT /*+ USE_MERGE(TS, CS, TS1) */       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       CAST(         CASE CS.UPPER_BOUND         WHEN 0 THEN 'COLLECTION'         ELSE 'TABLE' END AS VARCHAR2(10)) AS COLL_TYPE,       CS.UPPER_BOUND AS UPPER_BOUND,       CAST(NULL AS VARCHAR2(7)) AS ELEM_TYPE_MOD,       CAST(         CASE CS.PROPERTIES         WHEN 3 THEN NULL         ELSE 'SYS' END AS VARCHAR2(128)) AS ELEM_TYPE_OWNER,       CAST(         CASE CS.PROPERTIES         WHEN 3           THEN DECODE (BITAND(CS.ELEM_TYPE_ID, 1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(CS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(CS.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(CS.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(CS.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, CONCAT('UROWID(', CONCAT(CS.LENGTH, ')')),             46, DECODE(CS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE TS1.TYPE_NAME END AS VARCHAR2(324)) AS ELEM_TYPE_NAME,       CS.LENGTH AS LENGTH,       CS.NUMBER_PRECISION AS NUMBER_PRECISION,       CS.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       CAST('YES' AS CHAR(3)) AS ELEM_STORAGE,       CAST('B' AS CHAR(1)) AS NULLS_STORED     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS JOIN SYS.ALL_VIRTUAL_COLL_TYPE_SYS_AGENT CS         ON TS.TYPE_ID = CS.COLL_TYPE_ID       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS1         ON TS1.TYPE_ID = CS.ELEM_TYPE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_ARGUMENTS	     SELECT     U.USER_NAME AS OWNER,     R.ROUTINE_NAME AS OBJECT_NAME,     CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE P.PACKAGE_NAME END AS PACKAGE_NAME,     CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,     CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,     CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,     RP.PARAM_NAME AS ARGUMENT_NAME,     RP.PARAM_POSITION AS POSITION,     RP.SEQUENCE AS SEQUENCE,     RP.PARAM_LEVEL AS DATA_LEVEL,     V.DATA_TYPE_STR AS DATA_TYPE,     'NO' AS DEFAULTED,     RP.PARAM_LENGTH AS DATA_LENGTH,     DECODE(BITAND(RP.FLAG, 3), 1, 'IN', 2, 'OUT', 3, 'INOUT', 0, 'OUT') AS IN_OUT,     RP.PARAM_PRECISION AS DATA_PRECISION,     RP.PARAM_SCALE AS DATA_SCALE,     CASE RP.PARAM_CHARSET WHEN 1 THEN 'BINARY' WHEN 2 THEN 'UTF8MB4' ELSE NULL END AS CHARACTER_SET_NAME,     CASE RP.PARAM_COLL_TYPE WHEN 45 THEN 'UTF8MB4_GENERAL_CI' WHEN 46 THEN 'UTF8MB4_BIN' WHEN 63 THEN 'BINARY' ELSE NULL END AS COLLATION,     RP.TYPE_OWNER AS TYPE_OWNER,     RP.TYPE_NAME AS TYPE_NAME,     RP.TYPE_SUBNAME AS TYPE_SUBNAME,     RP.TENANT_ID AS ORIGIN_CON_ID   FROM     (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_PARAM_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) RP     LEFT JOIN SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R ON RP.ROUTINE_ID = R.ROUTINE_ID         AND R.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID         AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_DATA_TYPE V ON RP.PARAM_TYPE = V.DATA_TYPE   WHERE     (SYS_CONTEXT('USERENV', 'CON_ID') = RP.TENANT_ID OR RP.TENANT_ID = 1) AND D.IN_RECYCLEBIN = 0   UNION ALL   SELECT     CAST('SYS' AS VARCHAR2(30)) AS OWNER,     RS.ROUTINE_NAME AS OBJECT_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN NULL ELSE PS.PACKAGE_NAME END AS PACKAGE_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_ID ELSE RS.PACKAGE_ID END AS OBJECT_ID,     CASE RS.OVERLOAD WHEN 0 THEN NULL ELSE RS.OVERLOAD END AS OVERLOAD,     CASE RS.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE RS.SUBPROGRAM_ID END AS SUBPROGRAM_ID,     RPS.PARAM_NAME AS ARGUMENT_NAME,     RPS.PARAM_POSITION AS POSITION,     RPS.SEQUENCE AS SEQUENCE,     RPS.PARAM_LEVEL AS DATA_LEVEL,     VV.DATA_TYPE_STR AS DATA_TYPE,     'NO' AS DEFAULTED,     RPS.PARAM_LENGTH AS DATA_LENGTH,     DECODE(BITAND(RPS.FLAG, 3), 1, 'IN', 2, 'OUT', 3, 'INOUT') AS IN_OUT,     RPS.PARAM_PRECISION AS DATA_PRECISION,     RPS.PARAM_SCALE AS DATA_SCALE,     CASE RPS.PARAM_CHARSET WHEN 1 THEN 'BINARY' WHEN 2 THEN 'UTF8MB4' ELSE NULL END AS CHARACTER_SET_NAME,     CASE RPS.PARAM_COLL_TYPE WHEN 45 THEN 'UTF8MB4_GENERAL_CI' WHEN 46 THEN 'UTF8MB4_BIN' WHEN 63 THEN 'BINARY' ELSE NULL END AS COLLATION,     RPS.TYPE_OWNER AS TYPE_OWNER,     RPS.TYPE_NAME AS TYPE_NAME,     RPS.TYPE_SUBNAME AS TYPE_SUBNAME,     RPS.TENANT_ID AS ORIGIN_CON_ID   FROM     SYS.ALL_VIRTUAL_ROUTINE_PARAM_SYS_AGENT RPS     LEFT JOIN SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS ON RPS.ROUTINE_ID = RS.ROUTINE_ID     LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS ON RS.PACKAGE_ID = PS.PACKAGE_ID     LEFT JOIN SYS.ALL_VIRTUAL_DATA_TYPE VV ON RPS.PARAM_TYPE = VV.DATA_TYPE 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	DBA_ALL_TABLES	 SELECT   CAST(db.database_name AS VARCHAR2(128)) AS OWNER,   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(30)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(NULL AS VARCHAR2(16)) AS OBJECT_ID_TYPE,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE_OWNER,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST(NULL AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID(),     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db  WHERE     db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND db.database_name != '__recyclebin'     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND t.table_type != 5 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_VIEWS	   SELECT CAST('SYS' AS VARCHAR2(128)) OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) VIEW_NAME,       CAST(LENGTH(VIEW_DEFINITION) AS NUMBER) TEXT_LENGTH,       TO_CLOB(VIEW_DEFINITION) TEXT,       CAST(NULL AS NUMBER) OID_TEXT_LENGTH,       CAST(NULL AS VARCHAR2(4000)) OID_TEXT,       CAST(NULL AS VARCHAR2(30)) VIEW_TYPE,       CAST(NULL AS VARCHAR2(30)) SUPERVIEW_NAME,       CAST(NULL AS VARCHAR2(1)) EDITIONING_VIEW,       CAST(NULL AS VARCHAR2(1)) READ_ONLY  FROM SYS.ALL_VIRTUAL_TABLE_SYS_AGENT  WHERE BITAND(TABLE_ID, 1099511627775) > 25000       AND BITAND(TABLE_ID, 1099511627775) <= 28000       AND TABLE_TYPE = 1       AND ((SUBSTR(TABLE_NAME,1,3) = 'DBA' AND USER_CAN_ACCESS_OBJ(1, TABLE_ID, DATABASE_ID) =1)            OR SUBSTR(TABLE_NAME,1,3) != 'DBA')   UNION ALL  SELECT CAST(B.DATABASE_NAME AS VARCHAR2(128)) OWNER,         CAST(A.TABLE_NAME AS VARCHAR2(128)) VIEW_NAME,         CAST(LENGTH(A.VIEW_DEFINITION) AS NUMBER) TEXT_LENGTH,         TO_CLOB(VIEW_DEFINITION) TEXT,         CAST(NULL AS NUMBER) OID_TEXT_LENGTH,         CAST(NULL AS VARCHAR2(4000)) OID_TEXT,         CAST(NULL AS VARCHAR2(30)) VIEW_TYPE,         CAST(NULL AS VARCHAR2(30)) SUPERVIEW_NAME,         CAST(NULL AS VARCHAR2(1)) EDITIONING_VIEW,         CAST(NULL AS VARCHAR2(1)) READ_ONLY  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B  WHERE A.TABLE_TYPE = 4         AND A.DATABASE_ID = B.DATABASE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND (A.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, A.TABLE_ID, A.DATABASE_ID) =1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_USERS	     SELECT       A.DATABASE_NAME AS USERNAME,       A.DATABASE_ID AS USERID,       CAST(A.GMT_CREATE AS DATE) AS CREATED     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A,       SYS.ALL_VIRTUAL_USER_REAL_AGENT B     WHERE       A.DATABASE_NAME = B.USER_NAME       AND A.TENANT_ID = B.TENANT_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TYPE_METHODS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(6)) AS METHOD_TYPE,   CAST(NULL AS NUMBER) AS PARAMETERS,   CAST(NULL AS NUMBER) AS RESULTS,   CAST(NULL AS VARCHAR2(3)) AS FINAL,   CAST(NULL AS VARCHAR2(3)) AS INSTANTIABLE,   CAST(NULL AS VARCHAR2(3)) AS OVERRIDING,   CAST(NULL AS VARCHAR2(3)) AS INHERITED FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TYPE_ATTRS	     SELECT /*+ USE_MERGE(T, A, D, T1, D1) */       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       A.NAME AS ATTR_NAME,       CAST(NULL AS VARCHAR2(7)) AS ATTR_TYPE_MOD,       CAST(         CASE A.PROPERTIES         WHEN 3 THEN NULL         ELSE D1.DATABASE_NAME END AS VARCHAR2(128)) AS ATTR_TYPE_OWNER,       CAST(         CASE A.PROPERTIES         WHEN 3           THEN DECODE (BITAND(A.TYPE_ATTR_ID,1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(A.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(A.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(A.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(A.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, '',             46, DECODE(A.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ATTR_TYPE_NAME,       A.LENGTH AS LENGTH,       A.NUMBER_PRECISION AS NUMBER_PRECISION,       A.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       A.ATTRIBUTE AS ATTR_NO,       CAST('NO' AS CHAR(2)) AS INHERITED,       CAST('C' AS CHAR(1)) AS CHAR_USED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_TYPE_ATTR_REAL_AGENT A         ON T.TYPE_ID = A.TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')           AND t.database_id = d.database_id           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           and (t.database_id = USERENV('SCHEMAID')                or USER_CAN_ACCESS_OBJ(4, t.type_id, 1) = 1)       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = A.TYPE_ATTR_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL   SELECT /*+ USE_MERGE(TS, TAS, TS1) */       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       TAS.NAME AS ATTR_NAME,       CAST(NULL AS VARCHAR2(7)) AS ATTR_TYPE_MOD,       CAST(         CASE TAS.PROPERTIES         WHEN 3 THEN NULL         ELSE 'SYS' END AS VARCHAR2(128)) AS ATTR_TYPE_OWNER,       CAST(         CASE TAS.PROPERTIES         WHEN 3           THEN DECODE (BITAND(TAS.TYPE_ATTR_ID,1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(TAS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(TAS.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(TAS.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(TAS.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(TAS.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, '',             46, DECODE(TAS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE TS1.TYPE_NAME END AS VARCHAR2(324)) AS ATTR_TYPE_NAME,       TAS.LENGTH AS LENGTH,       TAS.NUMBER_PRECISION AS NUMBER_PRECISION,       TAS.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       TAS.ATTRIBUTE AS ATTR_NO,       CAST('NO' AS CHAR(2)) AS INHERITED,       CAST('C' AS CHAR(1)) AS CHAR_USED     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS JOIN SYS.ALL_VIRTUAL_TYPE_ATTR_SYS_AGENT TAS         ON TS.TYPE_ID = TAS.TYPE_ID       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS1         ON TS1.TYPE_ID = TAS.TYPE_ATTR_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TYPES	     SELECT       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       T.TYPE_ID AS TYPE_OID,       CAST(         CASE T.TYPECODE         WHEN 1 THEN 'COLLECTION'         WHEN 2 THEN 'OBJECT' END AS VARCHAR2(10)) AS TYPECODE,       T.ATTRIBUTES AS ATTRIBUTES,       T.METHODS AS METHODS,       CAST('NO' AS CHAR(2)) AS PREDEFINED,       CAST('NO' AS CHAR(2)) AS INCOMPLETE,       CAST('YES' AS CHAR(3)) AS FINAL,       CAST('YES' AS CHAR(3)) AS INSTANTIABLE,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_OWNER,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_NAME,       T.LOCAL_ATTRS AS LOCAL_ATTRIBUTES,       T.LOCAL_METHODS AS LOCAL_METHODS,       T.TYPE_ID AS TYPEID     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON D.DATABASE_ID = T.DATABASE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND (T.DATABASE_ID = USERENV('SCHEMAID')              or USER_CAN_ACCESS_OBJ(4, T.TYPE_ID, T.DATABASE_ID) = 1)         AND T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       TS.TYPE_ID AS TYPE_OID,       CAST(         CASE TS.TYPECODE         WHEN 1 THEN 'COLLECTION'         WHEN 2 THEN 'OBJECT' END AS VARCHAR2(10)) AS TYPECODE,       TS.ATTRIBUTES AS ATTRIBUTES,       TS.METHODS AS METHODS,       CAST('NO' AS CHAR(2)) AS PREDEFINED,       CAST('NO' AS CHAR(2)) AS INCOMPLETE,       CAST('YES' AS CHAR(3)) AS FINAL,       CAST('YES' AS CHAR(3)) AS INSTANTIABLE,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_OWNER,       CAST(NULL AS VARCHAR2(30)) AS SUPERTYPE_NAME,       TS.LOCAL_ATTRS AS LOCAL_ATTRIBUTES,       TS.LOCAL_METHODS AS LOCAL_METHODS,       TS.TYPE_ID AS TYPEID     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TRIGGERS	 SELECT DB1.DATABASE_NAME AS OWNER,        TRG.TRIGGER_NAME AS TRIGGER_NAME,        CAST(DECODE(BITAND(TRG.TIMING_POINTS, 30),                    4, 'BEFORE EACH ROW',                    8, 'AFTER EACH ROW')             AS VARCHAR2(16)) AS TRIGGER_TYPE,        CAST(DECODE(TRG.TRIGGER_EVENTS,                    2, 'INSERT',                    4, 'UPDATE',                    8, 'DELETE',                    2 + 4, 'INSERT OR UPDATE',                    2 + 8, 'INSERT OR DELETE',                    4 + 8, 'UPDATE OR DELETE',                    2 + 4 + 8, 'INSERT OR UPDATE OR DELETE')             AS VARCHAR2(246)) AS TRIGGERING_EVENT,        DB2.DATABASE_NAME AS TABLE_OWNER,        CAST(DECODE(TRG.BASE_OBJECT_TYPE,                    5, 'TABLE')             AS VARCHAR2(18)) AS BASE_OBJECT_TYPE,        TBL.TABLE_NAME AS TABLE_NAME,        CAST(NULL AS VARCHAR2(4000)) AS COLUMN_NAME,        CAST(CONCAT('REFERENCING', CONCAT(CONCAT(' NEW AS ', REF_NEW_NAME), CONCAT(' OLD AS ', REF_OLD_NAME)))             AS VARCHAR2(422)) AS REFERENCING_NAMES,        WHEN_CONDITION AS WHEN_CLAUSE,        CAST(decode(BITAND(TRG.trigger_flags, 1), 1, 'ENABLED', 'DISABLED') AS VARCHAR2(8)) AS STATUS,        TRIGGER_BODY AS DESCRIPTION,        CAST('PL/SQL' AS VARCHAR2(11)) AS ACTION_TYPE,        TRIGGER_BODY AS TRIGGER_BODY,        CAST('NO' AS VARCHAR2(7)) AS CROSSEDITION,        CAST('NO' AS VARCHAR2(3)) AS BEFORE_STATEMENT,        CAST('NO' AS VARCHAR2(3)) AS BEFORE_ROW,        CAST('NO' AS VARCHAR2(3)) AS AFTER_ROW,        CAST('NO' AS VARCHAR2(3)) AS AFTER_STATEMENT,        CAST('NO' AS VARCHAR2(3)) AS INSTEAD_OF_ROW,        CAST('YES' AS VARCHAR2(3)) AS FIRE_ONCE,        CAST('NO' AS VARCHAR2(3)) AS APPLY_SERVER_ONLY   FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_REAL_AGENT TRG        INNER JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB1        ON TRG.DATABASE_ID = DB1.DATABASE_ID           AND TRG.TENANT_ID = EFFECTIVE_TENANT_ID()           AND DB1.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (TRG.DATABASE_ID = USERENV('SCHEMAID')               OR USER_CAN_ACCESS_OBJ(1, abs(nvl(TRG.BASE_OBJECT_ID,0)), TRG.DATABASE_ID) = 1)        LEFT JOIN        SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TBL        ON TRG.BASE_OBJECT_ID = TBL.TABLE_ID         AND TBL.TENANT_ID = EFFECTIVE_TENANT_ID()        INNER JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB2        ON TBL.DATABASE_ID = DB2.DATABASE_ID         AND DB2.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_SUBPARTITIONS	SELECT CAST(DB_TB.DATABASE_NAME AS VARCHAR2(128)) TABLE_OWNER,      CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(PART.PART_NAME AS VARCHAR2(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NAME AS VARCHAR2(128))  SUBPARTITION_NAME,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.SUB_PART_ID + 1 AS NUMBER) SUBPARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(3)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID             AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (TB.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(1, TB.TABLE_ID, TB.DATABASE_ID) = 1)) DB_TB      JOIN      (SELECT P_PART.PART_NAME,              P_PART.SUB_PART_NUM,              P_PART.TABLE_ID,              S_PART.SUB_PART_NAME,              S_PART.HIGH_BOUND_VAL,              S_PART.LIST_VAL,              S_PART.COMPRESS_FUNC_NAME,              S_PART.SUB_PART_ID,              S_PART.TABLESPACE_ID        FROM SYS.ALL_VIRTUAL_PART_REAL_AGENT P_PART,            SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT S_PART       WHERE P_PART.PART_ID = S_PART.PART_ID AND             P_PART.TABLE_ID = S_PART.TABLE_ID              AND P_PART.TENANT_ID = EFFECTIVE_TENANT_ID()             AND S_PART.TENANT_ID = EFFECTIVE_TENANT_ID()) PART      ON      DB_TB.TABLE_ID = PART.TABLE_ID       LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID       AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()  	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_PRIVS	     SELECT B.USER_NAME AS GRANTOR,        C.USER_NAME AS GRANTEE,        E.DATABASE_NAME AS TABLE_SCHEMA,        CAST (DECODE(A.OBJTYPE,11, SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')),                         D.TABLE_NAME) AS VARCHAR(128)) AS TABLE_NAME,        CAST (DECODE(A.PRIV_ID, 1, 'ALTER',                          2, 'AUDIT',                          3, 'COMMENT',                          4, 'DELETE',                          5, 'GRANT',                          6, 'INDEX',                          7, 'INSERT',                          8, 'LOCK',                          9, 'RENAME',                          10, 'SELECT',                          11, 'UPDATE',                          12, 'REFERENCES',                          13, 'EXECUTE',                          14, 'CREATE',                          15, 'FLASHBACK',                          16, 'READ',                          17, 'WRITE',                          'OTHERS') AS VARCHAR(40)) AS PRIVILEGE,        DECODE(A.PRIV_OPTION,0,'NO', 1,'YES','') AS GRANTABLE,        CAST('NO' AS VARCHAR(10)) AS  HIERARCHY       FROM SYS.ALL_VIRTUAL_TENANT_OBJAUTH_REAL_AGENT A ,               SYS.ALL_VIRTUAL_USER_REAL_AGENT B,               SYS.ALL_VIRTUAL_USER_REAL_AGENT C,               (SELECT TABLE_ID, TABLE_NAME, DATABASE_ID                  FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT                  WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT PACKAGE_ID AS TABLE_ID, PACKAGE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT                 WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT ROUTINE_ID AS TABLE_ID, ROUTINE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT                 WHERE TENANT_ID = EFFECTIVE_TENANT_ID()                UNION ALL                SELECT SEQUENCE_ID AS TABLE_ID, SEQUENCE_NAME AS TABLE_NAME, DATABASE_ID                   FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT                 WHERE TENANT_ID = EFFECTIVE_TENANT_ID()               ) D,               SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E       WHERE A.GRANTOR_ID = B.USER_ID         AND A.GRANTEE_ID = C.USER_ID         AND A.COL_ID = 65535         AND A.OBJ_ID = D.TABLE_ID         AND D.DATABASE_ID=E.DATABASE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.DATABASE_NAME != '__recyclebin'         AND (C.USER_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')              OR E.DATABASE_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')              OR B.USER_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_PARTITIONS	SELECT CAST(DB_TB.DATABASE_NAME AS VARCHAR2(128)) TABLE_OWNER,      CAST(DB_TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE WHEN      PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) COMPOSITE,      CAST(PART.PART_NAME AS VARCHAR(128)) PARTITION_NAME,      CAST(PART.SUB_PART_NUM AS NUMBER)  SUBPARTITION_COUNT,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN PART.HIGH_BOUND_VAL ELSE PART.LIST_VAL END AS VARCHAR2(1024)) HIGH_VALUE,      CAST(CASE WHEN      length(PART.HIGH_BOUND_VAL) > 0 THEN length(PART.HIGH_BOUND_VAL) ELSE length(PART.LIST_VAL) END AS NUMBER) HIGH_VALUE_LENGTH,      CAST(PART.PART_ID + 1 AS NUMBER) PARTITION_POSITION,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) TABLESPACE_NAME,      CAST(NULL AS NUMBER) PCT_FREE,      CAST(NULL AS NUMBER) PCT_USED,      CAST(NULL AS NUMBER) INI_TRANS,      CAST(NULL AS NUMBER) MAX_TRANS,      CAST(NULL AS NUMBER) INITIAL_EXTENT,      CAST(NULL AS NUMBER) NEXT_EXTENT,      CAST(NULL AS NUMBER) MIN_EXTENT,      CAST(NULL AS NUMBER) MAX_EXTENT,      CAST(NULL AS NUMBER) MAX_SIZE,      CAST(NULL AS NUMBER) PCT_INCREASE,      CAST(NULL AS NUMBER) FREELISTS,      CAST(NULL AS NUMBER) FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) LOGGING,      CAST(CASE WHEN      PART.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(PART.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS NUMBER) NUM_ROWS,      CAST(NULL AS NUMBER) BLOCKS,      CAST(NULL AS NUMBER) EMPTY_BLOCKS,      CAST(NULL AS NUMBER) AVG_SPACE,      CAST(NULL AS NUMBER) CHAIN_CNT,      CAST(NULL AS NUMBER) AVG_ROW_LEN,      CAST(NULL AS NUMBER) SAMPLE_SIZE,      CAST(NULL AS DATE) LAST_ANALYZED,      CAST(NULL AS VARCHAR2(7)) BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(3)) GLOBAL_STATS,      CAST(NULL AS VARCHAR2(3)) USER_STATS,      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(30)) PARENT_TABLE_PARTITION,      CAST(NULL AS VARCHAR2(3)) "INTERVAL",      CAST(NULL AS VARCHAR2(4)) SEGMENT_CREATED      FROM      (SELECT DB.DATABASE_NAME,              DB.DATABASE_ID,              TB.TABLE_ID,              TB.TABLE_NAME       FROM  SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB,             SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB       WHERE TB.DATABASE_ID = DB.DATABASE_ID             AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (TB.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(1, TB.TABLE_ID, TB.DATABASE_ID) = 1)) DB_TB      JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART      ON   DB_TB.TABLE_ID = PART.TABLE_ID        AND PART.TENANT_ID = EFFECTIVE_TENANT_ID()      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = PART.TABLESPACE_ID      AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_COMMENTS	     SELECT       A.DATABASE_NAME AS OWNER,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN TABLE_TYPE = 0 OR TABLE_TYPE = 2 OR TABLE_TYPE = 3 OR TABLE_TYPE = 5 OR TABLE_TYPE = 8 OR TABLE_TYPE = 9 THEN   'TABLE' WHEN TABLE_TYPE = 1 OR TABLE_TYPE = 4 OR TABLE_TYPE = 7 THEN 'VIEW' ELSE NULL END AS VARCHAR2(11)) AS TABLE_TYPE,       CAST(B."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B     ON A.DATABASE_ID = B.DATABASE_ID     AND A.TENANT_ID = EFFECTIVE_TENANT_ID()     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     AND (A.DATABASE_ID = USERENV('SCHEMAID')         OR USER_CAN_ACCESS_OBJ(1, TABLE_ID, A.DATABASE_ID) = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_COLUMNS	select   OWNER, TABLE_NAME,   COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM   from SYS.ALL_TAB_COLS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_COLS_V$	 SELECT   cast(db.database_name as VARCHAR2(128)) as OWNER,   cast(t.table_name as VARCHAR2(128)) as  TABLE_NAME,   cast(c.column_name as VARCHAR2(128)) as  COLUMN_NAME,   cast(decode(c.data_type,         0, 'NULL',          1, 'NUMBER',         2, 'NUMBER',         3, 'NUMBER',         4, 'NUMBER',         5, 'NUMBER',          6, 'NUMBER',         7, 'NUMBER',         8, 'NUMBER',         9, 'NUMBER',         10, 'NUMBER',          11, 'BINARY_FLOAT',         12, 'BINARY_DOUBLE',          13, 'NUMBER',         14, 'NUMBER',          15, 'NUMBER',         16, 'NUMBER',          17, 'DATE',         18, 'TIMESTAMP',         19, 'DATE',         20, 'TIME',         21, 'YEAR',          22, 'VARCHAR2',         23, 'CHAR',         24, 'HEX_STRING',          25, 'EXT',         26, 'UNKNOWN',          27, 'TINYTEXT',         28, 'TEXT',         29, 'MEDIUMTEXT',         30, decode(c.collation_type, 63, 'BLOB', 'CLOB'),         31, 'BIT',         32, 'ENUM',         33, 'SET',         34, 'ENUM_INNER',         35, 'SET_INNER',         36, concat('TIMESTAMP(', concat(c.data_scale, ') WITH TIME ZONE')),         37, concat('TIMESTAMP(', concat(c.data_scale, ') WITH LOCAL TIME ZONE')),         38, concat('TIMESTAMP(', concat(c.data_scale, ')')),         39, 'RAW',         40, concat('INTERVAL YEAR(', concat(c.data_scale, ') TO MONTH')),         41, concat('INTERVAL DAY(', concat(trunc(c.data_scale/10), concat(') TO SECOND(', concat(mod(c.data_scale, 10), ')')))),         42, 'FLOAT',         43, 'NVARCHAR2',         44, 'NCHAR',         45, 'UROWID',         46, '',         'UNDEFINED') as VARCHAR2(128)) as  DATA_TYPE,   cast(NULL as VARCHAR2(3)) as  DATA_TYPE_MOD,   cast(NULL as VARCHAR2(128)) as  DATA_TYPE_OWNER,   cast(c.data_length as NUMBER) as  DATA_LENGTH,   cast(CASE WHEN c.data_type in (11,12,17,18,19,22,23,27,28,29,30,36,37,38,43,44)             THEN NULL             ELSE CASE WHEN c.data_precision < 0 THEN NULL ELSE c.data_precision END        END as NUMBER) as  DATA_PRECISION,   cast(CASE WHEN c.data_type in (11,12,17,19,22,23,27,28,29,30,42,43,44)             THEN NULL             ELSE CASE WHEN c.data_scale < -84 THEN NULL ELSE c.data_scale END        END as NUMBER) as  DATA_SCALE,   cast(decode(c.nullable, 1, 'Y', 'N') as VARCHAR2(1)) as  NULLABLE,   cast(decode(BITAND(c.column_flags, 64), 0, c.column_id, NULL) as NUMBER) as  COLUMN_ID,   cast(LENGTHB(c.cur_default_value_v2) as NUMBER) as  DEFAULT_LENGTH,   cast(c.cur_default_value_v2 as /* TODO: LONG() */ VARCHAR(128)) as  DATA_DEFAULT,   cast(NULL as NUMBER) as  NUM_DISTINCT,   cast(NULL as /* TODO: RAW */ varchar(128)) as  LOW_VALUE,   cast(NULL as /* TODO: RAW */ varchar(128)) as  HIGH_VALUE,   cast(NULL as NUMBER) as  DENSITY,   cast(NULL as NUMBER) as  NUM_NULLS,   cast(NULL as NUMBER) as  NUM_BUCKETS,   cast(NULL as DATE) as  LAST_ANALYZED,   cast(NULL as NUMBER) as  SAMPLE_SIZE,   cast(NULL as VARCHAR2(44)) as  CHARACTER_SET_NAME,   cast(NULL as NUMBER) as  CHAR_COL_DECL_LENGTH,   cast(NULL as VARCHAR2(3)) as  GLOBAL_STATS,   cast(NULL as VARCHAR2(3)) as  USER_STATS,   cast(NULL as VARCHAR2(80)) as  NOTES,   cast(NULL as NUMBER) as  AVG_COL_LEN,   cast(decode(c.data_type,          22, c.data_length,          23, c.data_length,          0) as NUMBER) as  CHAR_LENGTH,   cast(decode(c.data_type,          22, decode(c.data_precision, 1, 'C', 'B'),          23, decode(c.data_precision, 1, 'C', 'B'),          NULL) as VARCHAR2(1)) as  CHAR_USED,   cast(NULL as VARCHAR2(3)) as  V80_FMT_IMAGE,   cast(NULL as VARCHAR2(3)) as  DATA_UPGRADED,   cast(decode(BITAND(c.column_flags, 64), 0, 'NO', 'YES') as VARCHAR2(3)) as HIDDEN_COLUMN,   cast(decode(BITAND(c.column_flags, 1), 1, 'YES', 'NO') as VARCHAR2(3)) as  VIRTUAL_COLUMN,   cast(NULL as NUMBER) as  SEGMENT_COLUMN_ID,   cast(NULL as NUMBER) as  INTERNAL_COLUMN_ID,   cast(NULL as VARCHAR2(15)) as  HISTOGRAM,   cast(c.column_name as VARCHAR2(4000)) as  QUALIFIED_COL_NAME,   cast('YES' as VARCHAR2(3)) as  USER_GENERATED,   cast(NULL as VARCHAR2(3)) as  DEFAULT_ON_NULL,   cast(NULL as VARCHAR2(3)) as  IDENTITY_COLUMN,   cast(NULL as VARCHAR2(128)) as  EVALUATION_EDITION,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEFORE,   cast(NULL as VARCHAR2(128)) as  UNUSABLE_BEGINNING,   cast(NULL as VARCHAR2(100)) as  COLLATION,   cast(NULL as NUMBER) as  COLLATED_COLUMN_ID FROM     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t   JOIN     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db     ON db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND (t.database_id = userenv('SCHEMAID')          OR user_can_access_obj(1, t.table_id, t.database_id) = 1)     AND T.TENANT_ID = EFFECTIVE_TENANT_ID()     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()   JOIN     sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c     ON c.tenant_id = t.tenant_id     AND c.table_id = t.table_id     AND C.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE   c.is_hidden = 0   AND t.table_type in (0,2,3,8,9) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TAB_COLS	select   OWNER, TABLE_NAME,   COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,   DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,   DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,   DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,   CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,   GLOBAL_STATS,   USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,   V80_FMT_IMAGE, DATA_UPGRADED, HIDDEN_COLUMN, VIRTUAL_COLUMN,   SEGMENT_COLUMN_ID, INTERNAL_COLUMN_ID, HISTOGRAM, QUALIFIED_COL_NAME   from SYS.all_tab_cols_v$ 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_TABLES	 SELECT   CAST(db.database_name AS VARCHAR2(128)) AS OWNER,   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(tp.tablespace_name AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(128)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(128)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST('NO' AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() JOIN   sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db ON   db.tenant_id = t.tenant_id   AND db.database_id = t.database_id   AND db.database_name != '__recyclebin'   AND t.table_type in (3, 8, 9, 11)   AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()   AND (t.database_id = USERENV('SCHEMAID')          or user_can_access_obj(1, t.table_id, t.database_id) =1) LEFT JOIN   sys.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT tp ON   tp.tablespace_id = t.tablespace_id   AND t.tenant_id = tp.tenant_id   AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE t.session_id = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SYNONYMS	     SELECT       CASE WHEN       A.DATABASE_NAME = '__public' THEN       'PUBLIC' ELSE A.DATABASE_NAME END AS OWNER,       A.SYNONYM_NAME AS SYNONYM_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN B.DATABASE_NAME            ELSE SUBSTR(A.OBJECT_NAME, 1, INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0            THEN A.OBJECT_NAME            ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '.') + 1, INSTR(A.OBJECT_NAME, '@') - INSTR(A.OBJECT_NAME, '.') -1)            END            AS VARCHAR2(128)) AS TABLE_NAME,       CAST(CASE WHEN INSTR(A.OBJECT_NAME, '@') = 0                 THEN NULL                 ELSE SUBSTR(A.OBJECT_NAME, INSTR(A.OBJECT_NAME, '@')+1)                 END                 AS VARCHAR2(128)) AS DB_LINK     FROM       (SELECT BB.DATABASE_NAME, AA.SYNONYM_NAME,       AA.OBJECT_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT BB       WHERE AA.DATABASE_ID = BB.DATABASE_ID             AND AA.TENANT_ID = BB.TENANT_ID AND AA.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (AA.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(13, AA.SYNONYM_ID, AA.DATABASE_ID) = 1)) A,       (SELECT BB.DATABASE_NAME, AA.SYNONYM_ID       FROM       SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT AA,       SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT BB       WHERE AA.OBJECT_DATABASE_ID = BB.DATABASE_ID             AND AA.TENANT_ID = BB.TENANT_ID AND AA.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (AA.DATABASE_ID = USERENV('SCHEMAID')                 OR USER_CAN_ACCESS_OBJ(13, AA.SYNONYM_ID, AA.DATABASE_ID) = 1)) B     WHERE       A.SYNONYM_ID = B.SYNONYM_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SUBPART_KEY_COLUMNS	      SELECT  D.DATABASE_NAME AS OWNER,             CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (T.DATABASE_ID = USERENV('SCHEMAID')                OR USER_CAN_ACCESS_OBJ(1, T.TABLE_ID, T.DATABASE_ID) = 1)     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 65280)/256 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND (T.DATABASE_ID = USERENV('SCHEMAID')                OR USER_CAN_ACCESS_OBJ(1, T.DATA_TABLE_ID, T.DATABASE_ID) = 1)     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND BITAND(C.PARTITION_KEY_POSITION, 65280) > 0           AND (T.DATABASE_ID = USERENV('SCHEMAID')                OR USER_CAN_ACCESS_OBJ(1, T.DATA_TABLE_ID, T.DATABASE_ID) = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SUBPARTITION_TEMPLATES	SELECT       CAST(DB.DATABASE_NAME AS VARCHAR2(128)) USER_NAME,       TB.TABLE_NAME AS TABLE_NAME,       SP.SUB_PART_NAME AS SUBPARTITION_NAME,       SP.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,       TP.TABLESPACE_NAME AS TABLESPACE_NAME,       CAST(CASE WHEN SP.HIGH_BOUND_VAL is NULL THEN SP.LIST_VAL ELSE SP.HIGH_BOUND_VAL END AS VARCHAR2(1024)) HIGH_BOUND       FROM (SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB join SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB             on DB.database_id = TB.database_id             AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (TB.DATABASE_ID = USERENV('SCHEMAID')                  OR USER_CAN_ACCESS_OBJ(1, TB.TABLE_ID, TB.DATABASE_ID) = 1)             join SYS.ALL_VIRTUAL_DEF_SUB_PART_REAL_AGENT SP on tb.table_id = sp.table_id                 AND SP.TENANT_ID = EFFECTIVE_TENANT_ID())             left join SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP               ON TP.TABLESPACE_ID = SP.TABLESPACE_ID               AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()       	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SOURCE	     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(P.PACKAGE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE P.TYPE WHEN 1 THEN 'PACKAGE' WHEN 2 THEN 'PACKAGE BODY' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(P.SOURCE) AS TEXT,       P.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) P       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON P.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON P.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = P.TENANT_ID OR P.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND (P.DATABASE_ID = USERENV('SCHEMAID')           OR USER_CAN_ACCESS_OBJ(12, P.PACKAGE_ID, P.DATABASE_ID) = 1)     UNION ALL     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(R.ROUTINE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(R.ROUTINE_BODY) AS TEXT,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND R.PACKAGE_ID = -1       AND (R.DATABASE_ID = USERENV('SCHEMAID')           OR USER_CAN_ACCESS_OBJ(12, R.ROUTINE_ID, R.DATABASE_ID) = 1)     UNION ALL     SELECT       CAST(U.USER_NAME AS VARCHAR2(30)) AS OWNER,       CAST(T.TRIGGER_NAME AS VARCHAR2(30)) AS NAME,       CAST('TRIGGER' AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(T.TRIGGER_BODY) AS TEXT,       T.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_REAL_AGENT         WHERE TENANT_ID = EFFECTIVE_TENANT_ID())T       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON T.DATABASE_ID = D.DATABASE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON T.OWNER_ID = U.USER_ID         AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (SYS_CONTEXT('USERENV', 'CON_ID') = T.TENANT_ID OR T.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0       AND (T.DATABASE_ID = USERENV('SCHEMAID')           OR USER_CAN_ACCESS_OBJ(12, T.TRIGGER_ID, T.DATABASE_ID) = 1)     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(PS.PACKAGE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE PS.TYPE WHEN 1 THEN 'PACKAGE' WHEN 2 THEN 'PACKAGE BODY' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(PS.SOURCE) AS TEXT,       PS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(RS.ROUTINE_NAME AS VARCHAR2(30)) AS NAME,       CAST(CASE RS.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(RS.ROUTINE_BODY) AS TEXT,       RS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS WHERE RS.ROUTINE_TYPE != 3     UNION ALL     SELECT       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       CAST(TS.TRIGGER_NAME AS VARCHAR2(30)) AS NAME,       CAST('TRIGGER' AS VARCHAR2(12)) AS TYPE,       CAST(1 AS NUMBER) AS LINE,       TO_CLOB(TS.TRIGGER_BODY) AS TEXT,       TS.TENANT_ID AS ORIGIN_CON_ID     FROM       SYS.ALL_VIRTUAL_TENANT_TRIGGER_SYS_AGENT TS 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SEQUENCES	     SELECT        C.DATABASE_NAME AS SEQUENCE_OWNER       ,A.SEQUENCE_NAME AS SEQUENCE_NAME       ,A.MIN_VALUE AS MIN_VALUE       ,A.MAX_VALUE AS MAX_VALUE       ,A.INCREMENT_BY AS INCREMENT_BY       ,CASE A.CYCLE_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS CYCLE_FLAG       ,CASE A.ORDER_FLAG WHEN 1 THEN 'Y'                          WHEN 0 THEN  'N'                          ELSE NULL END AS ORDER_FLAG       ,A.CACHE_SIZE AS CACHE_SIZE       ,CAST(COALESCE(B.NEXT_VALUE,A.START_WITH) AS NUMBER(38,0)) AS LAST_NUMBER     FROM        SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT A     INNER JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     ON A.DATABASE_ID = C.DATABASE_ID AND A.TENANT_ID = C.TENANT_ID       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     AND (A.DATABASE_ID = USERENV('SCHEMAID')          OR USER_CAN_ACCESS_OBJ(2, A.SEQUENCE_ID, A.DATABASE_ID) = 1)     LEFT JOIN       SYS.ALL_VIRTUAL_SEQUENCE_VALUE_REAL_AGENT B     ON B.SEQUENCE_ID = A.SEQUENCE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SCHEDULER_PROGRAM_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS PROGRAM_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(19)) AS METADATA_ATTRIBUTE,   CAST(NULL AS VARCHAR2(4000)) AS DEFAULT_VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_SCHEDULER_JOB_ARGS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS JOB_NAME,   CAST(NULL AS VARCHAR2(30)) AS ARGUMENT_NAME,   CAST(NULL AS NUMBER) AS ARGUMENT_POSITION,   CAST(NULL AS VARCHAR2(61)) AS ARGUMENT_TYPE,   CAST(NULL AS VARCHAR2(4000)) AS VALUE,   CAST(NULL as /* TODO: RAW */ VARCHAR(128)) AS DEFAULT_ANYDATA_VALUE,   CAST(NULL AS VARCHAR2(5)) AS OUT_ARGUMENT FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_PROFILES	 SELECT   CAST(t.profile_name AS VARCHAR2(30)) AS PROFILE,   CAST(NULL AS VARCHAR2(32)) AS RESOURCE_NAME,   CAST(NULL AS VARCHAR2(8)) AS RESOURCE_TYPE,   CAST(NULL AS VARCHAR2(40)) AS LIMIT_ON_RESOURCE FROM   SYS.ALL_VIRTUAL_TENANT_PROFILE_REAL_AGENT t   WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_PROCEDURES	     SELECT       U.USER_NAME AS OWNER,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_NAME ELSE P.PACKAGE_NAME END AS OBJECT_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE R.ROUTINE_NAME END AS PROCEDURE_NAME,       CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,       CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,       CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,       CASE R.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS OBJECT_TYPE,       CAST('NO' AS VARCHAR2(3)) AS AGGREGATE,       CAST(DECODE(BITAND(R.FLAG, 128), 128, 'YES', 'NO') AS VARCHAR2(3)) AS PIPELINED,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPEOWNER,       CAST(NULL AS VARCHAR2(30)) AS IMPLTYPENAME,       CAST(DECODE(BITAND(R.FLAG, 8), 8, 'YES', 'NO') AS VARCHAR2(3)) AS PARALLEL,       CAST('NO' AS VARCHAR2(3)) AS INTERFACE,       CAST(DECODE(BITAND(R.FLAG, 4), 4, 'YES', 'NO') AS VARCHAR2(3)) AS DETERMINISTIC,       CAST(DECODE(BITAND(R.FLAG, 16), 16, 'INVOKER', 'DEFINER') AS VARCHAR2(12)) AS AUTHID,       R.TENANT_ID AS ORIGIN_CON_ID     FROM       (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT           WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) R       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID           AND U.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID           AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     WHERE       (R.DATABASE_ID = USERENV('SCHEMAID')         OR USER_CAN_ACCESS_OBJ(12, R.ROUTINE_ID, R.DATABASE_ID) = 1)       AND (SYS_CONTEXT('USERENV', 'CON_ID') = R.TENANT_ID OR R.TENANT_ID = 1)       AND D.IN_RECYCLEBIN = 0   UNION ALL   SELECT     CAST('SYS' AS VARCHAR2(30)) AS OWNER,     CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_NAME ELSE PS.PACKAGE_NAME END AS OBJECT_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN NULL ELSE RS.ROUTINE_NAME END AS PROCEDURE_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_ID ELSE RS.PACKAGE_ID END AS OBJECT_ID,     CASE RS.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE RS.SUBPROGRAM_ID END AS SUBPROGRAM_ID,     CASE RS.OVERLOAD WHEN 0 THEN NULL ELSE RS.OVERLOAD END AS OVERLOAD,     CASE RS.ROUTINE_TYPE WHEN 1 THEN 'PROCEDURE' WHEN 2 THEN 'FUNCTION' WHEN 3 THEN 'PACKAGE' END AS OBJECT_TYPE,     CAST('NO' AS VARCHAR2(3)) AS AGGREGATE,     CAST(DECODE(BITAND(RS.FLAG, 128), 128, 'YES', 'NO') AS VARCHAR2(3)) AS PIPELINED,     CAST(NULL AS VARCHAR2(30)) AS IMPLTYPEOWNER,     CAST(NULL AS VARCHAR2(30)) AS IMPLTYPENAME,     CAST(DECODE(BITAND(RS.FLAG, 8), 8, 'YES', 'NO') AS VARCHAR2(3)) AS PARALLEL,     CAST('NO' AS VARCHAR2(3)) AS INTERFACE,     CAST(DECODE(BITAND(RS.FLAG, 4), 4, 'YES', 'NO') AS VARCHAR2(3)) AS DETERMINISTIC,     CAST(DECODE(BITAND(RS.FLAG, 16), 16, 'INVOKER', 'DEFINER') AS VARCHAR2(12)) AS AUTHID,       RS.TENANT_ID AS ORIGIN_CON_ID   FROM     SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS     LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS ON RS.PACKAGE_ID = PS.PACKAGE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_PART_TABLES	SELECT CAST(DB.DATABASE_NAME AS VARCHAR2(128)) OWNER,      CAST(TB.TABLE_NAME AS VARCHAR2(128)) TABLE_NAME,      CAST(CASE TB.PART_FUNC_TYPE WHEN 0 THEN      'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY'      WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE'      WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST'      WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END      AS VARCHAR2(9)) PARTITIONING_TYPE,      CAST (DECODE(TB.PART_LEVEL, 1, 'NONE',                                  2, DECODE(TB.SUB_PART_FUNC_TYPE, 0, 'HASH',                                                                   1, 'KEY',                                                                   2, 'KEY',                                                                   3, 'RANGE',                                                                   4, 'RANGE',                                                                   5, 'LIST',                                                                   6, 'KEY',                                                                   7, 'LIST',                                                                   8, 'HASH',                                                                   9, 'KEY',                                                                   10, 'KEY'))           AS VARCHAR2(9)) SUBPARTITIONING_TYPE,      CAST(TB.PART_NUM AS NUMBER) PARTITION_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, TB.SUB_PART_NUM) AS NUMBER) DEF_SUBPARTITION_COUNT,      CAST(PART_INFO.PART_KEY_COUNT AS NUMBER) PARTITIONING_KEY_COUNT,      CAST (DECODE (TB.PART_LEVEL, 1, 0,                                   2, PART_INFO.SUBPART_KEY_COUNT) AS NUMBER) SUBPARTITIONING_KEY_COUNT,      CAST(NULL AS VARCHAR2(8)) STATUS,      CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) DEF_TABLESPACE_NAME,      CAST(NULL AS NUMBER) DEF_PCT_FREE,      CAST(NULL AS NUMBER) DEF_PCT_USED,      CAST(NULL AS NUMBER) DEF_INI_TRANS,      CAST(NULL AS NUMBER) DEF_MAX_TRANS,      CAST(NULL AS VARCHAR2(40)) DEF_INITIAL_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_NEXT_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MIN_EXTENT,      CAST(NULL AS VARCHAR2(40)) MAX_EXTENT,      CAST(NULL AS VARCHAR2(40)) DEF_MAX_SIZE,      CAST(NULL AS VARCHAR2(40)) DEF_PCT_INCREASE,      CAST(NULL AS NUMBER) DEF_FREELISTS,      CAST(NULL AS NUMBER) DEF_FREELIST_GROUPS,      CAST(NULL AS VARCHAR2(7)) DEF_LOGGING,      CAST(CASE WHEN      TB.COMPRESS_FUNC_NAME IS NULL THEN      'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) COMPRESSION,      CAST(TB.COMPRESS_FUNC_NAME AS VARCHAR2(12)) COMPRESS_FOR,      CAST(NULL AS VARCHAR2(7)) DEF_BUFFER_POOL,      CAST(NULL AS VARCHAR2(7)) DEF_FLASH_CACHE,      CAST(NULL AS VARCHAR2(7)) DEF_CELL_FLASH_CACHE,      CAST(NULL AS VARCHAR2(30)) REF_PTN_CONSTRAINT_NAME,      CAST(NULL AS VARCHAR2(1000)) "INTERVAL",      CAST(NULL AS VARCHAR2(3)) IS_NESTED,      CAST(NULL AS VARCHAR2(4)) DEF_SEGMENT_CREATED,      CAST(CASE TB.AUTO_PART WHEN 1 THEN 'AUTO_PART'      WHEN 0 THEN '' END AS VARCHAR(10)) AUTO_PART,      CAST(TB.AUTO_PART_SIZE AS NUMBER) AUTO_PART_SIZE      FROM   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB      JOIN        SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB      ON        TB.DATABASE_ID = DB.DATABASE_ID         AND TB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()        AND (TB.DATABASE_ID = USERENV('SCHEMAID')             OR USER_CAN_ACCESS_OBJ(1, TB.TABLE_ID, TB.DATABASE_ID) = 1)      JOIN        (select table_id,                sum(case when BITAND(PARTITION_KEY_POSITION, 255) > 0 then 1 else 0 end) as PART_KEY_COUNT,                sum(case when BITAND(PARTITION_KEY_POSITION, 65280) > 0 then 0 else 1 end) as SUBPART_KEY_COUNT         from SYS.ALL_VIRTUAL_COLUMN_AGENT         where PARTITION_KEY_POSITION > 0         group by table_id) PART_INFO      ON        TB.TABLE_ID = PART_INFO.TABLE_ID      LEFT JOIN        SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP      ON   TP.TABLESPACE_ID = TB.TABLESPACE_ID      AND TP.TENANT_ID = EFFECTIVE_TENANT_ID()      WHERE TB.TABLE_TYPE != 5       AND TB.PART_LEVEL != 0	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_PART_KEY_COLUMNS	     SELECT  D.DATABASE_NAME AS OWNER,             CAST(T.TABLE_NAME AS VARCHAR2(128)) AS NAME,             'TABLE' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND T.TABLE_TYPE IN (0, 2, 3, 8, 9, 10, 11)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (T.DATABASE_ID = USERENV('SCHEMAID')            OR USER_CAN_ACCESS_OBJ(1, T.TABLE_ID, T.DATABASE_ID) = 1)     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME = '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(BITAND(C.PARTITION_KEY_POSITION, 255) AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.TABLE_ID           AND T.TABLE_TYPE = 5           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (T.DATABASE_ID = USERENV('SCHEMAID')            OR USER_CAN_ACCESS_OBJ(1, T.TABLE_ID, T.DATABASE_ID) = 1)     UNION     SELECT  D.DATABASE_NAME AS OWNER,             CAST(CASE WHEN D.DATABASE_NAME =  '__recyclebin' THEN T.TABLE_NAME                 ELSE SUBSTR(T.TABLE_NAME, 7 + INSTR(SUBSTR(T.TABLE_NAME, 7), '_')) END AS VARCHAR2(128)) AS NAME,             'INDEX' AS OBJECT_TYPE,             CAST(C.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,             CAST(-1 AS NUMBER) AS COLUMN_POSITION,             CAST(NULL AS NUMBER) AS COLLATED_COLUMN_ID     FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D     WHERE C.TENANT_ID = T.TENANT_ID           AND T.TENANT_ID = D.TENANT_ID           AND T.DATABASE_ID = D.DATABASE_ID           AND C.TABLE_ID = T.DATA_TABLE_ID           AND T.TABLE_TYPE = 5           AND T.INDEX_TYPE IN (1,2)           AND C.TENANT_ID = EFFECTIVE_TENANT_ID()           AND T.TENANT_ID = EFFECTIVE_TENANT_ID()           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND BITAND(C.PARTITION_KEY_POSITION, 255) > 0           AND (T.DATABASE_ID = USERENV('SCHEMAID')            OR USER_CAN_ACCESS_OBJ(1, T.DATA_TABLE_ID, T.DATABASE_ID) = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_PART_INDEXES	 with PARTITIONED_INDEXES as ( SELECT CASE when I.INDEX_TYPE IN (1, 2) then 1 else 0 end as IS_LOCAL, DB.DATABASE_NAME AS I_OWNER, CASE WHEN DB.DATABASE_NAME !=  '__recyclebin' THEN SUBSTR(I.TABLE_NAME, 7 + INSTR(SUBSTR(I.TABLE_NAME, 7), '_')) ELSE I.TABLE_NAME END AS I_NAME, T.TABLE_NAME AS T_NAME, I.DATA_TABLE_ID AS T_ID, I.TABLE_ID AS I_ID, TP.TABLESPACE_NAME, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN I.DATA_TABLE_ID ELSE I.TABLE_ID END AS PART_INFO_T_ID, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_LEVEL ELSE I.PART_LEVEL END AS I_PART_LEVEL, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_FUNC_TYPE ELSE I.PART_FUNC_TYPE END AS I_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_FUNC_TYPE ELSE I.SUB_PART_FUNC_TYPE END AS I_SUB_PART_FUNC_TYPE, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.PART_NUM ELSE I.PART_NUM END AS I_PART_NUM, CASE WHEN I.INDEX_TYPE IN (1, 2) THEN T.SUB_PART_NUM ELSE I.SUB_PART_NUM END AS I_SUB_PART_NUM FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB ON I.DATABASE_ID = DB.DATABASE_ID   AND I.TENANT_ID = EFFECTIVE_TENANT_ID()   AND DB.TENANT_ID = EFFECTIVE_TENANT_ID() JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T ON I.DATA_TABLE_ID = T.TABLE_ID                                      AND T.TENANT_ID = EFFECTIVE_TENANT_ID()                                      AND (I.DATABASE_ID = USERENV('SCHEMAID')                                           OR USER_CAN_ACCESS_OBJ(1, I.DATA_TABLE_ID, 1) = 1) LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON  TP.TABLESPACE_ID = I.TABLESPACE_ID AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() WHERE I.TABLE_TYPE = 5 AND (I.INDEX_TYPE NOT IN (1, 2) and I.PART_LEVEL != 0  or  I.INDEX_TYPE IN (1, 2) and T.PART_LEVEL != 0) ), PART_KEY_COUNT as ( select PI.I_ID, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 255) != 0 THEN 1 ELSE 0 END) AS PARTITIONING_KEY_COUNT, SUM(CASE WHEN BITAND(C.PARTITION_KEY_POSITION, 65280)/256 != 0 THEN 1 ELSE 0 END) AS SUBPARTITIONING_KEY_COUNT from PARTITIONED_INDEXES PI join SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C on PI.PART_INFO_T_ID = C.TABLE_ID AND C.TENANT_ID = EFFECTIVE_TENANT_ID() group by I_ID ), LOCAL_INDEX_PREFIXED as ( select I.TABLE_ID AS I_ID, 1 AS IS_PREFIXED from SYS.ALL_VIRTUAL_TABLE_REAL_AGENT I where I.TABLE_TYPE = 5 AND I.INDEX_TYPE in (1,2) AND I.TENANT_ID = EFFECTIVE_TENANT_ID() AND (I.DATABASE_ID = USERENV('SCHEMAID')     OR USER_CAN_ACCESS_OBJ(1, I.DATA_TABLE_ID, I.DATABASE_ID) = 1) and not exists (select * from ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C where C.TABLE_ID = I.DATA_TABLE_ID AND C.PARTITION_KEY_POSITION != 0 AND C.TENANT_ID = EFFECTIVE_TENANT_ID() ) PART_COLUMNS left join ( select * from SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C WHERE C.TABLE_ID = I.TABLE_ID AND C.INDEX_POSITION != 0 AND C.TENANT_ID = EFFECTIVE_TENANT_ID() ) INDEX_COLUMNS ON PART_COLUMNS.COLUMN_ID = INDEX_COLUMNS.COLUMN_ID where (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != 0 AND (INDEX_COLUMNS.INDEX_POSITION is null  or BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 255) != INDEX_COLUMNS.INDEX_POSITION)) or (BITAND(PART_COLUMNS.PARTITION_KEY_POSITION, 65280)/256 != 0  AND (INDEX_COLUMNS.INDEX_POSITION is null)) ) ) SELECT CAST(PI.I_OWNER AS VARCHAR2(128)) AS OWNER, CAST(PI.I_NAME AS VARCHAR2(128)) AS INDEX_NAME, CAST(PI.T_NAME AS VARCHAR2(128)) AS TABLE_NAME,  CAST(CASE PI.I_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END AS VARCHAR2(9)) AS PARTITIONING_TYPE,  CAST( CASE WHEN PI.I_PART_LEVEL < 2 THEN 'NONE' ELSE CASE PI.I_SUB_PART_FUNC_TYPE WHEN 0 THEN 'HASH' WHEN 1 THEN 'KEY' WHEN 2 THEN 'KEY' WHEN 3 THEN 'RANGE' WHEN 4 THEN 'RANGE' WHEN 5 THEN 'LIST' WHEN 6 THEN 'KEY' WHEN 7 THEN 'LIST' WHEN 8 THEN 'HASH' WHEN 9 THEN 'KEY' WHEN 10 THEN 'KEY' END END AS VARCHAR2(9)) AS SUBPARTITIONING_TYPE,  CAST(PI.I_PART_NUM AS NUMBER) AS PARTITION_COUNT, CAST(CASE WHEN PI.I_PART_LEVEL < 2 THEN 0 ELSE PI.I_SUB_PART_NUM END AS NUMBER) AS DEF_SUBPARTITION_COUNT, CAST(PKC.PARTITIONING_KEY_COUNT AS NUMBER) AS PARTITIONING_KEY_COUNT, CAST(PKC.SUBPARTITIONING_KEY_COUNT AS NUMBER) AS SUBPARTITIONING_KEY_COUNT,  CAST(CASE WHEN PI.IS_LOCAL = 1 THEN 'LOCAL' ELSE 'GLOBAL' END AS VARCHAR2(6)) AS LOCALITY,  CAST(CASE WHEN (PI.IS_LOCAL = 0 or (PI.IS_LOCAL = 1 and LIP.IS_PREFIXED = 1)) THEN 'PREFIXED' ELSE 'NON_PREFIXED' END AS VARCHAR2(12)) AS ALIGNMENT,  CAST(PI.TABLESPACE_NAME AS VARCHAR2(30)) AS DEF_TABLESPACE_NAME, CAST(0 AS NUMBER) AS DEF_PCT_FREE, CAST(0 AS NUMBER) AS DEF_INI_TRANS, CAST(0 AS NUMBER) AS DEF_MAX_TRANS, CAST(NULL AS VARCHAR2(40)) AS DEF_INITIAL_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_NEXT_EXTENT, CAST(NULL AS VARCHAR2(40)) AS DEF_MIN_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_EXTENTS, CAST(NULL AS VARCHAR2(40)) AS DEF_MAX_SIZE, CAST(NULL AS VARCHAR2(40)) AS DEF_PCT_INCREASE, CAST(0 AS NUMBER) AS DEF_FREELISTS, CAST(0 AS NUMBER) AS DEF_FREELIST_GROUPS, CAST(NULL AS VARCHAR2(7)) AS DEF_LOGGING, CAST(NULL AS VARCHAR2(7)) AS DEF_BUFFER_POOL, CAST(NULL AS VARCHAR2(7)) AS DEF_FLASH_CACHE, CAST(NULL AS VARCHAR2(7)) AS DEF_CELL_FLASH_CACHE, CAST(NULL AS VARCHAR2(1000)) AS DEF_PARAMETERS, CAST(NULL AS VARCHAR2(1000)) AS INTERVAL  from PARTITIONED_INDEXES PI join PART_KEY_COUNT PKC on PI.I_ID = PKC.I_ID left join LOCAL_INDEX_PREFIXED LIP on PI.I_ID = LIP.I_ID     	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_OBJECTS	     SELECT      B.DATABASE_NAME AS OWNER      ,CAST((CASE WHEN B.DATABASE_NAME = '__recyclebin' THEN A.OBJECT_NAME                  WHEN A.OBJECT_TYPE = 'INDEX' THEN SUBSTR(A.OBJECT_NAME, 7 + INSTR(SUBSTR(A.OBJECT_NAME, 7), '_'))             ELSE A.OBJECT_NAME END) AS VARCHAR2(128)) AS OBJECT_NAME     ,CAST(A.SUBOBJECT_NAME AS VARCHAR2(128)) AS SUBOBJECT_NAME     ,A.OBJECT_ID AS OBJECT_ID     ,CAST(A.DATA_OBJECT_ID AS NUMBER) AS DATA_OBJECT_ID     ,CAST(A.OBJECT_TYPE AS VARCHAR2(23)) AS OBJECT_TYPE     ,CAST(A.GMT_CREATE AS DATE) AS CREATED     ,CAST(A.GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(A.GMT_CREATE) AS TIMESTAMP     ,CAST(A.STATUS AS VARCHAR2(7)) AS STATUS     ,CAST(A.TEMPORARY AS VARCHAR2(1)) AS TEMPORARY     ,CAST("GENERATED" AS VARCHAR2(1)) AS "GENERATED"     ,CAST(A.SECONDARY AS VARCHAR2(1)) AS SECONDARY     ,CAST(A.NAMESPACE AS NUMBER) AS NAMESPACE     ,CAST(A.EDITION_NAME AS VARCHAR2(128)) AS EDITION_NAME     FROM (     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TABLE_NAME OBJECT_NAME     ,NULL SUBOBJECT_NAME     ,TABLE_ID OBJECT_ID     ,NULL DATA_OBJECT_ID     ,CASE WHEN TABLE_TYPE IN (0,2,3,6,8,9,10) THEN 'TABLE'           WHEN TABLE_TYPE IN (1,4) THEN 'VIEW'           WHEN TABLE_TYPE IN (5) THEN 'INDEX'           WHEN TABLE_TYPE IN (7) THEN 'MATERIALIZED VIEW'           ELSE NULL END AS OBJECT_TYPE     ,CAST(CASE WHEN TABLE_TYPE IN (5) THEN CASE WHEN INDEX_STATUS = 2 THEN 'VALID'             WHEN INDEX_STATUS = 3 THEN 'CHECKING'             WHEN INDEX_STATUS = 4 THEN 'INELEGIBLE'             WHEN INDEX_STATUS = 5 THEN 'ERROR'             ELSE 'UNUSABLE' END           ELSE  'VALID' END AS VARCHAR2(10)) AS STATUS     ,CASE WHEN TABLE_TYPE IN (6,8,9,10) THEN 'Y'         ELSE 'N' END AS TEMPORARY     ,CASE WHEN TABLE_TYPE IN (0,1) THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     , CASE WHEN TABLE_TYPE IN (5) THEN DATA_TABLE_ID            ELSE TABLE_ID END AS PRIV_OBJECT_ID     FROM     SYS.ALL_VIRTUAL_TABLE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,P.PART_NAME SUBOBJECT_NAME     ,P.PART_ID OBJECT_ID     ,CASE WHEN P.PART_IDX != -1 THEN P.PART_ID ELSE NULL END AS DATA_OBJECT_ID     ,'TABLE PARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,CASE WHEN P.PART_IDX != -1 THEN 'Y'         ELSE 'N' END AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,T.TABLE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT P ON T.TABLE_ID = P.TABLE_ID     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     SUBP.GMT_CREATE     ,SUBP.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TABLE_NAME OBJECT_NAME     ,SUBP.SUB_PART_NAME SUBOBJECT_NAME     ,SUBP.PART_ID OBJECT_ID     ,SUBP.PART_ID AS DATA_OBJECT_ID     ,'TABLE SUBPARTITION' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'Y' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,T.TABLE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT T, SYS.ALL_VIRTUAL_PART_REAL_AGENT P,SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUBP     WHERE T.TABLE_ID =P.TABLE_ID AND P.TABLE_ID=SUBP.TABLE_ID AND P.PART_ID =SUBP.PART_ID       AND T.TENANT_ID = EFFECTIVE_TENANT_ID() AND P.TENANT_ID = EFFECTIVE_TENANT_ID() AND SUBP.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     P.GMT_CREATE     ,P.GMT_MODIFIED     ,P.DATABASE_ID     ,P.PACKAGE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,P.PACKAGE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN TYPE = 1 THEN 'PACKAGE'           WHEN TYPE = 2 THEN 'PACKAGE BODY'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE P.TENANT_ID = E.TENANT_ID AND P.PACKAGE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 3 OR E.OBJ_TYPE = 5))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,P.PACKAGE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P     WHERE P.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     R.GMT_CREATE     ,R.GMT_MODIFIED     ,R.DATABASE_ID     ,R.ROUTINE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,ROUTINE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN ROUTINE_TYPE = 1 THEN 'PROCEDURE'           WHEN ROUTINE_TYPE = 2 THEN 'FUNCTION'           ELSE NULL END AS OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT E                   WHERE R.TENANT_ID = E.TENANT_ID AND R.ROUTINE_ID = E.OBJ_ID AND (E.OBJ_TYPE = 9 OR E.OBJ_TYPE = 12))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,ROUTINE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R     WHERE (ROUTINE_TYPE = 1 OR ROUTINE_TYPE = 2) AND R.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     T.GMT_CREATE     ,T.GMT_MODIFIED     ,T.DATABASE_ID     ,T.TRIGGER_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,T.TRIGGER_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TRIGGER' OBJECT_TYPE     ,CASE WHEN EXISTS                 (SELECT OBJ_ID FROM SYS.ALL_VIRTUAL_ERROR_AGENT E                   WHERE T.TENANT_ID = E.TENANT_ID AND T.TRIGGER_ID = E.OBJ_ID AND (E.OBJ_TYPE = 7))                THEN 'INVALID'           ELSE 'VALID' END AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,T.TRIGGER_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_TRIGGER_AGENT T     WHERE T.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SYNONYM_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SYNONYM_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SYNONYM' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,SYNONYM_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_SYNONYM_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,SEQUENCE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,SEQUENCE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'SEQUENCE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,SEQUENCE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_SEQUENCE_OBJECT_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,TYPE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,TYPE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_TYPE_REAL_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     GMT_CREATE     ,GMT_MODIFIED     ,DATABASE_ID     ,OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,OBJECT_TYPE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE BODY' AS OBJECT_TYPE     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     , 0 AS NAMESPACE     ,NULL AS EDITION_NAME     ,OBJECT_TYPE_ID AS PRIV_OBJECT_ID     FROM SYS.ALL_VIRTUAL_OBJECT_TYPE_AGENT     WHERE TENANT_ID = EFFECTIVE_TENANT_ID() and TYPE = 2     )A     JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B     ON A.DATABASE_ID = B.DATABASE_ID     AND B.TENANT_ID = EFFECTIVE_TENANT_ID()     AND (A.DATABASE_ID = USERENV('SCHEMAID')              or USER_CAN_ACCESS_OBJ(DECODE(OBJECT_TYPE, 'TABLE', 1,                                                         'VIEW', 1,                                                         'INDEX', 1,                                                         'MATERIALIZED VIEW',9,                                                         'TABLE PARTITION',1,                                                         'TABLE SUBPARTITION', 1,                                                         'PACKAGE', 3,                                                         'PACKAGE BODY', 3,                                                         'PROCEDURE', 12,                                                         'FUNCTION', 9,                                                         'SYNONYM', 13,                                                         'SEQUENCE', 2,                                                         'TYPE', 4,                                                         1), A.PRIV_OBJECT_ID, A.DATABASE_ID) =1       )   UNION ALL   SELECT     'SYS' AS OWNER     ,TS.TYPE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,TS.TYPE_ID AS OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TYPE' AS OBJECT_TYPE     ,CAST(TS.GMT_CREATE AS DATE) AS CREATED     ,CAST(TS.GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(TS.GMT_CREATE) AS TIMESTAMP     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     ,0 AS NAMESPACE     ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS   UNION ALL   SELECT     'SYS' AS OWNER     ,PACKAGE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,PACKAGE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN TYPE = 1 THEN 'PACKAGE'           WHEN TYPE = 2 THEN 'PACKAGE BODY'           ELSE NULL END AS OBJECT_TYPE     ,CAST(GMT_CREATE AS DATE) AS CREATED     ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(GMT_CREATE) AS TIMESTAMP     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     ,0 AS NAMESPACE     ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT   UNION ALL   SELECT     'SYS' AS OWNER     ,ROUTINE_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,ROUTINE_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,CASE WHEN ROUTINE_TYPE = 1 THEN 'PROCEDURE'           WHEN ROUTINE_TYPE = 2 THEN 'FUNCTION'           ELSE NULL END AS OBJECT_TYPE     ,CAST(GMT_CREATE AS DATE) AS CREATED     ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(GMT_CREATE) AS TIMESTAMP     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     ,0 AS NAMESPACE     ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT   UNION ALL   SELECT     'SYS' AS OWNER     ,TRIGGER_NAME AS OBJECT_NAME     ,NULL AS SUBOBJECT_NAME     ,TRIGGER_ID OBJECT_ID     ,NULL AS DATA_OBJECT_ID     ,'TRIGGER' AS OBJECT_TYPE     ,CAST(GMT_CREATE AS DATE) AS CREATED     ,CAST(GMT_MODIFIED AS DATE) AS LAST_DDL_TIME     ,TO_CHAR(GMT_CREATE) AS TIMESTAMP     ,'VALID' AS STATUS     ,'N' AS TEMPORARY     ,'N' AS "GENERATED"     ,'N' AS SECONDARY     ,0 AS NAMESPACE     ,NULL AS EDITION_NAME   FROM SYS.ALL_VIRTUAL_TENANT_TRIGGER_SYS_AGENT 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_MVIEW_COMMENTS	 SELECT   db.DATABASE_NAME AS OWNER,   CAST(t.TABLE_NAME AS VARCHAR2(128)) AS MVIEW_NAME,   CAST(t."COMMENT" AS VARCHAR(4000)) AS COMMENTS FROM   SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT db,   SYS.ALL_VIRTUAL_TABLE_REAL_AGENT t WHERE     db.DATABASE_ID = t.DATABASE_ID     AND t.TABLE_TYPE = 7     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND T.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_METHOD_PARAMS	 SELECT   CAST(NULL AS VARCHAR2(30)) AS OWNER,   CAST(NULL AS VARCHAR2(30)) AS TYPE_NAME,   CAST(NULL AS VARCHAR2(30)) AS METHOD_NAME,   CAST(NULL AS NUMBER) AS METHOD_NO,   CAST(NULL AS VARCHAR2(30)) AS PARAM_NAME,   CAST(NULL AS NUMBER) AS PARAM_NO,   CAST(NULL AS VARCHAR2(6)) AS PARAM_MODE,   CAST(NULL AS VARCHAR2(7)) AS PARAM_TYPE_MOD,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_OWNER,   CAST(NULL AS VARCHAR2(30)) AS PARAM_TYPE_NAME,   CAST(NULL AS VARCHAR2(44)) AS CHARACTER_SET_NAME FROM   DUAL WHERE   1 = 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_IND_SUBPARTITIONS	   SELECT     CAST(B.INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(PART.PART_NAME AS VARCHAR2(128)) AS PARTITION_NAME,     CAST(SUB_PART.SUB_PART_NAME AS VARCHAR2(128)) AS SUBPARTITION_NAME,     CAST(SUB_PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(SUB_PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     SUB_PART.SUB_PART_ID + 1 AS SUBPARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID*/       A.DATA_TABLE_ID AS DATA_TABLE_ID,       A.PART_LEVEL AS INDEX_TABLE_PART_LEVEL,       TB2.PART_LEVEL AS DATA_TABLE_PART_LEVEL,       /* CAST(CASE WHEN A.PART_LEVEL=2 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL */       CAST('TRUE' AS VARCHAR2(5)) AS IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin'           AND TB1.DATABASE_ID=DB.DATABASE_ID           AND TB1.TABLE_TYPE=5           AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()           AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (TB1.DATABASE_ID = USERENV('SCHEMAID')                  OR USER_CAN_ACCESS_OBJ(1, TB1.DATA_TABLE_ID, TB1.DATABASE_ID) = 1)        ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID             AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=2 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=2)       ) B, SYS.ALL_VIRTUAL_PART_REAL_AGENT PART, SYS.ALL_VIRTUAL_SUB_PART_REAL_AGENT SUB_PART       WHERE ((B.IS_LOCAL='FALSE' AND B.TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID)               OR (B.IS_LOCAL='TRUE' AND B.DATA_TABLE_ID=PART.TABLE_ID AND PART.TABLE_ID=SUB_PART.TABLE_ID AND PART.PART_ID=SUB_PART.PART_ID))           AND SUB_PART.TENANT_ID = EFFECTIVE_TENANT_ID()           AND PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_IND_PARTITIONS	   SELECT     CAST(B.INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(B.INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(CASE WHEN PART.SUB_PART_NUM <=0 THEN 'NO' ELSE 'YES' END AS VARCHAR(3)) AS COMPOSITE,     CAST(PART.PART_NAME AS VARCHAR2(128)) AS PARTITION_NAME,     PART.SUB_PART_NUM AS SUBPARTITION_COUNT,     CAST(PART.HIGH_BOUND_VAL AS VARCHAR2(1024)) AS HIGH_VALUE,     CAST(LENGTH(PART.HIGH_BOUND_VAL) AS NUMBER) AS HIGH_VALUE_LENGTH,     PART.PART_ID + 1 AS PARTITION_POSITION,     CAST(NULL AS VARCHAR2(8)) AS STATUS,     CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,     CAST(NULL AS NUMBER) AS PCT_FREE,     CAST(NULL AS NUMBER) AS INI_TRANS,     CAST(NULL AS NUMBER) AS MAX_TRANS,     CAST(NULL AS NUMBER) AS INITIAL_EXTENT,     CAST(NULL AS NUMBER) AS NEXT_EXTENT,     CAST(NULL AS NUMBER) AS MIN_EXTENT,     CAST(NULL AS NUMBER) AS MAX_EXTENT,     CAST(NULL AS NUMBER) AS MAX_SIZE,     CAST(NULL AS NUMBER) AS PCT_INCREASE,     CAST(NULL AS NUMBER) AS FREELISTS,     CAST(NULL AS NUMBER) AS FREELIST_GROUPS,     CAST(NULL AS VARCHAR2(7)) AS LOGGING,     CAST(CASE WHEN PART.COMPRESS_FUNC_NAME IS NULL THEN 'DISABLED' ELSE 'ENABLED' END AS VARCHAR2(8)) AS COMPRESSION,     CAST(NULL AS NUMBER) AS BLEVEL,     CAST(NULL AS NUMBER) AS LEAF_BLOCKS,     CAST(NULL AS NUMBER) AS DISTINCT_KEYS,     CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,     CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,     CAST(NULL AS NUMBER) AS NUM_ROWS,     CAST(NULL AS NUMBER) AS SAMPLE_SIZE,     CAST(NULL AS DATE) AS LAST_ANALYZED,     CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,     CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,     CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,     CAST(NULL AS VARCHAR2(3)) AS USER_STATS,     CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,     CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,     CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,     CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,     CAST(NULL AS VARCHAR2(3)) AS INTERVAL,     CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED     FROM(       SELECT       A.INDEX_OWNER AS INDEX_OWNER,       A.INDEX_NAME AS INDEX_NAME,       A.INDEX_TABLE_ID AS TABLE_ID, /*INDEX TABLE ID*/       A.DATA_TABLE_ID AS DATA_TABLE_ID,       CAST(CASE WHEN A.PART_LEVEL=1 THEN 'FALSE' ELSE 'TRUE' END AS VARCHAR2(5)) IS_LOCAL       FROM(         SELECT           DB.DATABASE_NAME AS INDEX_OWNER,           SUBSTR(TB1.TABLE_NAME, 7 + INSTR(SUBSTR(TB1.TABLE_NAME, 7), '_')) AS INDEX_NAME,           TB1.TABLE_ID AS INDEX_TABLE_ID,           TB1.DATA_TABLE_ID AS DATA_TABLE_ID,           TB1.INDEX_TYPE AS INDEX_TYPE,           TB1.PART_LEVEL AS PART_LEVEL /*USE DATA TABLE'S PART_LEVEL IF INDEX IS LOCAL INDEX*/         FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB1, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT DB         WHERE DB.DATABASE_NAME!='__recyclebin'          AND TB1.DATABASE_ID=DB.DATABASE_ID          AND TB1.TABLE_TYPE=5          AND TB1.TENANT_ID = EFFECTIVE_TENANT_ID()          AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()          AND (TB1.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, TB1.DATA_TABLE_ID, TB1.DATABASE_ID) = 1)       ) A JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT TB2 ON A.DATA_TABLE_ID=TB2.TABLE_ID           AND TB2.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE A.PART_LEVEL=1 OR ((A.INDEX_TYPE=1 OR A.INDEX_TYPE=2) AND TB2.PART_LEVEL=1)     ) B JOIN SYS.ALL_VIRTUAL_PART_REAL_AGENT PART ON     ((B.TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='FALSE') OR (B.DATA_TABLE_ID=PART.TABLE_ID AND B.IS_LOCAL='TRUE'))     AND PART.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_IND_EXPRESSIONS	   SELECT CAST(INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,     CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,     CAST(H.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(COLUMN_EXPRESSION /* TODO: LONG */ AS VARCHAR2(1000)) AS COLUMN_EXPRESSION,     COLUMN_POSITION   FROM   (   SELECT INDEX_OWNER,     INDEX_NAME,     TABLE_OWNER,     F.CUR_DEFAULT_VALUE_V2 AS COLUMN_EXPRESSION,     E.INDEX_POSITION AS  COLUMN_POSITION,     E.TABLE_ID AS TABLE_ID     FROM       (SELECT INDEX_OWNER,               INDEX_NAME,               TABLE_OWNER,               C.TABLE_ID AS TABLE_ID,               C.INDEX_ID AS INDEX_ID,               D.COLUMN_ID AS COLUMN_ID,               D.COLUMN_NAME AS COLUMN_NAME, D.INDEX_POSITION AS INDEX_POSITION       FROM         (SELECT DATABASE_NAME AS INDEX_OWNER,                         SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_')) AS INDEX_NAME,                 DATABASE_NAME AS TABLE_OWNER,                 A.DATA_TABLE_ID AS TABLE_ID,                 A.TABLE_ID AS INDEX_ID           FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID           AND A.TENANT_ID = EFFECTIVE_TENANT_ID()           AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (A.DATABASE_ID = USERENV('SCHEMAID')                OR USER_CAN_ACCESS_OBJ(1, A.DATA_TABLE_ID, A.DATABASE_ID) = 1)           AND B.DATABASE_NAME != '__recyclebin'           WHERE TABLE_TYPE=5 ) C       JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D ON C.INDEX_ID=D.TABLE_ID         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()) E     JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON F.TABLE_ID=E.TABLE_ID         AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     AND F.COLUMN_ID=E.COLUMN_ID     AND F.COLUMN_FLAGS=1) G   JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT H ON G.TABLE_ID=H.TABLE_ID       AND H.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_IND_COLUMNS	     SELECT       CAST(INDEX_OWNER AS VARCHAR2(128)) AS INDEX_OWNER,       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(ROWKEY_POSITION AS NUMBER) AS COLUMN_POSITION,       CASE WHEN DATA_TYPE >= 1 AND DATA_TYPE <= 16 THEN CAST(22 AS NUMBER)            WHEN DATA_TYPE = 17 THEN CAST(7 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 2 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (45, 46, 224, 54, 55, 101) THEN CAST(DATA_LENGTH * 4 AS NUMBER)            WHEN DATA_TYPE IN (22, 23) AND F.DATA_PRECISION = 1 AND F.COLLATION_TYPE IN (28, 87) THEN CAST(DATA_LENGTH * 2 AS NUMBER)            WHEN DATA_TYPE = 36 THEN CAST(12 AS NUMBER)            WHEN DATA_TYPE IN (37, 38) THEN CAST(11 AS NUMBER)            WHEN DATA_TYPE = 39 THEN CAST(DATA_LENGTH AS NUMBER)            WHEN DATA_TYPE = 40 THEN CAST(5 AS NUMBER)            WHEN DATA_TYPE = 41 THEN CAST(11 AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS COLUMN_LENGTH,       CASE WHEN DATA_TYPE IN (22, 23) THEN CAST(DATA_LENGTH AS NUMBER)         ELSE CAST(0 AS NUMBER) END AS CHAR_LENGTH,       CAST('ASC' AS VARCHAR2(4)) AS DESCEND       FROM         (SELECT         INDEX_OWNER,         INDEX_NAME,         TABLE_OWNER,         TABLE_NAME,         INDEX_ID,         IDX_TYPE         FROM           (SELECT           DATABASE_NAME AS INDEX_OWNER,           CASE WHEN (TABLE_TYPE = 5) THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))             ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,           DATABASE_NAME AS TABLE_OWNER,           CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID             ELSE A.DATA_TABLE_ID END AS TABLE_ID,           A.TABLE_ID AS INDEX_ID,           TABLE_TYPE AS IDX_TYPE           FROM             SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A             JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID             AND TABLE_TYPE IN (5, 3)             AND B.DATABASE_NAME != '__recyclebin'             AND A.TENANT_ID = EFFECTIVE_TENANT_ID()             AND B.TENANT_ID = EFFECTIVE_TENANT_ID()             AND (A.DATABASE_ID = USERENV('SCHEMAID')                  OR USER_CAN_ACCESS_OBJ(1, DECODE(TABLE_TYPE, 3, TABLE_ID, 5, DATA_TABLE_ID), A.DATABASE_ID) = 1)             LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB               ON (CONS_TAB.TABLE_ID = A.TABLE_ID AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID())           WHERE             NOT(             TABLE_TYPE = 3             AND CONSTRAINT_NAME IS NULL             )           ) C         JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID               AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         ) E         JOIN SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT F ON E.INDEX_ID = F.TABLE_ID               AND F.TENANT_ID = EFFECTIVE_TENANT_ID()       WHERE         F.ROWKEY_POSITION != 0 AND (CASE WHEN IDX_TYPE = 5 THEN INDEX_POSITION ELSE 1 END) != 0 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_INDEXES	     SELECT       CAST(INDEX_OWNER AS VARCHAR2(128)) AS OWNER,       CAST(INDEX_NAME AS VARCHAR2(128)) AS INDEX_NAME,       CAST(INDEX_TYPE_NAME AS VARCHAR2(27)) AS INDEX_TYPE,       CAST(TABLE_OWNER AS VARCHAR2(128)) AS TABLE_OWNER,       CAST(TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST('TABLE' AS CHAR(5)) AS TABLE_TYPE,       CAST(UNIQUENESS AS VARCHAR2(9)) AS UNIQUENESS,       CAST(COMPRESSION AS VARCHAR2(8)) AS COMPRESSION,       CAST(NULL AS NUMBER) AS PREFIX_LENGTH,       CAST(TP.TABLESPACE_NAME AS VARCHAR2(30)) AS TABLESPACE_NAME,       CAST(NULL AS NUMBER) AS INI_TRANS,       CAST(NULL AS NUMBER) AS MAX_TRANS,       CAST(NULL AS NUMBER) AS INITIAL_EXTENT,       CAST(NULL AS NUMBER) AS NEXT_EXTENT,       CAST(NULL AS NUMBER) AS MIN_EXTENTS,       CAST(NULL AS NUMBER) AS MAX_EXTENTS,       CAST(NULL AS NUMBER) AS PCT_INCREASE,       CAST(NULL AS NUMBER) AS PCT_THRESHOLD,       CAST(NULL AS NUMBER) AS INCLUDE_COLUMN,       CAST(NULL AS NUMBER) AS FREELISTS,       CAST(NULL AS NUMBER) AS FREELIST_GROUPS,       CAST(NULL AS NUMBER) AS PCT_FREE,       CAST(NULL AS VARCHAR2(3)) AS LOGGING,       CAST(NULL AS NUMBER) AS BLEVEL,       CAST(NULL AS NUMBER) AS LEAF_BLOCKS,       CAST(NULL AS NUMBER) AS DISTINCT_KEYS,       CAST(NULL AS NUMBER) AS AVG_LEAF_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS AVG_DATA_BLOCKS_PER_KEY,       CAST(NULL AS NUMBER) AS CLUSTERING_FACTOR,       CAST(STATUS AS VARCHAR2(10)) AS STATUS,       CAST(NULL AS NUMBER) AS NUM_ROWS,       CAST(NULL AS NUMBER) AS SAMPLE_SIZE,       CAST(NULL AS DATE) AS LAST_ANALYZED,       CAST(NULL AS VARCHAR2(40)) AS DEGREE,       CAST(NULL AS VARCHAR2(40)) AS INSTANCES,       CAST(CASE WHEN A_TABLE_TYPE = 3 THEN 'NO'                 WHEN A_INDEX_TYPE = 1 OR A_INDEX_TYPE = 2                 THEN (CASE WHEN D.PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END)            ELSE (CASE WHEN A_PART_LEVEL = 0 THEN 'NO' ELSE 'YES' END) END  AS VARCHAR2(3)) AS PARTITIONED,       CAST(NULL AS VARCHAR2(1)) AS TEMPORARY,       CAST(NULL AS VARCHAR2(1)) AS "GENERATED",       CAST(NULL AS VARCHAR2(1)) AS SECONDARY,       CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,       CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,       CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,       CAST(NULL AS VARCHAR2(3)) AS USER_STATS,       CAST(NULL AS VARCHAR2(15)) AS DURATION,       CAST(NULL AS NUMBER) AS PCT_DIRECT_ACCESS,       CAST(NULL AS VARCHAR2(30)) AS ITYP_OWNER,       CAST(NULL AS VARCHAR2(30)) AS ITYP_NAME,       CAST(NULL AS VARCHAR2(1000)) AS PARAMETERS,       CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,       CAST(NULL AS VARCHAR2(12)) AS DOMIDX_STATUS,       CAST(NULL AS VARCHAR2(6)) AS DOMIDX_OPSTATUS,       CAST(FUNCIDX_STATUS AS VARCHAR2(8)) AS FUNCIDX_STATUS,       CAST('NO' AS VARCHAR2(3)) AS JOIN_INDEX,       CAST(NULL AS VARCHAR2(3)) AS IOT_REDUNDANT_PKEY_ELIM,       CAST(DROPPED AS VARCHAR2(9)) AS DROPPED,       CAST(VISIBILITY AS VARCHAR2(10)) AS VISIBILITY,       CAST(NULL AS VARCHAR2(14)) AS DOMIDX_MANAGEMENT,       CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED       FROM         (SELECT         DATABASE_NAME AS INDEX_OWNER,         CASE WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME !=  '__recyclebin') THEN SUBSTR(TABLE_NAME, 7 + INSTR(SUBSTR(TABLE_NAME, 7), '_'))              WHEN (TABLE_TYPE = 5 AND B.DATABASE_NAME =  '__recyclebin') THEN TABLE_NAME           ELSE (CONS_TAB.CONSTRAINT_NAME) END AS INDEX_NAME,          CASE           WHEN A.TABLE_TYPE = 5 AND EXISTS (             SELECT 1             FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_INDEX,                  SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT T_COL_BASE             WHERE T_COL_BASE.TABLE_ID = A.DATA_TABLE_ID               AND T_COL_BASE.COLUMN_NAME = T_COL_INDEX.COLUMN_NAME               AND T_COL_INDEX.TABLE_ID = A.TABLE_ID               AND T_COL_BASE.TENANT_ID = A.TENANT_ID               AND T_COL_INDEX.TENANT_ID = A.TENANT_ID               AND BITAND(T_COL_BASE.COLUMN_FLAGS,3) > 0           ) THEN 'FUNCTION-BASED NORMAL'           ELSE 'NORMAL'         END AS INDEX_TYPE_NAME,          DATABASE_NAME AS TABLE_OWNER,         CASE WHEN (TABLE_TYPE = 3) THEN A.TABLE_ID           ELSE A.DATA_TABLE_ID END AS TABLE_ID,         A.TABLE_ID AS INDEX_ID,         CASE WHEN TABLE_TYPE = 3 THEN 'UNIQUE'              WHEN A.INDEX_TYPE IN (2, 4, 8) THEN 'UNIQUE'           ELSE 'NONUNIQUE' END AS UNIQUENESS,         CASE WHEN A.COMPRESS_FUNC_NAME = NULL THEN 'DISABLED'           ELSE 'ENABLED' END AS COMPRESSION,         CASE WHEN TABLE_TYPE = 3 THEN 'VALID'              WHEN A.INDEX_STATUS = 2 THEN 'VALID'              WHEN A.INDEX_STATUS = 3 THEN 'CHECKING'              WHEN A.INDEX_STATUS = 4 THEN 'INELEGIBLE'              WHEN A.INDEX_STATUS = 5 THEN 'ERROR'           ELSE 'UNUSABLE' END AS STATUS,         A.INDEX_TYPE AS A_INDEX_TYPE,         A.PART_LEVEL AS A_PART_LEVEL,         A.TABLE_TYPE AS A_TABLE_TYPE,         CASE WHEN 0 = (SELECT COUNT(1) FROM SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT                         WHERE TABLE_ID = A.TABLE_ID AND IS_HIDDEN = 0                           AND TENANT_ID = EFFECTIVE_TENANT_ID()) THEN 'ENABLED'           ELSE 'NULL' END AS FUNCIDX_STATUS,         CASE WHEN B.DATABASE_NAME = '__recyclebin' THEN 'YES'           ELSE 'NO' END AS DROPPED,         CASE WHEN BITAND(A.INDEX_ATTRIBUTES_SET, 1) = 0 THEN 'VISIBLE'           ELSE 'INVISIBLE' END AS VISIBILITY,         A.TABLESPACE_ID         FROM           SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A           JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT B ON A.DATABASE_ID = B.DATABASE_ID               AND A.TENANT_ID = EFFECTIVE_TENANT_ID()               AND B.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (A.DATABASE_ID = USERENV('SCHEMAID')                OR USER_CAN_ACCESS_OBJ(1, DECODE(TABLE_TYPE, 3, A.TABLE_ID, 5, DATA_TABLE_ID), A.DATABASE_ID) = 1)           AND TABLE_TYPE IN (5, 3)           LEFT JOIN SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT CONS_TAB             ON (CONS_TAB.TABLE_ID = A.TABLE_ID AND CONS_TAB.TENANT_ID = EFFECTIVE_TENANT_ID())         WHERE           NOT(TABLE_TYPE = 3 AND CONSTRAINT_NAME IS NULL) AND (CONS_TAB.CONSTRAINT_TYPE IS NULL OR CONS_TAB.CONSTRAINT_TYPE = 1)         ) C       JOIN SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D ON C.TABLE_ID = D.TABLE_ID                 AND D.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_TENANT_TABLESPACE_REAL_AGENT TP ON C.TABLESPACE_ID = TP.TABLESPACE_ID                 AND TP.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_ERRORS	 SELECT   CAST(o.owner AS VARCHAR2(128)) AS OWNER,   CAST(o.object_name AS VARCHAR2(128)) AS NAME,   CAST(o.object_type AS VARCHAR2(19)) AS TYPE,   CAST(e.obj_seq AS NUMBER) AS SEQUENCE,   CAST(e.line AS NUMBER) AS LINE,   CAST(e.position AS NUMBER) AS POSITION,   CAST(e.text as VARCHAR2(4000)) AS TEXT,   CAST(DECODE(e.property, 0, 'ERROR', 1, 'WARNING', 'UNDEFINED') AS VARCHAR2(9)) AS ATTRIBUTE,   CAST(e.error_number AS NUMBER) AS MESSAGE_NUMBER FROM   all_objects o,  (select obj_id, obj_seq, line, position, text, property, error_number, CAST( UPPER(decode(obj_type,                                    3, 'PACKAGE',                                    4, 'TYPE',                                    5, 'PACKAGE BODY',                                    6, 'TYPE BODY',                                    7, 'TRIGGER',                                    8, 'VIEW',                                    9, 'FUNCTION',                                    12, 'PROCEDURE',                                    'MAXTYPE')) AS VARCHAR2(23)) object_type from sys.ALL_VIRTUAL_TENANT_ERROR_REAL_AGENT                       WHERE TENANT_ID = EFFECTIVE_TENANT_ID())  e WHERE   o.object_id = e.obj_id   AND o.object_type like e.object_type   AND o.object_type IN (UPPER('package'),                         UPPER('type'),                         UPPER('procedure'),                         UPPER('function'),                         UPPER('package body'),                         UPPER('view'),                         UPPER('trigger'),                         UPPER('type body'),                         UPPER('library'),                         UPPER('queue'),                         UPPER('java source'),                         UPPER('java class'),                         UPPER('dimension'),                         UPPER('assembly'),                         UPPER('hierarchy'),                         UPPER('arrtibute dimension'),                         UPPER('analytic view'))   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_DEPENDENCIES	     SELECT      o.OWNER AS OWNER,      o.OBJECT_NAME AS NAME,      o.OBJECT_TYPE AS TYPE,      ro.REFERENCED_OWNER AS REFERENCED_OWNER,      ro.REFERENCED_NAME AS REFERENCED_NAME,      DECODE(ro.REFERENCED_TYPE, NULL, ' NON-EXISTENT', ro.REFERENCED_TYPE) AS REFERENCED_TYPE,      CAST(NULL AS VARCHAR2(128)) AS REFERENCED_LINK_NAME,      CAST(DECODE(BITAND(o.PROPERTY, 3), 2, 'REF', 'HARD') AS VARCHAR2(4)) AS DEPENDENCY_TYPE      FROM (select             OWNER,             OBJECT_NAME,             OBJECT_TYPE,             REF_OBJ_NAME,             ref_obj_type,             dep_obj_id,             dep_obj_type,             dep_order,             property             from SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d             WHERE CAST(UPPER(decode(d.dep_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                 'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.DEP_OBJ_ID = o.OBJECT_ID) o                 LEFT OUTER JOIN                 (SELECT DISTINCT                   CAST(OWNER AS VARCHAR2(128)) AS REFERENCED_OWNER,                   CAST(OBJECT_NAME AS VARCHAR2(128)) AS REFERENCED_NAME,                   CAST(OBJECT_TYPE AS VARCHAR2(18)) AS REFERENCED_TYPE,                   dep_obj_id,                   dep_obj_type,                   dep_order FROM                   SYS.ALL_OBJECTS o, SYS.ALL_VIRTUAL_DEPENDENCY_AGENT d                   WHERE CAST(UPPER(decode(d.ref_obj_type,                       1, 'TABLE',                       2, 'SEQUENCE',                       3, 'PACKAGE',                       4, 'TYPE',                       5, 'PACKAGE BODY',                       6, 'TYPE BODY',                       7, 'TRIGGER',                       8, 'VIEW',                       9, 'FUNCTION',                       10, 'DIRECTORY',                       11, 'INDEX',                       12, 'PROCEDURE',                       13, 'SYNONYM',                       'MAXTYPE')) AS VARCHAR2(23)) = o.OBJECT_TYPE AND d.REF_OBJ_ID = o.OBJECT_ID) ro                     on ro.dep_obj_id = o.dep_obj_id AND ro.dep_obj_type = o.dep_obj_type                       AND ro.dep_order = o.dep_order 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_CONS_COLUMNS	     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(D.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.INDEX_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT D       WHERE A.DATA_TABLE_ID = B.TABLE_ID         AND A.DATABASE_ID = C.DATABASE_ID         AND (A.DATABASE_ID = USERENV('SCHEMAID')             OR USER_CAN_ACCESS_OBJ(1, A.DATA_TABLE_ID, A.DATABASE_ID) = 1)         AND D.TABLE_ID = A.TABLE_ID         AND A.INDEX_TYPE IN (2, 4, 8)         AND C.DATABASE_NAME != '__recyclebin'         AND D.IS_HIDDEN = 0         AND D.INDEX_POSITION != 0     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(E.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(D.POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_FOREIGN_KEY_COLUMN_REAL_AGENT D, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT E       WHERE A.CHILD_TABLE_ID = B.TABLE_ID         AND B.DATABASE_ID = C.DATABASE_ID         AND (B.DATABASE_ID = USERENV('SCHEMAID')             OR USER_CAN_ACCESS_OBJ(1, A.CHILD_TABLE_ID, 1) = 1)         AND A.FOREIGN_KEY_ID = D.FOREIGN_KEY_ID         AND D.CHILD_COLUMN_ID = E.COLUMN_ID         AND B.TABLE_ID = E.TABLE_ID         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(D.CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CAST(A.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CAST(B.COLUMN_NAME AS VARCHAR2(4000)) AS COLUMN_NAME,       CAST(B.ROWKEY_POSITION AS NUMBER) AS POSITION       FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT D       WHERE A.TABLE_ID = D.TABLE_ID         AND D.CONSTRAINT_TYPE = 1         AND A.TABLE_ID = B.TABLE_ID         AND A.DATABASE_ID = C.DATABASE_ID         AND (A.DATABASE_ID = USERENV('SCHEMAID')             OR USER_CAN_ACCESS_OBJ(1, A.TABLE_ID, 1) = 1)         AND B.ROWKEY_POSITION > 0         AND C.DATABASE_NAME != '__recyclebin' AND B.IS_HIDDEN = 0         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_CONSTRAINTS	     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('U' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(NULL AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,     CAST('ENABLED' AS VARCHAR2(8)) AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CAST('VALIDATED' AS VARCHAR2(13)) AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CAST(NULL AS VARCHAR2(4)) AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(SUBSTR(A.TABLE_NAME, 7 + INSTR(SUBSTR(A.TABLE_NAME, 7), '_')) AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_TABLE_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE A.DATA_TABLE_ID = B.TABLE_ID       AND A.DATABASE_ID = C.DATABASE_ID       AND (A.DATABASE_ID = USERENV('SCHEMAID')           OR USER_CAN_ACCESS_OBJ(1, A.DATA_TABLE_ID, A.DATABASE_ID) = 1)       AND A.INDEX_TYPE IN (2, 4, 8) AND C.DATABASE_NAME != '__recyclebin'       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'       ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE A.CHILD_TABLE_ID = B.TABLE_ID AND B.DATABASE_ID = C.DATABASE_ID AND A.REF_CST_TYPE = 0 AND A.REF_CST_ID = -1         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND (B.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, B.TABLE_ID, B.DATABASE_ID) = 1)     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 2 THEN SUBSTR(F.TABLE_NAME, 7 + INSTR(SUBSTR(F.TABLE_NAME, 7), '_'))          ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID         AND B.DATABASE_ID = C.DATABASE_ID         AND A.PARENT_TABLE_ID = D.TABLE_ID         AND D.DATABASE_ID = E.DATABASE_ID         AND (D.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, D.TABLE_ID, D.DATABASE_ID) = 1)         AND (A.REF_CST_ID = F.TABLE_ID AND A.REF_CST_TYPE = 2)         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()         AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT     CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,     CAST(A.FOREIGN_KEY_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,     CAST('R' AS VARCHAR2(1)) AS CONSTRAINT_TYPE,     CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,     CAST(NULL AS VARCHAR2(4000)) AS SEARCH_CONDITION,     CAST(E.DATABASE_NAME AS VARCHAR2(128)) AS R_OWNER,     CAST(CASE WHEN A.REF_CST_TYPE = 1 THEN F.CONSTRAINT_NAME         ELSE NULL END AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,     CAST(CASE WHEN DELETE_ACTION = 1 THEN 'NO ACTION'          WHEN DELETE_ACTION = 2 THEN 'CASCADE'          ELSE 'SET NULL' END AS VARCHAR2(9)) AS DELETE_RULE,     CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))          ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,     CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,     CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,     CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))          ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,     CAST(NULL AS VARCHAR2(14)) AS "GENERATED",     CAST(NULL AS VARCHAR2(3)) AS BAD,     CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))          ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,     CAST(NULL AS DATE) AS LAST_CHANGE,     CAST(NULL AS VARCHAR2(128)) AS INDEX_OWNER,     CAST(NULL AS VARCHAR2(128)) AS INDEX_NAME,     CAST(NULL AS VARCHAR2(7)) AS INVALID,     CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_FOREIGN_KEY_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT D, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT E, SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT F       WHERE A.CHILD_TABLE_ID = B.TABLE_ID         AND B.DATABASE_ID = C.DATABASE_ID         AND A.PARENT_TABLE_ID = D.TABLE_ID         AND D.DATABASE_ID = E.DATABASE_ID         AND (D.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, D.TABLE_ID, D.DATABASE_ID) = 1)         AND (A.PARENT_TABLE_ID = F.TABLE_ID              AND A.REF_CST_TYPE = 1              AND F.CONSTRAINT_TYPE = 1              AND A.REF_CST_ID = F.CONSTRAINT_ID)         AND A.TENANT_ID = EFFECTIVE_TENANT_ID()         AND B.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND D.TENANT_ID = EFFECTIVE_TENANT_ID()         AND E.TENANT_ID = EFFECTIVE_TENANT_ID()         AND F.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS OWNER,       CAST(CONSTRAINT_NAME AS VARCHAR2(128)) AS CONSTRAINT_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST('P' AS VARCHAR2(1))         ELSE CAST('C' AS VARCHAR2(1)) END AS CONSTRAINT_TYPE,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(NULL AS VARCHAR2(4000))         ELSE CAST(A.CHECK_EXPR AS VARCHAR2(4000)) END AS SEARCH_CONDITION,       CAST(NULL AS VARCHAR2(128)) AS R_OWNER,       CAST(NULL AS VARCHAR2(128)) AS R_CONSTRAINT_NAME,       CAST(NULL AS VARCHAR2(9)) AS DELETE_RULE,       CASE WHEN A.ENABLE_FLAG = 1 THEN CAST('ENABLED' AS VARCHAR2(8))         ELSE CAST('DISABLED' AS VARCHAR2(8)) END AS STATUS,       CAST('NOT DEFERRABLE' AS VARCHAR2(14)) AS DEFERRABLE,       CAST('IMMEDIATE' AS VARCHAR2(9)) AS DEFERRED,       CASE WHEN A.VALIDATE_FLAG = 1 THEN CAST('VALIDATED' AS VARCHAR2(13))         ELSE CAST('NOT VALIDATED' AS VARCHAR2(13)) END AS VALIDATED,       CAST(NULL AS VARCHAR2(14)) AS "GENERATED",       CAST(NULL AS VARCHAR2(3)) AS BAD,       CASE WHEN A.RELY_FLAG = 1 THEN CAST('RELY' AS VARCHAR2(4))         ELSE CAST(NULL AS VARCHAR2(4)) END AS RELY,       CAST(NULL AS DATE) AS LAST_CHANGE,       CAST(C.DATABASE_NAME AS VARCHAR2(128)) AS INDEX_OWNER,       CASE WHEN A.CONSTRAINT_TYPE = 1 THEN CAST(A.CONSTRAINT_NAME AS VARCHAR2(128))         ELSE CAST(NULL AS VARCHAR2(128)) END AS INDEX_NAME,       CAST(NULL AS VARCHAR2(7)) AS INVALID,       CAST(NULL AS VARCHAR2(14)) AS VIEW_RELATED     FROM SYS.ALL_VIRTUAL_CONSTRAINT_REAL_AGENT A, SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B, SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT C     WHERE A.TABLE_ID = B.TABLE_ID       AND B.DATABASE_ID = C.DATABASE_ID       AND (B.DATABASE_ID = USERENV('SCHEMAID')              OR USER_CAN_ACCESS_OBJ(1, B.TABLE_ID, B.DATABASE_ID) = 1)       AND C.DATABASE_NAME != '__recyclebin'       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID() 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_COL_PRIVS	       SELECT 	u_grantor.user_name as GRANTOR,         u_grantee.user_name as GRANTEE, 	db.database_name as OWNER, 	decode(auth.objtype, 1, t.table_name, '') as TABLE_NAME,         c.column_name as COLUMN_NAME,         cast (decode(auth.priv_id, 1, 'ALTER',                              2, 'AUDIT',                              3, 'COMMENT',                              4, 'DELETE',                              5, 'GRANT',                              6, 'INDEX',                              7, 'INSERT',                              8, 'LOCK',                              9, 'RENAME',                              10, 'SELECT',                              11, 'UPDATE',                              12, 'REFERENCES',                              13, 'EXECUTE',                              14, 'CREATE',                              15, 'FLASHBACK',                              16, 'READ',                              17, 'WRITE',                              'OTHERS') as varchar(40)) as PRIVILEGE,         decode(auth.priv_option, 0, 'NO', 1, 'YES', '') as GRANTABLE       FROM         sys.all_virtual_objauth_agent auth,         sys.ALL_VIRTUAL_COLUMN_REAL_AGENT c,         sys.ALL_VIRTUAL_TABLE_REAL_AGENT t,         sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantor,         sys.ALL_VIRTUAL_USER_REAL_AGENT u_grantee       WHERE         auth.col_id = c.column_id and         auth.obj_id = t.table_id and         auth.objtype = 1 and         auth.obj_id = c.table_id and         db.database_id = t.database_id and         u_grantor.user_id = auth.grantor_id and         u_grantee.user_id = auth.grantee_id         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTOR.TENANT_ID = EFFECTIVE_TENANT_ID()         AND U_GRANTEE.TENANT_ID = EFFECTIVE_TENANT_ID()         AND c.column_id != 65535   	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_COL_COMMENTS	     SELECT       A.DATABASE_NAME AS OWNER,       CAST(B.TABLE_NAME AS VARCHAR2(128)) AS TABLE_NAME,       C.COLUMN_NAME AS COLUMN_NAME,       CAST(C."COMMENT" AS VARCHAR(4000)) AS COMMENTS     FROM     SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT A,       SYS.ALL_VIRTUAL_TABLE_REAL_AGENT B,       SYS.ALL_VIRTUAL_COLUMN_REAL_AGENT C     WHERE       A.DATABASE_ID = B.DATABASE_ID       AND B.TABLE_ID = C.TABLE_ID       AND A.TENANT_ID = EFFECTIVE_TENANT_ID()       AND B.TENANT_ID = EFFECTIVE_TENANT_ID()       AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       AND (A.DATABASE_ID = USERENV('SCHEMAID')            OR USER_CAN_ACCESS_OBJ(1, B.TABLE_ID, B.DATABASE_ID) = 1) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_COLL_TYPES	     SELECT /*+ USE_MERGE(T, C, D, T1, D1) */       D.DATABASE_NAME AS OWNER,       T.TYPE_NAME AS TYPE_NAME,       CAST(         CASE C.UPPER_BOUND         WHEN 0 THEN 'COLLECTION'         ELSE 'TABLE' END AS VARCHAR2(10)) AS COLL_TYPE,       C.UPPER_BOUND AS UPPER_BOUND,       CAST(NULL AS VARCHAR2(7)) AS ELEM_TYPE_MOD,       CAST(         CASE C.PROPERTIES         WHEN 3 THEN NULL         ELSE D1.DATABASE_NAME END AS VARCHAR2(128)) AS ELEM_TYPE_OWNER,       CAST(         CASE C.PROPERTIES         WHEN 3           THEN DECODE (BITAND(C.ELEM_TYPE_ID, 1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(C.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(C.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(C.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(C.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(C.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, CONCAT('UROWID(', CONCAT(C.LENGTH, ')')),             46, DECODE(C.COLL_TYPE, 63, 'BLOB', 'CLOB'),             'NOT_SUPPORT')         ELSE t1.TYPE_NAME END AS VARCHAR2(324)) AS ELEM_TYPE_NAME,       C.LENGTH AS LENGTH,       C.NUMBER_PRECISION AS NUMBER_PRECISION,       C.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       CAST('YES' AS CHAR(3)) AS ELEM_STORAGE,       CAST('B' AS CHAR(1)) AS NULLS_STORED     FROM       SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T JOIN SYS.ALL_VIRTUAL_COLL_TYPE_REAL_AGENT C         ON T.TYPE_ID = C.COLL_TYPE_ID         AND T.TENANT_ID = EFFECTIVE_TENANT_ID()         AND C.TENANT_ID = EFFECTIVE_TENANT_ID()       JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D         ON T.TENANT_ID = SYS_CONTEXT('USERENV', 'CON_ID')           AND T.DATABASE_ID = D.DATABASE_ID           AND D.TENANT_ID = EFFECTIVE_TENANT_ID()           AND (T.DATABASE_ID = USERENV('SCHEMAID')              or USER_CAN_ACCESS_OBJ(4, T.TYPE_ID, 1) = 1)       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_REAL_AGENT T1         ON T1.TYPE_ID = C.ELEM_TYPE_ID         AND T1.TENANT_ID = EFFECTIVE_TENANT_ID()       LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D1         ON T1.DATABASE_ID = D1.DATABASE_ID         AND D1.TENANT_ID = EFFECTIVE_TENANT_ID()     UNION ALL     SELECT /*+ USE_MERGE(TS, CS, TS1) */       CAST('SYS' AS VARCHAR2(30)) AS OWNER,       TS.TYPE_NAME AS TYPE_NAME,       CAST(         CASE CS.UPPER_BOUND         WHEN 0 THEN 'COLLECTION'         ELSE 'TABLE' END AS VARCHAR2(10)) AS COLL_TYPE,       CS.UPPER_BOUND AS UPPER_BOUND,       CAST(NULL AS VARCHAR2(7)) AS ELEM_TYPE_MOD,       CAST(         CASE CS.PROPERTIES         WHEN 3 THEN NULL         ELSE 'SYS' END AS VARCHAR2(128)) AS ELEM_TYPE_OWNER,       CAST(         CASE CS.PROPERTIES         WHEN 3           THEN DECODE (BITAND(CS.ELEM_TYPE_ID, 1099511627775),             0,  'NULL',             1,  'NUMBER',             2,  'NUMBER',             3,  'NUMBER',             4,  'NUMBER',             5,  'NUMBER',             6,  'NUMBER',             7,  'NUMBER',             8,  'NUMBER',             9,  'NUMBER',             10, 'NUMBER',             11, 'BINARY_FLOAT',             12, 'BINARY_DOUBLE',             13, 'NUMBER',             14, 'NUMBER',             15, 'NUMBER',             16, 'NUMBER',             17, 'DATE',             18, 'TIMESTAMP',             19, 'DATE',             20, 'TIME',             21, 'YEAR',             22, 'VARCHAR2',             23, 'CHAR',             24, 'HEX_STRING',             25, 'EXT',             26, 'UNKNOWN',             27, 'TINYTEXT',             28, 'TEXT',             29, 'MEDIUMTEXT',             30,  DECODE(CS.COLL_TYPE, 63, 'BLOB', 'CLOB'),             31, 'BIT',             32, 'ENUM',             33, 'SET',             34, 'ENUM_INNER',             35, 'SET_INNER',             36, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ') WITH TIME ZONE')),             37, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ') WITH LOCAL TIME ZONE')),             38, CONCAT('TIMESTAMP(', CONCAT(CS.SCALE, ')')),             39, 'RAW',             40, CONCAT('INTERVAL YEAR(', CONCAT(CS.SCALE, ') TO MONTH')),             41, CONCAT('INTERVAL DAY(', CONCAT(TRUNC(CS.SCALE / 10), CONCAT(') TO SECOND(', CONCAT(MOD(CS.SCALE, 10), ')')))),             42, 'FLOAT',             43, 'NVARCHAR2',             44, 'NCHAR',             45, CONCAT('UROWID(', CONCAT(CS.LENGTH, ')')),             46, '',             'NOT_SUPPORT')         ELSE TS1.TYPE_NAME END AS VARCHAR2(324)) AS ELEM_TYPE_NAME,       CS.LENGTH AS LENGTH,       CS.NUMBER_PRECISION AS NUMBER_PRECISION,       CS.SCALE AS SCALE,       CAST('CHAR_CS' AS CHAR(7)) AS CHARACTER_SET_NAME,       CAST('YES' AS CHAR(3)) AS ELEM_STORAGE,       CAST('B' AS CHAR(1)) AS NULLS_STORED     FROM       SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS JOIN SYS.ALL_VIRTUAL_COLL_TYPE_SYS_AGENT CS         ON TS.TYPE_ID = CS.COLL_TYPE_ID       LEFT JOIN SYS.ALL_VIRTUAL_TYPE_SYS_AGENT TS1         ON TS1.TYPE_ID = CS.ELEM_TYPE_ID 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_ARGUMENTS	     SELECT     U.USER_NAME AS OWNER,     R.ROUTINE_NAME AS OBJECT_NAME,     CASE R.PACKAGE_ID WHEN -1 THEN NULL ELSE P.PACKAGE_NAME END AS PACKAGE_NAME,     CASE R.PACKAGE_ID WHEN -1 THEN R.ROUTINE_ID ELSE R.PACKAGE_ID END AS OBJECT_ID,     CASE R.OVERLOAD WHEN 0 THEN NULL ELSE R.OVERLOAD END AS OVERLOAD,     CASE R.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE R.SUBPROGRAM_ID END AS SUBPROGRAM_ID,     RP.PARAM_NAME AS ARGUMENT_NAME,     RP.PARAM_POSITION AS POSITION,     RP.SEQUENCE AS SEQUENCE,     RP.PARAM_LEVEL AS DATA_LEVEL,     V.DATA_TYPE_STR AS DATA_TYPE,     'NO' AS DEFAULTED,     RP.PARAM_LENGTH AS DATA_LENGTH,     DECODE(BITAND(RP.FLAG, 3), 1, 'IN', 2, 'OUT', 3, 'INOUT', 0, 'OUT') AS IN_OUT,     RP.PARAM_PRECISION AS DATA_PRECISION,     RP.PARAM_SCALE AS DATA_SCALE,     CASE RP.PARAM_CHARSET WHEN 1 THEN 'BINARY' WHEN 2 THEN 'UTF8MB4' ELSE NULL END AS CHARACTER_SET_NAME,     CASE RP.PARAM_COLL_TYPE WHEN 45 THEN 'UTF8MB4_GENERAL_CI' WHEN 46 THEN 'UTF8MB4_BIN' WHEN 63 THEN 'BINARY' ELSE NULL END AS COLLATION,     RP.TYPE_OWNER AS TYPE_OWNER,     RP.TYPE_NAME AS TYPE_NAME,     RP.TYPE_SUBNAME AS TYPE_SUBNAME,     RP.TENANT_ID AS ORIGIN_CON_ID   FROM     (SELECT * FROM SYS.ALL_VIRTUAL_ROUTINE_PARAM_REAL_AGENT       WHERE TENANT_ID = EFFECTIVE_TENANT_ID()) RP     LEFT JOIN SYS.ALL_VIRTUAL_ROUTINE_REAL_AGENT R ON RP.ROUTINE_ID = R.ROUTINE_ID       AND R.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_REAL_AGENT P ON R.PACKAGE_ID = P.PACKAGE_ID       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_DATABASE_REAL_AGENT D ON R.DATABASE_ID = D.DATABASE_ID       AND D.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_USER_REAL_AGENT U ON R.OWNER_ID = U.USER_ID       AND U.TENANT_ID = EFFECTIVE_TENANT_ID()     LEFT JOIN SYS.ALL_VIRTUAL_DATA_TYPE V ON RP.PARAM_TYPE = V.DATA_TYPE   WHERE     (SYS_CONTEXT('USERENV', 'CON_ID') = RP.TENANT_ID OR RP.TENANT_ID = 1)     AND D.IN_RECYCLEBIN = 0     AND (R.DATABASE_ID = USERENV('SCHEMAID')       OR USER_CAN_ACCESS_OBJ(12, RP.ROUTINE_ID, 1) = 1)   UNION ALL   SELECT     CAST('SYS' AS VARCHAR2(30)) AS OWNER,     RS.ROUTINE_NAME AS OBJECT_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN NULL ELSE PS.PACKAGE_NAME END AS PACKAGE_NAME,     CASE RS.PACKAGE_ID WHEN -1 THEN RS.ROUTINE_ID ELSE RS.PACKAGE_ID END AS OBJECT_ID,     CASE RS.OVERLOAD WHEN 0 THEN NULL ELSE RS.OVERLOAD END AS OVERLOAD,     CASE RS.SUBPROGRAM_ID WHEN 0 THEN 1 ELSE RS.SUBPROGRAM_ID END AS SUBPROGRAM_ID,     RPS.PARAM_NAME AS ARGUMENT_NAME,     RPS.PARAM_POSITION AS POSITION,     RPS.SEQUENCE AS SEQUENCE,     RPS.PARAM_LEVEL AS DATA_LEVEL,     VV.DATA_TYPE_STR AS DATA_TYPE,     'NO' AS DEFAULTED,     RPS.PARAM_LENGTH AS DATA_LENGTH,     DECODE(BITAND(RPS.FLAG, 3), 1, 'IN', 2, 'OUT', 3, 'INOUT') AS IN_OUT,     RPS.PARAM_PRECISION AS DATA_PRECISION,     RPS.PARAM_SCALE AS DATA_SCALE,     CASE RPS.PARAM_CHARSET WHEN 1 THEN 'BINARY' WHEN 2 THEN 'UTF8MB4' ELSE NULL END AS CHARACTER_SET_NAME,     CASE RPS.PARAM_COLL_TYPE WHEN 45 THEN 'UTF8MB4_GENERAL_CI' WHEN 46 THEN 'UTF8MB4_BIN' WHEN 63 THEN 'BINARY' ELSE NULL END AS COLLATION,     RPS.TYPE_OWNER AS TYPE_OWNER,     RPS.TYPE_NAME AS TYPE_NAME,     RPS.TYPE_SUBNAME AS TYPE_SUBNAME,     RPS.TENANT_ID AS ORIGIN_CON_ID   FROM     SYS.ALL_VIRTUAL_ROUTINE_PARAM_SYS_AGENT RPS     LEFT JOIN SYS.ALL_VIRTUAL_ROUTINE_SYS_AGENT RS ON RPS.ROUTINE_ID = RS.ROUTINE_ID     LEFT JOIN SYS.ALL_VIRTUAL_PACKAGE_SYS_AGENT PS ON RS.PACKAGE_ID = PS.PACKAGE_ID     LEFT JOIN SYS.ALL_VIRTUAL_DATA_TYPE VV ON RPS.PARAM_TYPE = VV.DATA_TYPE 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
def	SYS	ALL_ALL_TABLES	 SELECT   CAST(db.database_name AS VARCHAR2(128)) AS OWNER,   CAST(t.table_name AS VARCHAR2(128)) AS TABLE_NAME,   CAST(NULL AS VARCHAR2(30)) AS TABLESPACE_NAME,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_NAME,   CAST(NULL AS VARCHAR2(30)) AS IOT_NAME,   CAST('VALID' AS VARCHAR2(8)) AS STATUS,   CAST(t."PCTFREE" AS NUMBER) AS PCT_FREE,   CAST(NULL AS NUMBER) AS PCT_USED,   CAST(NULL AS NUMBER) AS INI_TRANS,   CAST(NULL AS NUMBER) AS MAX_TRANS,   CAST(NULL AS NUMBER) AS INITIAL_EXTENT,   CAST(NULL AS NUMBER) AS NEXT_EXTENT,   CAST(NULL AS NUMBER) AS MIN_EXTENTS,   CAST(NULL AS NUMBER) AS MAX_EXTENTS,   CAST(NULL AS NUMBER) AS PCT_INCREASE,   CAST(NULL AS NUMBER) AS FREELISTS,   CAST(NULL AS NUMBER) AS FREELIST_GROUPS,   CAST(NULL AS VARCHAR2(3)) AS LOGGING,   CAST(NULL AS VARCHAR2(1)) AS BACKED_UP,   CAST(info.row_count AS NUMBER) AS NUM_ROWS,   CAST(NULL AS NUMBER) AS BLOCKS,   CAST(NULL AS NUMBER) AS EMPTY_BLOCKS,   CAST(NULL AS NUMBER) AS AVG_SPACE,   CAST(NULL AS NUMBER) AS CHAIN_CNT,   CAST(NULL AS NUMBER) AS AVG_ROW_LEN,   CAST(NULL AS NUMBER) AS AVG_SPACE_FREELIST_BLOCKS,   CAST(NULL AS NUMBER) AS NUM_FREELIST_BLOCKS,   CAST(NULL AS VARCHAR2(40)) AS DEGREE,   CAST(NULL AS VARCHAR2(40)) AS INSTANCES,   CAST(NULL AS VARCHAR2(20)) AS CACHE,   CAST(NULL AS VARCHAR2(8)) AS TABLE_LOCK,   CAST(NULL AS NUMBER) AS SAMPLE_SIZE,   CAST(NULL AS DATE) AS LAST_ANALYZED,   CAST(   CASE     WHEN       t.part_level = 0     THEN       'NO'     ELSE       'YES'   END   AS VARCHAR2(3)) AS PARTITIONED,   CAST(NULL AS VARCHAR2(12)) AS IOT_TYPE,   CAST(NULL AS VARCHAR2(16)) AS OBJECT_ID_TYPE,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE_OWNER,   CAST(NULL AS VARCHAR2(128)) AS TABLE_TYPE,   CAST(decode (t.table_type, 8, 'YES', 9, 'YES', 'NO') AS VARCHAR2(1)) AS TEMPORARY,   CAST(NULL AS VARCHAR2(1)) AS SECONDARY,   CAST(NULL AS VARCHAR2(3)) AS NESTED,   CAST(NULL AS VARCHAR2(7)) AS BUFFER_POOL,   CAST(NULL AS VARCHAR2(7)) AS FLASH_CACHE,   CAST(NULL AS VARCHAR2(7)) AS CELL_FLASH_CACHE,   CAST(NULL AS VARCHAR2(8)) AS ROW_MOVEMENT,   CAST(NULL AS VARCHAR2(3)) AS GLOBAL_STATS,   CAST(NULL AS VARCHAR2(3)) AS USER_STATS,   CAST( decode (t.table_type, 8, 'SYS$SESSION', 9, 'SYS$TRANSACTION', NULL) AS VARCHAR2(15)) AS DURATION,   CAST(NULL AS VARCHAR2(8)) AS SKIP_CORRUPT,   CAST(NULL AS VARCHAR2(3)) AS MONITORING,   CAST(NULL AS VARCHAR2(30)) AS CLUSTER_OWNER,   CAST(NULL AS VARCHAR2(8)) AS DEPENDENCIES,   CAST(NULL AS VARCHAR2(8)) AS COMPRESSION,   CAST(NULL AS VARCHAR2(12)) AS COMPRESS_FOR,   CAST(   CASE     WHEN       db.database_name =  '__recyclebin'     THEN 'YES'     ELSE       'NO'   END   AS VARCHAR2(3)) AS DROPPED,   CAST(NULL AS VARCHAR2(3)) AS READ_ONLY,   CAST(NULL AS VARCHAR2(3)) AS SEGMENT_CREATED,   CAST(NULL AS VARCHAR2(7)) AS RESULT_CACHE FROM   (     SELECT       tenant_id,       table_id,       SUM(row_count) AS row_count     FROM       sys.ALL_VIRTUAL_TENANT_PARTITION_META_TABLE_REAL_AGENT p     WHERE       p.role = 1       AND P.TENANT_ID = EFFECTIVE_TENANT_ID()     GROUP BY       tenant_id,       table_id   )   info   RIGHT JOIN     sys.ALL_VIRTUAL_TABLE_REAL_AGENT t     ON t.tenant_id = info.tenant_id     AND t.table_id = info.table_id     AND T.TENANT_ID = EFFECTIVE_TENANT_ID(),     sys.ALL_VIRTUAL_DATABASE_REAL_AGENT db  WHERE     db.tenant_id = t.tenant_id     AND db.database_id = t.database_id     AND db.database_name != '__recyclebin'     AND DB.TENANT_ID = EFFECTIVE_TENANT_ID()     AND t.table_type != 5     AND (t.database_id = USERENV('SCHEMAID')          or user_can_access_obj(1, t.table_id, t.database_id) =1     ) 	NONE	NO	NONE	NONE	utf8mb4	utf8mb4_general_ci
select table_schema, table_name from views order by table_name desc;
table_schema	table_name
SYS	V$VERSION
SYS	V$TIMEZONE_NAMES
SYS	V$TENANT_PX_WORKER_STAT
SYS	V$TENANT_MEMSTORE_ALLOCATOR_INFO
SYS	V$SYSTEM_EVENT
SYS	V$SYSSTAT
SYS	V$SSTABLE
SYS	V$SQL_WORKAREA_HISTOGRAM
SYS	V$SQL_WORKAREA_ACTIVE
SYS	V$SQL_WORKAREA
SYS	V$SQL_PLAN_MONITOR
SYS	V$SQL_MONITOR_STATNAME
SYS	V$SQL_AUDIT
SYS	V$SESSTAT
SYS	V$SESSION_WAIT_HISTORY
SYS	V$SESSION_WAIT
SYS	V$SERVER_SCHEMA_INFO
SYS	V$RSRC_PLAN
SYS	V$RESTORE_POINT
SYS	V$PS_STAT
SYS	V$PS_ITEM_INFO
SYS	V$PLAN_CACHE_STAT
SYS	V$PLAN_CACHE_REFERENCE_INFO
SYS	V$PLAN_CACHE_PLAN_STAT
SYS	V$PLAN_CACHE_PLAN_EXPLAIN
SYS	V$OPEN_CURSOR
SYS	V$OB_SQL_WORKAREA_MEMORY_INFO
SYS	V$NLS_PARAMETERS
SYS	V$MEMSTORE_INFO
SYS	V$MEMSTORE
SYS	V$MEMORY
SYS	V$LOCK
SYS	V$INSTANCE
SYS	V$GLOBAL_TRANSACTION
SYS	USER_VIEWS
SYS	USER_TYPE_METHODS
SYS	USER_TYPE_ATTRS
SYS	USER_TYPES
SYS	USER_TRIGGERS
SYS	USER_TAB_SUBPARTITIONS
SYS	USER_TAB_PRIVS
SYS	USER_TAB_PARTITIONS
SYS	USER_TAB_COMMENTS
SYS	USER_TAB_COLUMNS
SYS	USER_TAB_COLS_V$
SYS	USER_TAB_COLS
SYS	USER_TABLESPACES
SYS	USER_TABLES
SYS	USER_SYS_PRIVS
SYS	USER_SYNONYMS
SYS	USER_SUBPART_KEY_COLUMNS
SYS	USER_SUBPARTITION_TEMPLATES
SYS	USER_SOURCE
SYS	USER_SEQUENCES
SYS	USER_SEGMENTS
SYS	USER_SCHEDULER_PROGRAM_ARGS
SYS	USER_SCHEDULER_JOB_ARGS
SYS	USER_ROLE_PRIVS
SYS	USER_RECYCLEBIN
SYS	USER_PROFILES
SYS	USER_PROCEDURES
SYS	USER_PART_TABLES
SYS	USER_PART_KEY_COLUMNS
SYS	USER_PART_INDEXES
SYS	USER_OBJECTS
SYS	USER_MVIEW_COMMENTS
SYS	USER_METHOD_PARAMS
SYS	USER_IND_SUBPARTITIONS
SYS	USER_IND_PARTITIONS
SYS	USER_IND_EXPRESSIONS
SYS	USER_IND_COLUMNS
SYS	USER_INDEXES
SYS	USER_ERRORS
SYS	USER_DEPENDENCIES
SYS	USER_CONS_COLUMNS
SYS	USER_CONSTRAINTS
SYS	USER_COL_PRIVS
SYS	USER_COL_COMMENTS
SYS	USER_COLL_TYPES
SYS	USER_ARGUMENTS
SYS	USER_ALL_TABLES
mysql	time_zone_transition_type
mysql	time_zone_transition
mysql	time_zone_name
mysql	time_zone
SYS	ROLE_TAB_PRIVS
SYS	ROLE_SYS_PRIVS
SYS	ROLE_ROLE_PRIVS
SYS	NLS_SESSION_PARAMETERS
SYS	NLS_INSTANCE_PARAMETERS
SYS	NLS_DATABASE_PARAMETERS
SYS	GV$TENANT_PX_WORKER_STAT
SYS	GV$TENANT_MEMSTORE_ALLOCATOR_INFO
SYS	GV$SYSTEM_EVENT
SYS	GV$SYSSTAT
SYS	GV$SSTABLE
SYS	GV$SQL_WORKAREA_HISTOGRAM
SYS	GV$SQL_WORKAREA_ACTIVE
SYS	GV$SQL_WORKAREA
SYS	GV$SQL_PLAN_MONITOR
SYS	GV$SQL_AUDIT
SYS	GV$SESSTAT
SYS	GV$SESSION_WAIT_HISTORY
SYS	GV$SESSION_WAIT
SYS	GV$SERVER_SCHEMA_INFO
SYS	GV$SERVER_MEMSTORE
SYS	GV$PS_STAT
SYS	GV$PS_ITEM_INFO
SYS	GV$PLAN_CACHE_STAT
SYS	GV$PLAN_CACHE_REFERENCE_INFO
SYS	GV$PLAN_CACHE_PLAN_STAT
SYS	GV$PLAN_CACHE_PLAN_EXPLAIN
SYS	GV$OUTLINE
SYS	GV$OPEN_CURSOR
SYS	GV$OB_SQL_WORKAREA_MEMORY_INFO
SYS	GV$MEMSTORE_INFO
SYS	GV$MEMSTORE
SYS	GV$MEMORY
SYS	GV$LOCK
SYS	GV$INSTANCE
SYS	GV$GLOBAL_TRANSACTION
SYS	GV$CONCURRENT_LIMIT_SQL
SYS	DICTIONARY
SYS	DICT
SYS	DBA_VIEWS
SYS	DBA_USERS
SYS	DBA_TYPE_METHODS
SYS	DBA_TYPE_ATTRS
SYS	DBA_TYPES
SYS	DBA_TRIGGERS
SYS	DBA_TAB_SUBPARTITIONS
SYS	DBA_TAB_PRIVS
SYS	DBA_TAB_PARTITIONS
SYS	DBA_TAB_COMMENTS
SYS	DBA_TAB_COLUMNS
SYS	DBA_TAB_COLS_V$
SYS	DBA_TAB_COLS
SYS	DBA_TABLESPACES
SYS	DBA_TABLES
SYS	DBA_SYS_PRIVS
SYS	DBA_SYNONYMS
SYS	DBA_SUBPART_KEY_COLUMNS
SYS	DBA_SUBPARTITION_TEMPLATES
SYS	DBA_SOURCE
SYS	DBA_SEQUENCES
SYS	DBA_SEGMENTS
SYS	DBA_SCHEDULER_PROGRAM_ARGS
SYS	DBA_SCHEDULER_JOB_ARGS
SYS	DBA_RSRC_PLAN_DIRECTIVES
SYS	DBA_RSRC_PLANS
SYS	DBA_RSRC_GROUP_MAPPINGS
SYS	DBA_RSRC_CONSUMER_GROUPS
SYS	DBA_ROLE_PRIVS
SYS	DBA_ROLES
SYS	DBA_RECYCLEBIN
SYS	DBA_PROFILES
SYS	DBA_PROCEDURES
SYS	DBA_PART_TABLES
SYS	DBA_PART_KEY_COLUMNS
SYS	DBA_PART_INDEXES
SYS	DBA_OBJECTS
SYS	DBA_MVIEW_COMMENTS
SYS	DBA_METHOD_PARAMS
SYS	DBA_IND_SUBPARTITIONS
SYS	DBA_IND_PARTITIONS
SYS	DBA_IND_EXPRESSIONS
SYS	DBA_IND_COLUMNS
SYS	DBA_INDEXES
SYS	DBA_ERRORS
SYS	DBA_DEPENDENCIES
SYS	DBA_CONS_COLUMNS
SYS	DBA_CONSTRAINTS
SYS	DBA_COL_PRIVS
SYS	DBA_COL_COMMENTS
SYS	DBA_COLL_TYPES
SYS	DBA_ARGUMENTS
SYS	DBA_ALL_TABLES
SYS	ALL_VIEWS
SYS	ALL_USERS
SYS	ALL_TYPE_METHODS
SYS	ALL_TYPE_ATTRS
SYS	ALL_TYPES
SYS	ALL_TRIGGERS
SYS	ALL_TAB_SUBPARTITIONS
SYS	ALL_TAB_PRIVS
SYS	ALL_TAB_PARTITIONS
SYS	ALL_TAB_COMMENTS
SYS	ALL_TAB_COLUMNS
SYS	ALL_TAB_COLS_V$
SYS	ALL_TAB_COLS
SYS	ALL_TABLES
SYS	ALL_SYNONYMS
SYS	ALL_SUBPART_KEY_COLUMNS
SYS	ALL_SUBPARTITION_TEMPLATES
SYS	ALL_SOURCE
SYS	ALL_SEQUENCES
SYS	ALL_SCHEDULER_PROGRAM_ARGS
SYS	ALL_SCHEDULER_JOB_ARGS
SYS	ALL_PROFILES
SYS	ALL_PROCEDURES
SYS	ALL_PART_TABLES
SYS	ALL_PART_KEY_COLUMNS
SYS	ALL_PART_INDEXES
SYS	ALL_OBJECTS
SYS	ALL_MVIEW_COMMENTS
SYS	ALL_METHOD_PARAMS
SYS	ALL_IND_SUBPARTITIONS
SYS	ALL_IND_PARTITIONS
SYS	ALL_IND_EXPRESSIONS
SYS	ALL_IND_COLUMNS
SYS	ALL_INDEXES
SYS	ALL_ERRORS
SYS	ALL_DEPENDENCIES
SYS	ALL_CONS_COLUMNS
SYS	ALL_CONSTRAINTS
SYS	ALL_COL_PRIVS
SYS	ALL_COL_COMMENTS
SYS	ALL_COLL_TYPES
SYS	ALL_ARGUMENTS
SYS	ALL_ALL_TABLES
show create view views;
View	Create View	character_set_client	collation_connection
VIEWS	CREATE VIEW `VIEWS` AS select /*+ READ_CONSISTENCY(WEAK) */ 'def' AS TABLE_CATALOG,                    d.database_name as TABLE_SCHEMA,                    t.table_name as TABLE_NAME,                    t.view_definition as VIEW_DEFINITION,                    'NONE' as CHECK_OPTION,                    case t.view_is_updatable when 1 then 'YES' else 'NO' end as IS_UPDATABLE,                    'NONE' as DEFINER,                    'NONE' AS SECURITY_TYPE,                    case t.collation_type when 45 then 'utf8mb4' else 'NONE' end AS CHARACTER_SET_CLIENT,                    case t.collation_type when 45 then 'utf8mb4_general_ci' else 'NONE' end AS COLLATION_CONNECTION                    from oceanbase.__all_virtual_table as t join oceanbase.__all_virtual_database as d on t.tenant_id = effective_tenant_id() and d.tenant_id = effective_tenant_id() and t.database_id = d.database_id                    where (t.table_type = 1 or t.table_type = 4) and d.in_recyclebin = 0 and d.database_name != '__recyclebin' and d.database_name != 'information_schema' and d.database_name != 'oceanbase' 	utf8mb4	utf8mb4_general_ci
desc views;
Field	Type	Null	Key	Default	Extra
TABLE_CATALOG	varchar(3)	NO			
TABLE_SCHEMA	varchar(128)	NO			
TABLE_NAME	varchar(256)	NO			
VIEW_DEFINITION	longtext	NO		NULL	
CHECK_OPTION	varchar(4)	NO			
IS_UPDATABLE	varchar(3)	NO		NULL	
DEFINER	varchar(4)	NO			
SECURITY_TYPE	varchar(4)	NO			
CHARACTER_SET_CLIENT	varchar(7)	NO		NULL	
COLLATION_CONNECTION	varchar(18)	NO		NULL	
disconnect obsys;
connection default;
